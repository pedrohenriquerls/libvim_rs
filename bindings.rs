/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const TERMINFO: u32 = 1;
pub const HAVE_OSPEED: u32 = 1;
pub const HAVE_UP_BC_PC: u32 = 1;
pub const HAVE_DATE_TIME: u32 = 1;
pub const HAVE_ATTRIBUTE_UNUSED: u32 = 1;
pub const UNIX: u32 = 1;
pub const VIM_SIZEOF_INT: u32 = 4;
pub const VIM_SIZEOF_LONG: u32 = 8;
pub const SIZEOF_OFF_T: u32 = 8;
pub const SIZEOF_TIME_T: u32 = 8;
pub const USEMEMMOVE: u32 = 1;
pub const TIME_WITH_SYS_TIME: u32 = 1;
pub const SYS_SELECT_WITH_SYS_TIME: u32 = 1;
pub const PTYRANGE0: &[u8; 9] = b"pqrstuvw\0";
pub const PTYRANGE1: &[u8; 17] = b"0123456789abcdef\0";
pub const HAVE_SIGCONTEXT: u32 = 1;
pub const TGETENT_ZERO_ERR: u32 = 0;
pub const HAVE_FCHDIR: u32 = 1;
pub const HAVE_FCHOWN: u32 = 1;
pub const HAVE_FCHMOD: u32 = 1;
pub const HAVE_FLOAT_FUNCS: u32 = 1;
pub const HAVE_FSEEKO: u32 = 1;
pub const HAVE_FSYNC: u32 = 1;
pub const HAVE_FTRUNCATE: u32 = 1;
pub const HAVE_GETCWD: u32 = 1;
pub const HAVE_GETPGID: u32 = 1;
pub const HAVE_GETPWENT: u32 = 1;
pub const HAVE_GETPWNAM: u32 = 1;
pub const HAVE_GETPWUID: u32 = 1;
pub const HAVE_GETRLIMIT: u32 = 1;
pub const HAVE_GETTIMEOFDAY: u32 = 1;
pub const HAVE_ICONV: u32 = 1;
pub const HAVE_LOCALTIME_R: u32 = 1;
pub const HAVE_LSTAT: u32 = 1;
pub const HAVE_MEMSET: u32 = 1;
pub const HAVE_MKDTEMP: u32 = 1;
pub const HAVE_NANOSLEEP: u32 = 1;
pub const HAVE_NL_LANGINFO_CODESET: u32 = 1;
pub const HAVE_OPENDIR: u32 = 1;
pub const HAVE_POSIX_OPENPT: u32 = 1;
pub const HAVE_PUTENV: u32 = 1;
pub const HAVE_QSORT: u32 = 1;
pub const HAVE_READLINK: u32 = 1;
pub const HAVE_RENAME: u32 = 1;
pub const HAVE_SELECT: u32 = 1;
pub const HAVE_SETENV: u32 = 1;
pub const HAVE_SETPGID: u32 = 1;
pub const HAVE_SETSID: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_SIGALTSTACK: u32 = 1;
pub const HAVE_SIGSET: u32 = 1;
pub const HAVE_SIGSETJMP: u32 = 1;
pub const HAVE_SIGPROCMASK: u32 = 1;
pub const HAVE_SIGVEC: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_STRERROR: u32 = 1;
pub const HAVE_STRFTIME: u32 = 1;
pub const HAVE_STRNCASECMP: u32 = 1;
pub const HAVE_STRPBRK: u32 = 1;
pub const HAVE_STRTOL: u32 = 1;
pub const HAVE_ST_BLKSIZE: u32 = 1;
pub const HAVE_SYSCONF: u32 = 1;
pub const HAVE_SYSCTL: u32 = 1;
pub const HAVE_TGETENT: u32 = 1;
pub const HAVE_TOWLOWER: u32 = 1;
pub const HAVE_TOWUPPER: u32 = 1;
pub const HAVE_ISWUPPER: u32 = 1;
pub const HAVE_UNSETENV: u32 = 1;
pub const HAVE_USLEEP: u32 = 1;
pub const HAVE_UTIME: u32 = 1;
pub const HAVE_BIND_TEXTDOMAIN_CODESET: u32 = 1;
pub const HAVE_MBLEN: u32 = 1;
pub const HAVE_UTIMES: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_ERRNO_H: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_ICONV_H: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LIBC_H: u32 = 1;
pub const HAVE_LIBGEN_H: u32 = 1;
pub const HAVE_LIBINTL_H: u32 = 1;
pub const HAVE_LOCALE_H: u32 = 1;
pub const HAVE_MATH_H: u32 = 1;
pub const HAVE_POLL_H: u32 = 1;
pub const HAVE_PWD_H: u32 = 1;
pub const HAVE_SETJMP_H: u32 = 1;
pub const HAVE_SGTTY_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_SYS_ACL_H: u32 = 1;
pub const HAVE_SYS_IOCTL_H: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_POLL_H: u32 = 1;
pub const HAVE_SYS_RESOURCE_H: u32 = 1;
pub const HAVE_SYS_SELECT_H: u32 = 1;
pub const HAVE_SYS_SYSCTL_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_UTSNAME_H: u32 = 1;
pub const HAVE_TERMCAP_H: u32 = 1;
pub const HAVE_TERMIOS_H: u32 = 1;
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_WCTYPE_H: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UTIME_H: u32 = 1;
pub const HAVE_SYS_WAIT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const NO_STRINGS_WITH_STRING_H: u32 = 1;
pub const FEAT_HUGE: u32 = 1;
pub const HAVE_POSIX_ACL: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_GETTEXT: u32 = 1;
pub const HAVE_NL_MSG_CAT_CNTR: u32 = 1;
pub const HAVE_DLOPEN: u32 = 1;
pub const HAVE_DLSYM: u32 = 1;
pub const FEAT_NETBEANS_INTG: u32 = 1;
pub const FEAT_JOB_CHANNEL: u32 = 1;
pub const FEAT_TERMINAL: u32 = 1;
pub const USE_XSMP_INTERACT: u32 = 1;
pub const HAVE_FD_CLOEXEC: u32 = 1;
pub const HAVE_AVAILABILITYMACROS_H: u32 = 1;
pub const HAVE_ISINF: u32 = 1;
pub const HAVE_ISNAN: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const ROOT_UID: u32 = 0;
pub const MAX_MSG_HIST_LEN: u32 = 200;
pub const STARTUPTIME: u32 = 1;
pub const SESSION_FILE: &[u8; 12] = b"Session.vim\0";
pub const SYS_OPTWIN_FILE: &[u8; 23] = b"$VIMRUNTIME/optwin.vim\0";
pub const RUNTIME_DIRNAME: &[u8; 8] = b"runtime\0";
pub const VIMPACKAGE: &[u8; 4] = b"vim\0";
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_XROS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_14_0: u32 = 140000;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_17_0: u32 = 170000;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_17_0: u32 = 170000;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __XROS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140000;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const EF_IS_SYNTHETIC: u32 = 32;
pub const EF_SHARES_ALL_BLOCKS: u32 = 64;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 131072;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const NMBCLUSTERS: u32 = 512;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 131072;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const AUDIT_RECORD_MAGIC: u32 = 2190085915;
pub const MAX_AUDIT_RECORDS: u32 = 20;
pub const MAXAUDITDATA: u32 = 32767;
pub const MAX_AUDIT_RECORD_SIZE: u32 = 32767;
pub const MIN_AUDIT_FILE_SIZE: u32 = 524288;
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS: u32 = 4;
pub const AUDIT_TRIGGER_MIN: u32 = 1;
pub const AUDIT_TRIGGER_LOW_SPACE: u32 = 1;
pub const AUDIT_TRIGGER_ROTATE_KERNEL: u32 = 2;
pub const AUDIT_TRIGGER_READ_FILE: u32 = 3;
pub const AUDIT_TRIGGER_CLOSE_AND_DIE: u32 = 4;
pub const AUDIT_TRIGGER_NO_SPACE: u32 = 5;
pub const AUDIT_TRIGGER_ROTATE_USER: u32 = 6;
pub const AUDIT_TRIGGER_INITIALIZE: u32 = 7;
pub const AUDIT_TRIGGER_EXPIRE_TRAILS: u32 = 8;
pub const AUDIT_TRIGGER_MAX: u32 = 8;
pub const AUDITDEV_FILENAME: &[u8; 6] = b"audit\0";
pub const AUDIT_TRIGGER_FILE: &[u8; 11] = b"/dev/audit\0";
pub const AU_DEFAUDITSID: u32 = 0;
pub const AU_ASSIGN_ASID: i32 = -1;
pub const AUC_UNSET: u32 = 0;
pub const AUC_AUDITING: u32 = 1;
pub const AUC_NOAUDIT: u32 = 2;
pub const AUC_DISABLED: i32 = -1;
pub const A_OLDGETPOLICY: u32 = 2;
pub const A_OLDSETPOLICY: u32 = 3;
pub const A_GETKMASK: u32 = 4;
pub const A_SETKMASK: u32 = 5;
pub const A_OLDGETQCTRL: u32 = 6;
pub const A_OLDSETQCTRL: u32 = 7;
pub const A_GETCWD: u32 = 8;
pub const A_GETCAR: u32 = 9;
pub const A_GETSTAT: u32 = 12;
pub const A_SETSTAT: u32 = 13;
pub const A_SETUMASK: u32 = 14;
pub const A_SETSMASK: u32 = 15;
pub const A_OLDGETCOND: u32 = 20;
pub const A_OLDSETCOND: u32 = 21;
pub const A_GETCLASS: u32 = 22;
pub const A_SETCLASS: u32 = 23;
pub const A_GETPINFO: u32 = 24;
pub const A_SETPMASK: u32 = 25;
pub const A_SETFSIZE: u32 = 26;
pub const A_GETFSIZE: u32 = 27;
pub const A_GETPINFO_ADDR: u32 = 28;
pub const A_GETKAUDIT: u32 = 29;
pub const A_SETKAUDIT: u32 = 30;
pub const A_SENDTRIGGER: u32 = 31;
pub const A_GETSINFO_ADDR: u32 = 32;
pub const A_GETPOLICY: u32 = 33;
pub const A_SETPOLICY: u32 = 34;
pub const A_GETQCTRL: u32 = 35;
pub const A_SETQCTRL: u32 = 36;
pub const A_GETCOND: u32 = 37;
pub const A_SETCOND: u32 = 38;
pub const A_GETSFLAGS: u32 = 39;
pub const A_SETSFLAGS: u32 = 40;
pub const A_GETCTLMODE: u32 = 41;
pub const A_SETCTLMODE: u32 = 42;
pub const A_GETEXPAFTER: u32 = 43;
pub const A_SETEXPAFTER: u32 = 44;
pub const AUDIT_CNT: u32 = 1;
pub const AUDIT_AHLT: u32 = 2;
pub const AUDIT_ARGV: u32 = 4;
pub const AUDIT_ARGE: u32 = 8;
pub const AUDIT_SEQ: u32 = 16;
pub const AUDIT_WINDATA: u32 = 32;
pub const AUDIT_USER: u32 = 64;
pub const AUDIT_GROUP: u32 = 128;
pub const AUDIT_TRAIL: u32 = 256;
pub const AUDIT_PATH: u32 = 512;
pub const AUDIT_SCNT: u32 = 1024;
pub const AUDIT_PUBLIC: u32 = 2048;
pub const AUDIT_ZONENAME: u32 = 4096;
pub const AUDIT_PERZONE: u32 = 8192;
pub const AQ_HIWATER: u32 = 100;
pub const AQ_MAXHIGH: u32 = 10000;
pub const AQ_LOWATER: u32 = 10;
pub const AQ_BUFSZ: u32 = 32767;
pub const AQ_MAXBUFSZ: u32 = 1048576;
pub const AU_FS_MINFREE: u32 = 20;
pub const AU_IPv4: u32 = 4;
pub const AU_IPv6: u32 = 16;
pub const AU_CLASS_MASK_RESERVED: u32 = 268435456;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_PROVISIONAL_ID_PROT_OPTOUT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const CRF_NOMEMBERD: u32 = 1;
pub const CRF_MAC_ENFORCE: u32 = 2;
pub const XUCRED_VERSION: u32 = 0;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const FSOPT_NOFOLLOW: u32 = 1;
pub const FSOPT_NOINMEMUPDATE: u32 = 2;
pub const FSOPT_REPORT_FULLSIZE: u32 = 4;
pub const FSOPT_PACK_INVAL_ATTRS: u32 = 8;
pub const FSOPT_ATTR_CMN_EXTENDED: u32 = 32;
pub const FSOPT_RETURN_REALDEV: u32 = 512;
pub const FSOPT_NOFOLLOW_ANY: u32 = 2048;
pub const SEARCHFS_MAX_SEARCHPARMS: u32 = 4096;
pub const ATTR_BIT_MAP_COUNT: u32 = 5;
pub const VOL_CAPABILITIES_FORMAT: u32 = 0;
pub const VOL_CAPABILITIES_INTERFACES: u32 = 1;
pub const VOL_CAPABILITIES_RESERVED1: u32 = 2;
pub const VOL_CAPABILITIES_RESERVED2: u32 = 3;
pub const ATTR_MAX_BUFFER: u32 = 8192;
pub const VOL_CAP_FMT_PERSISTENTOBJECTIDS: u32 = 1;
pub const VOL_CAP_FMT_SYMBOLICLINKS: u32 = 2;
pub const VOL_CAP_FMT_HARDLINKS: u32 = 4;
pub const VOL_CAP_FMT_JOURNAL: u32 = 8;
pub const VOL_CAP_FMT_JOURNAL_ACTIVE: u32 = 16;
pub const VOL_CAP_FMT_NO_ROOT_TIMES: u32 = 32;
pub const VOL_CAP_FMT_SPARSE_FILES: u32 = 64;
pub const VOL_CAP_FMT_ZERO_RUNS: u32 = 128;
pub const VOL_CAP_FMT_CASE_SENSITIVE: u32 = 256;
pub const VOL_CAP_FMT_CASE_PRESERVING: u32 = 512;
pub const VOL_CAP_FMT_FAST_STATFS: u32 = 1024;
pub const VOL_CAP_FMT_2TB_FILESIZE: u32 = 2048;
pub const VOL_CAP_FMT_OPENDENYMODES: u32 = 4096;
pub const VOL_CAP_FMT_HIDDEN_FILES: u32 = 8192;
pub const VOL_CAP_FMT_PATH_FROM_ID: u32 = 16384;
pub const VOL_CAP_FMT_NO_VOLUME_SIZES: u32 = 32768;
pub const VOL_CAP_FMT_DECMPFS_COMPRESSION: u32 = 65536;
pub const VOL_CAP_FMT_64BIT_OBJECT_IDS: u32 = 131072;
pub const VOL_CAP_FMT_DIR_HARDLINKS: u32 = 262144;
pub const VOL_CAP_FMT_DOCUMENT_ID: u32 = 524288;
pub const VOL_CAP_FMT_WRITE_GENERATION_COUNT: u32 = 1048576;
pub const VOL_CAP_FMT_NO_IMMUTABLE_FILES: u32 = 2097152;
pub const VOL_CAP_FMT_NO_PERMISSIONS: u32 = 4194304;
pub const VOL_CAP_FMT_SHARED_SPACE: u32 = 8388608;
pub const VOL_CAP_FMT_VOL_GROUPS: u32 = 16777216;
pub const VOL_CAP_FMT_SEALED: u32 = 33554432;
pub const VOL_CAP_INT_SEARCHFS: u32 = 1;
pub const VOL_CAP_INT_ATTRLIST: u32 = 2;
pub const VOL_CAP_INT_NFSEXPORT: u32 = 4;
pub const VOL_CAP_INT_READDIRATTR: u32 = 8;
pub const VOL_CAP_INT_EXCHANGEDATA: u32 = 16;
pub const VOL_CAP_INT_COPYFILE: u32 = 32;
pub const VOL_CAP_INT_ALLOCATE: u32 = 64;
pub const VOL_CAP_INT_VOL_RENAME: u32 = 128;
pub const VOL_CAP_INT_ADVLOCK: u32 = 256;
pub const VOL_CAP_INT_FLOCK: u32 = 512;
pub const VOL_CAP_INT_EXTENDED_SECURITY: u32 = 1024;
pub const VOL_CAP_INT_USERACCESS: u32 = 2048;
pub const VOL_CAP_INT_MANLOCK: u32 = 4096;
pub const VOL_CAP_INT_NAMEDSTREAMS: u32 = 8192;
pub const VOL_CAP_INT_EXTENDED_ATTR: u32 = 16384;
pub const VOL_CAP_INT_CLONE: u32 = 65536;
pub const VOL_CAP_INT_SNAPSHOT: u32 = 131072;
pub const VOL_CAP_INT_RENAME_SWAP: u32 = 262144;
pub const VOL_CAP_INT_RENAME_EXCL: u32 = 524288;
pub const VOL_CAP_INT_RENAME_OPENFAIL: u32 = 1048576;
pub const VOL_CAP_INT_RENAME_SECLUDE: u32 = 2097152;
pub const ATTR_CMN_NAME: u32 = 1;
pub const ATTR_CMN_DEVID: u32 = 2;
pub const ATTR_CMN_FSID: u32 = 4;
pub const ATTR_CMN_OBJTYPE: u32 = 8;
pub const ATTR_CMN_OBJTAG: u32 = 16;
pub const ATTR_CMN_OBJID: u32 = 32;
pub const ATTR_CMN_OBJPERMANENTID: u32 = 64;
pub const ATTR_CMN_PAROBJID: u32 = 128;
pub const ATTR_CMN_SCRIPT: u32 = 256;
pub const ATTR_CMN_CRTIME: u32 = 512;
pub const ATTR_CMN_MODTIME: u32 = 1024;
pub const ATTR_CMN_CHGTIME: u32 = 2048;
pub const ATTR_CMN_ACCTIME: u32 = 4096;
pub const ATTR_CMN_BKUPTIME: u32 = 8192;
pub const ATTR_CMN_FNDRINFO: u32 = 16384;
pub const ATTR_CMN_OWNERID: u32 = 32768;
pub const ATTR_CMN_GRPID: u32 = 65536;
pub const ATTR_CMN_ACCESSMASK: u32 = 131072;
pub const ATTR_CMN_FLAGS: u32 = 262144;
pub const ATTR_CMN_GEN_COUNT: u32 = 524288;
pub const ATTR_CMN_DOCUMENT_ID: u32 = 1048576;
pub const ATTR_CMN_USERACCESS: u32 = 2097152;
pub const ATTR_CMN_EXTENDED_SECURITY: u32 = 4194304;
pub const ATTR_CMN_UUID: u32 = 8388608;
pub const ATTR_CMN_GRPUUID: u32 = 16777216;
pub const ATTR_CMN_FILEID: u32 = 33554432;
pub const ATTR_CMN_PARENTID: u32 = 67108864;
pub const ATTR_CMN_FULLPATH: u32 = 134217728;
pub const ATTR_CMN_ADDEDTIME: u32 = 268435456;
pub const ATTR_CMN_ERROR: u32 = 536870912;
pub const ATTR_CMN_DATA_PROTECT_FLAGS: u32 = 1073741824;
pub const ATTR_CMN_RETURNED_ATTRS: u32 = 2147483648;
pub const ATTR_CMN_VALIDMASK: u32 = 4294967295;
pub const ATTR_CMN_SETMASK: u32 = 1372061440;
pub const ATTR_CMN_VOLSETMASK: u32 = 26368;
pub const ATTR_VOL_FSTYPE: u32 = 1;
pub const ATTR_VOL_SIGNATURE: u32 = 2;
pub const ATTR_VOL_SIZE: u32 = 4;
pub const ATTR_VOL_SPACEFREE: u32 = 8;
pub const ATTR_VOL_SPACEAVAIL: u32 = 16;
pub const ATTR_VOL_MINALLOCATION: u32 = 32;
pub const ATTR_VOL_ALLOCATIONCLUMP: u32 = 64;
pub const ATTR_VOL_IOBLOCKSIZE: u32 = 128;
pub const ATTR_VOL_OBJCOUNT: u32 = 256;
pub const ATTR_VOL_FILECOUNT: u32 = 512;
pub const ATTR_VOL_DIRCOUNT: u32 = 1024;
pub const ATTR_VOL_MAXOBJCOUNT: u32 = 2048;
pub const ATTR_VOL_MOUNTPOINT: u32 = 4096;
pub const ATTR_VOL_NAME: u32 = 8192;
pub const ATTR_VOL_MOUNTFLAGS: u32 = 16384;
pub const ATTR_VOL_MOUNTEDDEVICE: u32 = 32768;
pub const ATTR_VOL_ENCODINGSUSED: u32 = 65536;
pub const ATTR_VOL_CAPABILITIES: u32 = 131072;
pub const ATTR_VOL_UUID: u32 = 262144;
pub const ATTR_VOL_FSTYPENAME: u32 = 1048576;
pub const ATTR_VOL_FSSUBTYPE: u32 = 2097152;
pub const ATTR_VOL_SPACEUSED: u32 = 8388608;
pub const ATTR_VOL_QUOTA_SIZE: u32 = 268435456;
pub const ATTR_VOL_RESERVED_SIZE: u32 = 536870912;
pub const ATTR_VOL_ATTRIBUTES: u32 = 1073741824;
pub const ATTR_VOL_INFO: u32 = 2147483648;
pub const ATTR_VOL_VALIDMASK: u32 = 4038590463;
pub const ATTR_VOL_SETMASK: u32 = 2147491840;
pub const ATTR_DIR_LINKCOUNT: u32 = 1;
pub const ATTR_DIR_ENTRYCOUNT: u32 = 2;
pub const ATTR_DIR_MOUNTSTATUS: u32 = 4;
pub const ATTR_DIR_ALLOCSIZE: u32 = 8;
pub const ATTR_DIR_IOBLOCKSIZE: u32 = 16;
pub const ATTR_DIR_DATALENGTH: u32 = 32;
pub const DIR_MNTSTATUS_MNTPOINT: u32 = 1;
pub const DIR_MNTSTATUS_TRIGGER: u32 = 2;
pub const ATTR_DIR_VALIDMASK: u32 = 63;
pub const ATTR_DIR_SETMASK: u32 = 0;
pub const ATTR_FILE_LINKCOUNT: u32 = 1;
pub const ATTR_FILE_TOTALSIZE: u32 = 2;
pub const ATTR_FILE_ALLOCSIZE: u32 = 4;
pub const ATTR_FILE_IOBLOCKSIZE: u32 = 8;
pub const ATTR_FILE_DEVTYPE: u32 = 32;
pub const ATTR_FILE_FORKCOUNT: u32 = 128;
pub const ATTR_FILE_FORKLIST: u32 = 256;
pub const ATTR_FILE_DATALENGTH: u32 = 512;
pub const ATTR_FILE_DATAALLOCSIZE: u32 = 1024;
pub const ATTR_FILE_RSRCLENGTH: u32 = 4096;
pub const ATTR_FILE_RSRCALLOCSIZE: u32 = 8192;
pub const ATTR_FILE_VALIDMASK: u32 = 14335;
pub const ATTR_FILE_SETMASK: u32 = 32;
pub const ATTR_CMNEXT_RELPATH: u32 = 4;
pub const ATTR_CMNEXT_PRIVATESIZE: u32 = 8;
pub const ATTR_CMNEXT_LINKID: u32 = 16;
pub const ATTR_CMNEXT_NOFIRMLINKPATH: u32 = 32;
pub const ATTR_CMNEXT_REALDEVID: u32 = 64;
pub const ATTR_CMNEXT_REALFSID: u32 = 128;
pub const ATTR_CMNEXT_CLONEID: u32 = 256;
pub const ATTR_CMNEXT_EXT_FLAGS: u32 = 512;
pub const ATTR_CMNEXT_RECURSIVE_GENCOUNT: u32 = 1024;
pub const ATTR_CMNEXT_ATTRIBUTION_TAG: u32 = 2048;
pub const ATTR_CMNEXT_CLONE_REFCNT: u32 = 4096;
pub const ATTR_CMNEXT_VALIDMASK: u32 = 8188;
pub const ATTR_CMNEXT_SETMASK: u32 = 0;
pub const ATTR_FORK_TOTALSIZE: u32 = 1;
pub const ATTR_FORK_ALLOCSIZE: u32 = 2;
pub const ATTR_FORK_RESERVED: u32 = 4294967295;
pub const ATTR_FORK_VALIDMASK: u32 = 3;
pub const ATTR_FORK_SETMASK: u32 = 0;
pub const ATTR_CMN_NAMEDATTRCOUNT: u32 = 524288;
pub const ATTR_CMN_NAMEDATTRLIST: u32 = 1048576;
pub const ATTR_FILE_CLUMPSIZE: u32 = 16;
pub const ATTR_FILE_FILETYPE: u32 = 64;
pub const ATTR_FILE_DATAEXTENTS: u32 = 2048;
pub const ATTR_FILE_RSRCEXTENTS: u32 = 16384;
pub const ATTR_BULK_REQUIRED: u32 = 2147483649;
pub const SRCHFS_START: u32 = 1;
pub const SRCHFS_MATCHPARTIALNAMES: u32 = 2;
pub const SRCHFS_MATCHDIRS: u32 = 4;
pub const SRCHFS_MATCHFILES: u32 = 8;
pub const SRCHFS_SKIPLINKS: u32 = 16;
pub const SRCHFS_SKIPINVISIBLE: u32 = 32;
pub const SRCHFS_SKIPPACKAGES: u32 = 64;
pub const SRCHFS_SKIPINAPPROPRIATE: u32 = 128;
pub const SRCHFS_NEGATEPARAMS: u32 = 2147483648;
pub const SRCHFS_VALIDOPTIONSMASK: u32 = 2147483903;
pub const FST_EOF: i32 = -1;
pub const GRAFTDMG_SECURE_BOOT_CRYPTEX_ARGS_VERSION: u32 = 1;
pub const MAX_GRAFT_ARGS_SIZE: u32 = 512;
pub const SBC_PRESERVE_MOUNT: u32 = 1;
pub const SBC_ALTERNATE_SHARED_REGION: u32 = 2;
pub const SBC_SYSTEM_CONTENT: u32 = 4;
pub const SBC_PANIC_ON_AUTHFAIL: u32 = 8;
pub const SBC_STRICT_AUTH: u32 = 16;
pub const SBC_PRESERVE_GRAFT: u32 = 32;
pub const MFSNAMELEN: u32 = 15;
pub const MFSTYPENAMELEN: u32 = 16;
pub const MNAMELEN: u32 = 1024;
pub const MNT_EXT_ROOT_DATA_VOL: u32 = 1;
pub const MNT_EXT_FSKIT: u32 = 2;
pub const MNT_RDONLY: u32 = 1;
pub const MNT_SYNCHRONOUS: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOSUID: u32 = 8;
pub const MNT_NODEV: u32 = 16;
pub const MNT_UNION: u32 = 32;
pub const MNT_ASYNC: u32 = 64;
pub const MNT_CPROTECT: u32 = 128;
pub const MNT_EXPORTED: u32 = 256;
pub const MNT_REMOVABLE: u32 = 512;
pub const MNT_QUARANTINE: u32 = 1024;
pub const MNT_LOCAL: u32 = 4096;
pub const MNT_QUOTA: u32 = 8192;
pub const MNT_ROOTFS: u32 = 16384;
pub const MNT_DOVOLFS: u32 = 32768;
pub const MNT_DONTBROWSE: u32 = 1048576;
pub const MNT_IGNORE_OWNERSHIP: u32 = 2097152;
pub const MNT_AUTOMOUNTED: u32 = 4194304;
pub const MNT_JOURNALED: u32 = 8388608;
pub const MNT_NOUSERXATTR: u32 = 16777216;
pub const MNT_DEFWRITE: u32 = 33554432;
pub const MNT_MULTILABEL: u32 = 67108864;
pub const MNT_NOFOLLOW: u32 = 134217728;
pub const MNT_NOATIME: u32 = 268435456;
pub const MNT_SNAPSHOT: u32 = 1073741824;
pub const MNT_STRICTATIME: u32 = 2147483648;
pub const MNT_UNKNOWNPERMISSIONS: u32 = 2097152;
pub const MNT_VISFLAGMASK: u32 = 3757111295;
pub const MNT_UPDATE: u32 = 65536;
pub const MNT_NOBLOCK: u32 = 131072;
pub const MNT_RELOAD: u32 = 262144;
pub const MNT_FORCE: u32 = 524288;
pub const MNT_CMDFLAGS: u32 = 983040;
pub const VFS_GENERIC: u32 = 0;
pub const VFS_NUMMNTOPS: u32 = 1;
pub const VFS_MAXTYPENUM: u32 = 1;
pub const VFS_CONF: u32 = 2;
pub const MNT_WAIT: u32 = 1;
pub const MNT_NOWAIT: u32 = 2;
pub const MNT_DWAIT: u32 = 4;
pub const VFS_CTL_VERS1: u32 = 1;
pub const VFS_CTL_OSTATFS: u32 = 65537;
pub const VFS_CTL_UMOUNT: u32 = 65538;
pub const VFS_CTL_QUERY: u32 = 65539;
pub const VFS_CTL_NEWADDR: u32 = 65540;
pub const VFS_CTL_TIMEO: u32 = 65541;
pub const VFS_CTL_NOLOCKS: u32 = 65542;
pub const VFS_CTL_SADDR: u32 = 65543;
pub const VFS_CTL_DISC: u32 = 65544;
pub const VFS_CTL_SERVERINFO: u32 = 65545;
pub const VFS_CTL_NSTATUS: u32 = 65546;
pub const VFS_CTL_STATFS64: u32 = 65547;
pub const VFS_CTL_STATFS: u32 = 65547;
pub const VQ_NOTRESP: u32 = 1;
pub const VQ_NEEDAUTH: u32 = 2;
pub const VQ_LOWDISK: u32 = 4;
pub const VQ_MOUNT: u32 = 8;
pub const VQ_UNMOUNT: u32 = 16;
pub const VQ_DEAD: u32 = 32;
pub const VQ_ASSIST: u32 = 64;
pub const VQ_NOTRESPLOCK: u32 = 128;
pub const VQ_UPDATE: u32 = 256;
pub const VQ_VERYLOWDISK: u32 = 512;
pub const VQ_SYNCEVENT: u32 = 1024;
pub const VQ_SERVEREVENT: u32 = 2048;
pub const VQ_QUOTA: u32 = 4096;
pub const VQ_NEARLOWDISK: u32 = 8192;
pub const VQ_DESIRED_DISK: u32 = 16384;
pub const VQ_FREE_SPACE_CHANGE: u32 = 32768;
pub const VQ_FLAG10000: u32 = 65536;
pub const NFSV4_MAX_FH_SIZE: u32 = 128;
pub const NFSV3_MAX_FH_SIZE: u32 = 64;
pub const NFSV2_MAX_FH_SIZE: u32 = 32;
pub const CRYPTEX_AUTH_STRUCT_VERSION: u32 = 1;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_OFD_SETLK: u32 = 90;
pub const F_OFD_SETLKW: u32 = 91;
pub const F_OFD_GETLK: u32 = 92;
pub const F_OFD_SETLKWTIMEOUT: u32 = 93;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const F_ATTRIBUTION_TAG: u32 = 111;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const ATTRIBUTION_NAME_MAX: u32 = 255;
pub const F_CREATE_TAG: u32 = 1;
pub const F_DELETE_TAG: u32 = 2;
pub const F_QUERY_TAG: u32 = 4;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const SIGDUMMYARG: u32 = 0;
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const BASENAMELEN: u32 = 250;
pub const _PATH_PWD: &[u8; 5] = b"/etc\0";
pub const _PATH_PASSWD: &[u8; 12] = b"/etc/passwd\0";
pub const _PASSWD: &[u8; 7] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &[u8; 19] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &[u8; 10] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &[u8; 14] = b"master.passwd\0";
pub const _PATH_MP_DB: &[u8; 12] = b"/etc/pwd.db\0";
pub const _MP_DB: &[u8; 7] = b"pwd.db\0";
pub const _PATH_SMP_DB: &[u8; 13] = b"/etc/spwd.db\0";
pub const _SMP_DB: &[u8; 8] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &[u8; 19] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const SYS_VIMRC_FILE: &[u8; 11] = b"$VIM/vimrc\0";
pub const SYS_GVIMRC_FILE: &[u8; 12] = b"$VIM/gvimrc\0";
pub const DFLT_HELPFILE: &[u8; 25] = b"$VIMRUNTIME/doc/help.txt\0";
pub const FILETYPE_FILE: &[u8; 13] = b"filetype.vim\0";
pub const FTPLUGIN_FILE: &[u8; 13] = b"ftplugin.vim\0";
pub const INDENT_FILE: &[u8; 11] = b"indent.vim\0";
pub const FTOFF_FILE: &[u8; 10] = b"ftoff.vim\0";
pub const FTPLUGOF_FILE: &[u8; 13] = b"ftplugof.vim\0";
pub const INDOFF_FILE: &[u8; 11] = b"indoff.vim\0";
pub const SYS_MENU_FILE: &[u8; 21] = b"$VIMRUNTIME/menu.vim\0";
pub const USR_EXRC_FILE: &[u8; 12] = b"$HOME/.exrc\0";
pub const USR_VIMRC_FILE: &[u8; 13] = b"$HOME/.vimrc\0";
pub const USR_VIMRC_FILE2: &[u8; 13] = b"~/.vim/vimrc\0";
pub const USR_GVIMRC_FILE: &[u8; 14] = b"$HOME/.gvimrc\0";
pub const USR_GVIMRC_FILE2: &[u8; 14] = b"~/.vim/gvimrc\0";
pub const VIM_DEFAULTS_FILE: &[u8; 25] = b"$VIMRUNTIME/defaults.vim\0";
pub const EVIM_FILE: &[u8; 21] = b"$VIMRUNTIME/evim.vim\0";
pub const VIMINFO_FILE: &[u8; 15] = b"$HOME/.viminfo\0";
pub const EXRC_FILE: &[u8; 6] = b".exrc\0";
pub const VIMRC_FILE: &[u8; 7] = b".vimrc\0";
pub const SYNTAX_FNAME: &[u8; 26] = b"$VIMRUNTIME/syntax/%s.vim\0";
pub const DFLT_BDIR: &[u8; 11] = b".,~/tmp,~/\0";
pub const DFLT_DIR: &[u8; 22] = b".,~/tmp,/var/tmp,/tmp\0";
pub const DFLT_VDIR: &[u8; 16] = b"$HOME/.vim/view\0";
pub const DFLT_ERRORFILE: &[u8; 11] = b"errors.err\0";
pub const DFLT_RUNTIMEPATH: &[u8; 66] =
    b"~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,~/.vim/after\0";
pub const CLEAN_RUNTIMEPATH: &[u8; 46] = b"$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after\0";
pub const TEMPNAMELEN: u32 = 256;
pub const SPECIAL_WILDCHAR: &[u8; 4] = b"`'{\0";
pub const CMDBUFFSIZE: u32 = 1024;
pub const MAXPATHL: u32 = 1024;
pub const DFLT_MAXMEM: u32 = 5120;
pub const DFLT_MAXMEMTOT: u32 = 10240;
pub const _JBLEN: u32 = 37;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140000;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const __IPHONE_COMPAT_VERSION: u32 = 40000;
pub const CURSES: u32 = 1;
pub const CURSES_H: u32 = 1;
pub const NCURSES_VERSION_MAJOR: u32 = 6;
pub const NCURSES_VERSION_MINOR: u32 = 0;
pub const NCURSES_VERSION_PATCH: u32 = 20150808;
pub const NCURSES_VERSION: &[u8; 4] = b"6.0\0";
pub const NCURSES_MOUSE_VERSION: u32 = 1;
pub const NCURSES_DLL_H_incl: u32 = 1;
pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
pub const NCURSES_OPAQUE: u32 = 1;
pub const NCURSES_REENTRANT: u32 = 0;
pub const NCURSES_INTEROP_FUNCS: u32 = 0;
pub const NCURSES_TPARM_VARARGS: u32 = 1;
pub const NCURSES_WIDECHAR: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const COLOR_BLACK: u32 = 0;
pub const COLOR_RED: u32 = 1;
pub const COLOR_GREEN: u32 = 2;
pub const COLOR_YELLOW: u32 = 3;
pub const COLOR_BLUE: u32 = 4;
pub const COLOR_MAGENTA: u32 = 5;
pub const COLOR_CYAN: u32 = 6;
pub const COLOR_WHITE: u32 = 7;
pub const ERR: i32 = -1;
pub const OK: u32 = 0;
pub const _SUBWIN: u32 = 1;
pub const _ENDLINE: u32 = 2;
pub const _FULLWIN: u32 = 4;
pub const _SCROLLWIN: u32 = 8;
pub const _ISPAD: u32 = 16;
pub const _HASMOVED: u32 = 32;
pub const _WRAPPED: u32 = 64;
pub const _NOCHANGE: i32 = -1;
pub const _NEWINDEX: i32 = -1;
pub const NCURSES_EXT_FUNCS: u32 = 20150808;
pub const NCURSES_SP_FUNCS: u32 = 0;
pub const NCURSES_ATTR_SHIFT: u32 = 8;
pub const A_NORMAL: u32 = 0;
pub const KEY_CODE_YES: u32 = 256;
pub const KEY_MIN: u32 = 257;
pub const KEY_BREAK: u32 = 257;
pub const KEY_SRESET: u32 = 344;
pub const KEY_RESET: u32 = 345;
pub const KEY_DOWN: u32 = 258;
pub const KEY_UP: u32 = 259;
pub const KEY_LEFT: u32 = 260;
pub const KEY_RIGHT: u32 = 261;
pub const KEY_HOME: u32 = 262;
pub const KEY_BACKSPACE: u32 = 263;
pub const KEY_F0: u32 = 264;
pub const KEY_DL: u32 = 328;
pub const KEY_IL: u32 = 329;
pub const KEY_DC: u32 = 330;
pub const KEY_IC: u32 = 331;
pub const KEY_EIC: u32 = 332;
pub const KEY_CLEAR: u32 = 333;
pub const KEY_EOS: u32 = 334;
pub const KEY_EOL: u32 = 335;
pub const KEY_SF: u32 = 336;
pub const KEY_SR: u32 = 337;
pub const KEY_NPAGE: u32 = 338;
pub const KEY_PPAGE: u32 = 339;
pub const KEY_STAB: u32 = 340;
pub const KEY_CTAB: u32 = 341;
pub const KEY_CATAB: u32 = 342;
pub const KEY_ENTER: u32 = 343;
pub const KEY_PRINT: u32 = 346;
pub const KEY_LL: u32 = 347;
pub const KEY_A1: u32 = 348;
pub const KEY_A3: u32 = 349;
pub const KEY_B2: u32 = 350;
pub const KEY_C1: u32 = 351;
pub const KEY_C3: u32 = 352;
pub const KEY_BTAB: u32 = 353;
pub const KEY_BEG: u32 = 354;
pub const KEY_CANCEL: u32 = 355;
pub const KEY_CLOSE: u32 = 356;
pub const KEY_COMMAND: u32 = 357;
pub const KEY_COPY: u32 = 358;
pub const KEY_CREATE: u32 = 359;
pub const KEY_END: u32 = 360;
pub const KEY_EXIT: u32 = 361;
pub const KEY_FIND: u32 = 362;
pub const KEY_HELP: u32 = 363;
pub const KEY_MARK: u32 = 364;
pub const KEY_MESSAGE: u32 = 365;
pub const KEY_MOVE: u32 = 366;
pub const KEY_NEXT: u32 = 367;
pub const KEY_OPEN: u32 = 368;
pub const KEY_OPTIONS: u32 = 369;
pub const KEY_PREVIOUS: u32 = 370;
pub const KEY_REDO: u32 = 371;
pub const KEY_REFERENCE: u32 = 372;
pub const KEY_REFRESH: u32 = 373;
pub const KEY_REPLACE: u32 = 374;
pub const KEY_RESTART: u32 = 375;
pub const KEY_RESUME: u32 = 376;
pub const KEY_SAVE: u32 = 377;
pub const KEY_SBEG: u32 = 378;
pub const KEY_SCANCEL: u32 = 379;
pub const KEY_SCOMMAND: u32 = 380;
pub const KEY_SCOPY: u32 = 381;
pub const KEY_SCREATE: u32 = 382;
pub const KEY_SDC: u32 = 383;
pub const KEY_SDL: u32 = 384;
pub const KEY_SELECT: u32 = 385;
pub const KEY_SEND: u32 = 386;
pub const KEY_SEOL: u32 = 387;
pub const KEY_SEXIT: u32 = 388;
pub const KEY_SFIND: u32 = 389;
pub const KEY_SHELP: u32 = 390;
pub const KEY_SHOME: u32 = 391;
pub const KEY_SIC: u32 = 392;
pub const KEY_SLEFT: u32 = 393;
pub const KEY_SMESSAGE: u32 = 394;
pub const KEY_SMOVE: u32 = 395;
pub const KEY_SNEXT: u32 = 396;
pub const KEY_SOPTIONS: u32 = 397;
pub const KEY_SPREVIOUS: u32 = 398;
pub const KEY_SPRINT: u32 = 399;
pub const KEY_SREDO: u32 = 400;
pub const KEY_SREPLACE: u32 = 401;
pub const KEY_SRIGHT: u32 = 402;
pub const KEY_SRSUME: u32 = 403;
pub const KEY_SSAVE: u32 = 404;
pub const KEY_SSUSPEND: u32 = 405;
pub const KEY_SUNDO: u32 = 406;
pub const KEY_SUSPEND: u32 = 407;
pub const KEY_UNDO: u32 = 408;
pub const KEY_MOUSE: u32 = 409;
pub const KEY_RESIZE: u32 = 410;
pub const KEY_EVENT: u32 = 411;
pub const KEY_MAX: u32 = 511;
pub const _XOPEN_CURSES: u32 = 1;
pub const NCURSES_BUTTON_RELEASED: u32 = 1;
pub const NCURSES_BUTTON_PRESSED: u32 = 2;
pub const NCURSES_BUTTON_CLICKED: u32 = 4;
pub const NCURSES_DOUBLE_CLICKED: u32 = 8;
pub const NCURSES_TRIPLE_CLICKED: u32 = 16;
pub const NCURSES_RESERVED_EVENT: u32 = 32;
pub const TRACE_DISABLE: u32 = 0;
pub const TRACE_TIMES: u32 = 1;
pub const TRACE_TPUTS: u32 = 2;
pub const TRACE_UPDATE: u32 = 4;
pub const TRACE_MOVE: u32 = 8;
pub const TRACE_CHARPUT: u32 = 16;
pub const TRACE_ORDINARY: u32 = 31;
pub const TRACE_CALLS: u32 = 32;
pub const TRACE_VIRTPUT: u32 = 64;
pub const TRACE_IEVENT: u32 = 128;
pub const TRACE_BITS: u32 = 256;
pub const TRACE_ICALLS: u32 = 512;
pub const TRACE_CCALLS: u32 = 1024;
pub const TRACE_DATABASE: u32 = 2048;
pub const TRACE_ATTRS: u32 = 4096;
pub const TRACE_SHIFT: u32 = 13;
pub const TRACE_MAXIMUM: u32 = 8191;
pub const NCURSES_UNCTRL_H_incl: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const BREAKCHECK_SKIP: u32 = 32;
pub const WILDCHAR_LIST: &[u8; 7] = b"*?[{`$\0";
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const NUMBUFLEN: u32 = 65;
pub const STR2NR_BIN: u32 = 1;
pub const STR2NR_OCT: u32 = 2;
pub const STR2NR_HEX: u32 = 4;
pub const STR2NR_ALL: u32 = 7;
pub const STR2NR_FORCE: u32 = 8;
pub const SCANF_HEX_LONG_U: &[u8; 4] = b"%lx\0";
pub const SCANF_DECIMAL_LONG_U: &[u8; 4] = b"%lu\0";
pub const PRINTF_HEX_LONG_U: &[u8; 6] = b"0x%lx\0";
pub const PRINTF_DECIMAL_LONG_U: &[u8; 4] = b"%lu\0";
pub const MAX_TYPENR: u32 = 65535;
pub const NUL: u8 = 0u8;
pub const BELL: u8 = 7u8;
pub const BS: u8 = 8u8;
pub const TAB: u8 = 9u8;
pub const NL: u8 = 10u8;
pub const FF: u8 = 12u8;
pub const CAR: u8 = 13u8;
pub const ESC: u8 = 27u8;
pub const ESC_STR_nc: &[u8; 2] = b"\x1B\0";
pub const DEL: u32 = 127;
pub const POUND: u32 = 163;
pub const CTRL_F_STR: &[u8; 2] = b"\x06\0";
pub const CTRL_H_STR: &[u8; 2] = b"\x08\0";
pub const CTRL_V_STR: &[u8; 2] = b"\x16\0";
pub const Ctrl_AT: u32 = 0;
pub const Ctrl_A: u32 = 1;
pub const Ctrl_B: u32 = 2;
pub const Ctrl_C: u32 = 3;
pub const Ctrl_D: u32 = 4;
pub const Ctrl_E: u32 = 5;
pub const Ctrl_F: u32 = 6;
pub const Ctrl_G: u32 = 7;
pub const Ctrl_H: u32 = 8;
pub const Ctrl_I: u32 = 9;
pub const Ctrl_J: u32 = 10;
pub const Ctrl_K: u32 = 11;
pub const Ctrl_L: u32 = 12;
pub const Ctrl_M: u32 = 13;
pub const Ctrl_N: u32 = 14;
pub const Ctrl_O: u32 = 15;
pub const Ctrl_P: u32 = 16;
pub const Ctrl_Q: u32 = 17;
pub const Ctrl_R: u32 = 18;
pub const Ctrl_S: u32 = 19;
pub const Ctrl_T: u32 = 20;
pub const Ctrl_U: u32 = 21;
pub const Ctrl_V: u32 = 22;
pub const Ctrl_W: u32 = 23;
pub const Ctrl_X: u32 = 24;
pub const Ctrl_Y: u32 = 25;
pub const Ctrl_Z: u32 = 26;
pub const Ctrl_BSL: u32 = 28;
pub const Ctrl_RSB: u32 = 29;
pub const Ctrl_HAT: u32 = 30;
pub const Ctrl__: u32 = 31;
pub const CSI: u32 = 155;
pub const CSI_STR: &[u8; 2] = b"\x9B\0";
pub const DCS: u32 = 144;
pub const OSC: u32 = 157;
pub const STERM: u32 = 156;
pub const PATHSEP: u8 = 47u8;
pub const PATHSEPSTR: &[u8; 2] = b"/\0";
pub const K_NUL: u32 = 206;
pub const K_SPECIAL: u32 = 128;
pub const ABBR_OFF: u32 = 256;
pub const KS_ZERO: u32 = 255;
pub const KS_SPECIAL: u32 = 254;
pub const KS_EXTRA: u32 = 253;
pub const KS_MODIFIER: u32 = 252;
pub const KS_MOUSE: u32 = 251;
pub const KS_MENU: u32 = 250;
pub const KS_VER_SCROLLBAR: u32 = 249;
pub const KS_HOR_SCROLLBAR: u32 = 248;
pub const KS_NETTERM_MOUSE: u32 = 247;
pub const KS_DEC_MOUSE: u32 = 246;
pub const KS_SELECT: u32 = 245;
pub const KS_TEAROFF: u32 = 244;
pub const KS_JSBTERM_MOUSE: u32 = 243;
pub const KS_KEY: u32 = 242;
pub const KS_PTERM_MOUSE: u32 = 241;
pub const KS_TABLINE: u32 = 240;
pub const KS_TABMENU: u32 = 239;
pub const KS_URXVT_MOUSE: u32 = 238;
pub const KS_SGR_MOUSE: u32 = 237;
pub const KS_SGR_MOUSE_RELEASE: u32 = 236;
pub const KS_GPM_MOUSE: u32 = 235;
pub const KE_FILLER: u8 = 88u8;
pub const MOD_MASK_SHIFT: u32 = 2;
pub const MOD_MASK_CTRL: u32 = 4;
pub const MOD_MASK_ALT: u32 = 8;
pub const MOD_MASK_META: u32 = 16;
pub const MOD_MASK_2CLICK: u32 = 32;
pub const MOD_MASK_3CLICK: u32 = 64;
pub const MOD_MASK_4CLICK: u32 = 96;
pub const MOD_MASK_CMD: u32 = 128;
pub const MOD_MASK_MULTI_CLICK: u32 = 96;
pub const MAX_KEY_NAME_LEN: u32 = 32;
pub const MAX_KEY_CODE_LEN: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const NOT_IN_POPUP_WINDOW: u32 = 0;
pub const TMODE_COOK: u32 = 0;
pub const TMODE_SLEEP: u32 = 1;
pub const TMODE_RAW: u32 = 2;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const PRId8: &[u8; 4] = b"hhd\0";
pub const PRIi8: &[u8; 4] = b"hhi\0";
pub const PRIo8: &[u8; 4] = b"hho\0";
pub const PRIu8: &[u8; 4] = b"hhu\0";
pub const PRIx8: &[u8; 4] = b"hhx\0";
pub const PRIX8: &[u8; 4] = b"hhX\0";
pub const PRId16: &[u8; 3] = b"hd\0";
pub const PRIi16: &[u8; 3] = b"hi\0";
pub const PRIo16: &[u8; 3] = b"ho\0";
pub const PRIu16: &[u8; 3] = b"hu\0";
pub const PRIx16: &[u8; 3] = b"hx\0";
pub const PRIX16: &[u8; 3] = b"hX\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const PRIi64: &[u8; 4] = b"lli\0";
pub const PRIo64: &[u8; 4] = b"llo\0";
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRIx64: &[u8; 4] = b"llx\0";
pub const PRIX64: &[u8; 4] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4] = b"hho\0";
pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3] = b"hd\0";
pub const PRIiFAST16: &[u8; 3] = b"hi\0";
pub const PRIoFAST16: &[u8; 3] = b"ho\0";
pub const PRIuFAST16: &[u8; 3] = b"hu\0";
pub const PRIxFAST16: &[u8; 3] = b"hx\0";
pub const PRIXFAST16: &[u8; 3] = b"hX\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIdFAST64: &[u8; 4] = b"lld\0";
pub const PRIiFAST64: &[u8; 4] = b"lli\0";
pub const PRIoFAST64: &[u8; 4] = b"llo\0";
pub const PRIuFAST64: &[u8; 4] = b"llu\0";
pub const PRIxFAST64: &[u8; 4] = b"llx\0";
pub const PRIXFAST64: &[u8; 4] = b"llX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"jd\0";
pub const PRIiMAX: &[u8; 3] = b"ji\0";
pub const PRIoMAX: &[u8; 3] = b"jo\0";
pub const PRIuMAX: &[u8; 3] = b"ju\0";
pub const PRIxMAX: &[u8; 3] = b"jx\0";
pub const PRIXMAX: &[u8; 3] = b"jX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNd64: &[u8; 4] = b"lld\0";
pub const SCNi64: &[u8; 4] = b"lli\0";
pub const SCNo64: &[u8; 4] = b"llo\0";
pub const SCNu64: &[u8; 4] = b"llu\0";
pub const SCNx64: &[u8; 4] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3] = b"hd\0";
pub const SCNiFAST16: &[u8; 3] = b"hi\0";
pub const SCNoFAST16: &[u8; 3] = b"ho\0";
pub const SCNuFAST16: &[u8; 3] = b"hu\0";
pub const SCNxFAST16: &[u8; 3] = b"hx\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNdFAST64: &[u8; 4] = b"lld\0";
pub const SCNiFAST64: &[u8; 4] = b"lli\0";
pub const SCNoFAST64: &[u8; 4] = b"llo\0";
pub const SCNuFAST64: &[u8; 4] = b"llu\0";
pub const SCNxFAST64: &[u8; 4] = b"llx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"jd\0";
pub const SCNiMAX: &[u8; 3] = b"ji\0";
pub const SCNoMAX: &[u8; 3] = b"jo\0";
pub const SCNuMAX: &[u8; 3] = b"ju\0";
pub const SCNxMAX: &[u8; 3] = b"jx\0";
pub const _LIBINTL_H: u32 = 1;
pub const LC_COLLATE_MASK: u32 = 1;
pub const LC_CTYPE_MASK: u32 = 2;
pub const LC_MESSAGES_MASK: u32 = 4;
pub const LC_MONETARY_MASK: u32 = 8;
pub const LC_NUMERIC_MASK: u32 = 16;
pub const LC_TIME_MASK: u32 = 32;
pub const _LC_NUM_MASK: u32 = 6;
pub const _LC_LAST_MASK: u32 = 32;
pub const __USE_GNU_GETTEXT: u32 = 1;
pub const LIBINTL_VERSION: u32 = 5636;
pub const VALID_NO_UPDATE: u32 = 5;
pub const VALID: u32 = 10;
pub const INVERTED: u32 = 20;
pub const INVERTED_ALL: u32 = 25;
pub const REDRAW_TOP: u32 = 30;
pub const SOME_VALID: u32 = 35;
pub const NOT_VALID: u32 = 40;
pub const CLEAR: u32 = 50;
pub const VALID_WROW: u32 = 1;
pub const VALID_WCOL: u32 = 2;
pub const VALID_VIRTCOL: u32 = 4;
pub const VALID_CHEIGHT: u32 = 8;
pub const VALID_CROW: u32 = 16;
pub const VALID_BOTLINE: u32 = 32;
pub const VALID_BOTLINE_AP: u32 = 64;
pub const VALID_TOPLINE: u32 = 128;
pub const POPF_HIDDEN: u32 = 1;
pub const POPF_HANDLED: u32 = 2;
pub const HL_NORMAL: u32 = 0;
pub const HL_INVERSE: u32 = 1;
pub const HL_BOLD: u32 = 2;
pub const HL_ITALIC: u32 = 4;
pub const HL_UNDERLINE: u32 = 8;
pub const HL_UNDERCURL: u32 = 16;
pub const HL_STANDOUT: u32 = 32;
pub const HL_NOCOMBINE: u32 = 64;
pub const HL_STRIKETHROUGH: u32 = 128;
pub const HL_ALL: u32 = 255;
pub const MSG_HIST: u32 = 4096;
pub const NORMAL: u32 = 1;
pub const VISUAL: u32 = 2;
pub const OP_PENDING: u32 = 4;
pub const CMDLINE: u32 = 8;
pub const INSERT: u32 = 16;
pub const LANGMAP: u32 = 32;
pub const REPLACE_FLAG: u32 = 64;
pub const REPLACE: u32 = 80;
pub const VREPLACE_FLAG: u32 = 128;
pub const VREPLACE: u32 = 208;
pub const LREPLACE: u32 = 96;
pub const NORMAL_BUSY: u32 = 257;
pub const HITRETURN: u32 = 513;
pub const ASKMORE: u32 = 768;
pub const SETWSIZE: u32 = 1024;
pub const ABBREV: u32 = 1280;
pub const EXTERNCMD: u32 = 1536;
pub const SHOWMATCH: u32 = 1808;
pub const CONFIRM: u32 = 2048;
pub const SELECTMODE: u32 = 4096;
pub const TERMINAL: u32 = 8192;
pub const MAP_ALL_MODES: u32 = 12351;
pub const FORWARD: u32 = 1;
pub const BACKWARD: i32 = -1;
pub const FORWARD_FILE: u32 = 3;
pub const BACKWARD_FILE: i32 = -3;
pub const FAIL: u32 = 0;
pub const NOTDONE: u32 = 2;
pub const BF_RECOVERED: u32 = 1;
pub const BF_CHECK_RO: u32 = 2;
pub const BF_NEVERLOADED: u32 = 4;
pub const BF_NOTEDITED: u32 = 8;
pub const BF_NEW: u32 = 16;
pub const BF_NEW_W: u32 = 32;
pub const BF_READERR: u32 = 64;
pub const BF_DUMMY: u32 = 128;
pub const BF_PRESERVED: u32 = 256;
pub const BF_WRITE_MASK: u32 = 88;
pub const EXPAND_UNSUCCESSFUL: i32 = -2;
pub const EXPAND_OK: i32 = -1;
pub const EXPAND_NOTHING: u32 = 0;
pub const EXPAND_COMMANDS: u32 = 1;
pub const EXPAND_FILES: u32 = 2;
pub const EXPAND_DIRECTORIES: u32 = 3;
pub const EXPAND_SETTINGS: u32 = 4;
pub const EXPAND_BOOL_SETTINGS: u32 = 5;
pub const EXPAND_TAGS: u32 = 6;
pub const EXPAND_OLD_SETTING: u32 = 7;
pub const EXPAND_HELP: u32 = 8;
pub const EXPAND_BUFFERS: u32 = 9;
pub const EXPAND_EVENTS: u32 = 10;
pub const EXPAND_MENUS: u32 = 11;
pub const EXPAND_SYNTAX: u32 = 12;
pub const EXPAND_HIGHLIGHT: u32 = 13;
pub const EXPAND_AUGROUP: u32 = 14;
pub const EXPAND_USER_VARS: u32 = 15;
pub const EXPAND_MAPPINGS: u32 = 16;
pub const EXPAND_TAGS_LISTFILES: u32 = 17;
pub const EXPAND_FUNCTIONS: u32 = 18;
pub const EXPAND_USER_FUNC: u32 = 19;
pub const EXPAND_EXPRESSION: u32 = 20;
pub const EXPAND_MENUNAMES: u32 = 21;
pub const EXPAND_USER_COMMANDS: u32 = 22;
pub const EXPAND_USER_CMD_FLAGS: u32 = 23;
pub const EXPAND_USER_NARGS: u32 = 24;
pub const EXPAND_USER_COMPLETE: u32 = 25;
pub const EXPAND_ENV_VARS: u32 = 26;
pub const EXPAND_LANGUAGE: u32 = 27;
pub const EXPAND_COLORS: u32 = 28;
pub const EXPAND_COMPILER: u32 = 29;
pub const EXPAND_USER_DEFINED: u32 = 30;
pub const EXPAND_USER_LIST: u32 = 31;
pub const EXPAND_SHELLCMD: u32 = 32;
pub const EXPAND_CSCOPE: u32 = 33;
pub const EXPAND_SIGN: u32 = 34;
pub const EXPAND_PROFILE: u32 = 35;
pub const EXPAND_BEHAVE: u32 = 36;
pub const EXPAND_FILETYPE: u32 = 37;
pub const EXPAND_FILES_IN_PATH: u32 = 38;
pub const EXPAND_OWNSYNTAX: u32 = 39;
pub const EXPAND_LOCALES: u32 = 40;
pub const EXPAND_HISTORY: u32 = 41;
pub const EXPAND_USER: u32 = 42;
pub const EXPAND_SYNTIME: u32 = 43;
pub const EXPAND_USER_ADDR_TYPE: u32 = 44;
pub const EXPAND_PACKADD: u32 = 45;
pub const EXPAND_MESSAGES: u32 = 46;
pub const EXPAND_MAPCLEAR: u32 = 47;
pub const EXPAND_ARGLIST: u32 = 48;
pub const EXMODE_NORMAL: u32 = 1;
pub const EXMODE_VIM: u32 = 2;
pub const WILD_FREE: u32 = 1;
pub const WILD_EXPAND_FREE: u32 = 2;
pub const WILD_EXPAND_KEEP: u32 = 3;
pub const WILD_NEXT: u32 = 4;
pub const WILD_PREV: u32 = 5;
pub const WILD_ALL: u32 = 6;
pub const WILD_LONGEST: u32 = 7;
pub const WILD_ALL_KEEP: u32 = 8;
pub const WILD_LIST_NOTFOUND: u32 = 1;
pub const WILD_HOME_REPLACE: u32 = 2;
pub const WILD_USE_NL: u32 = 4;
pub const WILD_NO_BEEP: u32 = 8;
pub const WILD_ADD_SLASH: u32 = 16;
pub const WILD_KEEP_ALL: u32 = 32;
pub const WILD_SILENT: u32 = 64;
pub const WILD_ESCAPE: u32 = 128;
pub const WILD_ICASE: u32 = 256;
pub const WILD_ALLLINKS: u32 = 512;
pub const EW_DIR: u32 = 1;
pub const EW_FILE: u32 = 2;
pub const EW_NOTFOUND: u32 = 4;
pub const EW_ADDSLASH: u32 = 8;
pub const EW_KEEPALL: u32 = 16;
pub const EW_SILENT: u32 = 32;
pub const EW_EXEC: u32 = 64;
pub const EW_PATH: u32 = 128;
pub const EW_ICASE: u32 = 256;
pub const EW_NOERROR: u32 = 512;
pub const EW_NOTWILD: u32 = 1024;
pub const EW_KEEPDOLLAR: u32 = 2048;
pub const EW_ALLLINKS: u32 = 4096;
pub const EW_SHELLCMD: u32 = 8192;
pub const EW_DODOT: u32 = 16384;
pub const EW_EMPTYOK: u32 = 32768;
pub const EW_NOTENV: u32 = 65536;
pub const FINDFILE_FILE: u32 = 0;
pub const FINDFILE_DIR: u32 = 1;
pub const FINDFILE_BOTH: u32 = 2;
pub const FIND_ANY: u32 = 1;
pub const FIND_DEFINE: u32 = 2;
pub const CHECK_PATH: u32 = 3;
pub const ACTION_SHOW: u32 = 1;
pub const ACTION_GOTO: u32 = 2;
pub const ACTION_SPLIT: u32 = 3;
pub const ACTION_SHOW_ALL: u32 = 4;
pub const SEARCH_REV: u32 = 1;
pub const SEARCH_ECHO: u32 = 2;
pub const SEARCH_MSG: u32 = 12;
pub const SEARCH_NFMSG: u32 = 8;
pub const SEARCH_OPT: u32 = 16;
pub const SEARCH_HIS: u32 = 32;
pub const SEARCH_END: u32 = 64;
pub const SEARCH_NOOF: u32 = 128;
pub const SEARCH_START: u32 = 256;
pub const SEARCH_MARK: u32 = 512;
pub const SEARCH_KEEP: u32 = 1024;
pub const SEARCH_PEEK: u32 = 2048;
pub const SEARCH_COL: u32 = 4096;
pub const FIND_IDENT: u32 = 1;
pub const FIND_STRING: u32 = 2;
pub const FIND_EVAL: u32 = 4;
pub const FIND_NOERROR: u32 = 8;
pub const FNAME_MESS: u32 = 1;
pub const FNAME_EXP: u32 = 2;
pub const FNAME_HYP: u32 = 4;
pub const FNAME_INCL: u32 = 8;
pub const FNAME_REL: u32 = 16;
pub const FNAME_UNESC: u32 = 32;
pub const GETF_SETMARK: u32 = 1;
pub const GETF_ALT: u32 = 2;
pub const GETF_SWITCH: u32 = 4;
pub const GETFILE_ERROR: u32 = 1;
pub const GETFILE_NOT_WRITTEN: u32 = 2;
pub const GETFILE_SAME_FILE: u32 = 0;
pub const GETFILE_OPEN_OTHER: i32 = -1;
pub const GETFILE_UNUSED: u32 = 8;
pub const BLN_CURBUF: u32 = 1;
pub const BLN_LISTED: u32 = 2;
pub const BLN_DUMMY: u32 = 4;
pub const BLN_NEW: u32 = 8;
pub const BLN_NOOPT: u32 = 16;
pub const BLN_DUMMY_OK: u32 = 32;
pub const KEY_OPEN_FORW: u32 = 257;
pub const KEY_OPEN_BACK: u32 = 258;
pub const KEY_COMPLETE: u32 = 259;
pub const REMAP_YES: u32 = 0;
pub const REMAP_NONE: i32 = -1;
pub const REMAP_SCRIPT: i32 = -2;
pub const REMAP_SKIP: i32 = -3;
pub const SHELL_FILTER: u32 = 1;
pub const SHELL_EXPAND: u32 = 2;
pub const SHELL_COOKED: u32 = 4;
pub const SHELL_DOOUT: u32 = 8;
pub const SHELL_SILENT: u32 = 16;
pub const SHELL_READ: u32 = 32;
pub const SHELL_WRITE: u32 = 64;
pub const NODE_NORMAL: u32 = 0;
pub const NODE_WRITABLE: u32 = 1;
pub const NODE_OTHER: u32 = 2;
pub const READ_NEW: u32 = 1;
pub const READ_FILTER: u32 = 2;
pub const READ_STDIN: u32 = 4;
pub const READ_BUFFER: u32 = 8;
pub const READ_DUMMY: u32 = 16;
pub const READ_KEEP_UNDO: u32 = 32;
pub const READ_FIFO: u32 = 64;
pub const INDENT_SET: u32 = 1;
pub const INDENT_INC: u32 = 2;
pub const INDENT_DEC: u32 = 3;
pub const FM_BACKWARD: u32 = 1;
pub const FM_FORWARD: u32 = 2;
pub const FM_BLOCKSTOP: u32 = 4;
pub const FM_SKIPCOMM: u32 = 8;
pub const DOBUF_GOTO: u32 = 0;
pub const DOBUF_SPLIT: u32 = 1;
pub const DOBUF_UNLOAD: u32 = 2;
pub const DOBUF_DEL: u32 = 3;
pub const DOBUF_WIPE: u32 = 4;
pub const DOBUF_CURRENT: u32 = 0;
pub const DOBUF_FIRST: u32 = 1;
pub const DOBUF_LAST: u32 = 2;
pub const DOBUF_MOD: u32 = 3;
pub const RE_SEARCH: u32 = 0;
pub const RE_SUBST: u32 = 1;
pub const RE_BOTH: u32 = 2;
pub const RE_LAST: u32 = 2;
pub const RE_MAGIC: u32 = 1;
pub const RE_STRING: u32 = 2;
pub const RE_STRICT: u32 = 4;
pub const RE_AUTO: u32 = 8;
pub const FPC_SAME: u32 = 1;
pub const FPC_DIFF: u32 = 2;
pub const FPC_NOTX: u32 = 4;
pub const FPC_DIFFX: u32 = 6;
pub const FPC_SAMEX: u32 = 7;
pub const ECMD_HIDE: u32 = 1;
pub const ECMD_SET_HELP: u32 = 2;
pub const ECMD_OLDBUF: u32 = 4;
pub const ECMD_FORCEIT: u32 = 8;
pub const ECMD_ADDBUF: u32 = 16;
pub const DOCMD_VERBOSE: u32 = 1;
pub const DOCMD_NOWAIT: u32 = 2;
pub const DOCMD_REPEAT: u32 = 4;
pub const DOCMD_KEYTYPED: u32 = 8;
pub const DOCMD_EXCRESET: u32 = 16;
pub const DOCMD_KEEPLINE: u32 = 32;
pub const BL_WHITE: u32 = 1;
pub const BL_SOL: u32 = 2;
pub const BL_FIX: u32 = 4;
pub const MFS_ALL: u32 = 1;
pub const MFS_STOP: u32 = 2;
pub const MFS_FLUSH: u32 = 4;
pub const MFS_ZERO: u32 = 8;
pub const BCO_ENTER: u32 = 1;
pub const BCO_ALWAYS: u32 = 2;
pub const BCO_NOHELP: u32 = 4;
pub const PUT_FIXINDENT: u32 = 1;
pub const PUT_CURSEND: u32 = 2;
pub const PUT_CURSLINE: u32 = 4;
pub const PUT_LINE: u32 = 8;
pub const PUT_LINE_SPLIT: u32 = 16;
pub const PUT_LINE_FORWARD: u32 = 32;
pub const SIN_CHANGED: u32 = 1;
pub const SIN_INSERT: u32 = 2;
pub const SIN_UNDO: u32 = 4;
pub const INSCHAR_FORMAT: u32 = 1;
pub const INSCHAR_DO_COM: u32 = 2;
pub const INSCHAR_CTRLV: u32 = 4;
pub const INSCHAR_NO_FEX: u32 = 8;
pub const INSCHAR_COM_LIST: u32 = 16;
pub const OPENLINE_DELSPACES: u32 = 1;
pub const OPENLINE_DO_COM: u32 = 2;
pub const OPENLINE_KEEPTRAIL: u32 = 4;
pub const OPENLINE_MARKFIX: u32 = 8;
pub const OPENLINE_COM_LIST: u32 = 16;
pub const HIST_CMD: u32 = 0;
pub const HIST_SEARCH: u32 = 1;
pub const HIST_EXPR: u32 = 2;
pub const HIST_INPUT: u32 = 3;
pub const HIST_DEBUG: u32 = 4;
pub const HIST_COUNT: u32 = 5;
pub const BARTYPE_VERSION: u32 = 1;
pub const BARTYPE_HISTORY: u32 = 2;
pub const BARTYPE_REGISTER: u32 = 3;
pub const BARTYPE_MARK: u32 = 4;
pub const VIMINFO_VERSION: u32 = 4;
pub const VIMINFO_VERSION_WITH_HISTORY: u32 = 2;
pub const VIMINFO_VERSION_WITH_REGISTERS: u32 = 3;
pub const VIMINFO_VERSION_WITH_MARKS: u32 = 4;
pub const DT_TAG: u32 = 1;
pub const DT_POP: u32 = 2;
pub const DT_NEXT: u32 = 3;
pub const DT_PREV: u32 = 4;
pub const DT_FIRST: u32 = 5;
pub const DT_LAST: u32 = 6;
pub const DT_SELECT: u32 = 7;
pub const DT_HELP: u32 = 8;
pub const DT_JUMP: u32 = 9;
pub const DT_CSCOPE: u32 = 10;
pub const DT_LTAG: u32 = 11;
pub const DT_FREE: u32 = 99;
pub const TAG_HELP: u32 = 1;
pub const TAG_NAMES: u32 = 2;
pub const TAG_REGEXP: u32 = 4;
pub const TAG_NOIC: u32 = 8;
pub const TAG_VERBOSE: u32 = 32;
pub const TAG_INS_COMP: u32 = 64;
pub const TAG_KEEP_LANG: u32 = 128;
pub const TAG_NO_TAGFUNC: u32 = 256;
pub const TAG_MANY: u32 = 300;
pub const VIM_GENERIC: u32 = 0;
pub const VIM_ERROR: u32 = 1;
pub const VIM_WARNING: u32 = 2;
pub const VIM_INFO: u32 = 3;
pub const VIM_QUESTION: u32 = 4;
pub const VIM_LAST_TYPE: u32 = 4;
pub const VIM_YES: u32 = 2;
pub const VIM_NO: u32 = 3;
pub const VIM_CANCEL: u32 = 4;
pub const VIM_ALL: u32 = 5;
pub const VIM_DISCARDALL: u32 = 6;
pub const WSP_ROOM: u32 = 1;
pub const WSP_VERT: u32 = 2;
pub const WSP_TOP: u32 = 4;
pub const WSP_BOT: u32 = 8;
pub const WSP_HELP: u32 = 16;
pub const WSP_BELOW: u32 = 32;
pub const WSP_ABOVE: u32 = 64;
pub const WSP_NEWLOC: u32 = 128;
pub const RESIZE_VERT: u32 = 1;
pub const RESIZE_HOR: u32 = 2;
pub const RESIZE_BOTH: u32 = 15;
pub const CCGD_AW: u32 = 1;
pub const CCGD_MULTWIN: u32 = 2;
pub const CCGD_FORCEIT: u32 = 4;
pub const CCGD_ALLBUF: u32 = 8;
pub const CCGD_EXCMD: u32 = 16;
pub const OPT_FREE: u32 = 1;
pub const OPT_GLOBAL: u32 = 2;
pub const OPT_LOCAL: u32 = 4;
pub const OPT_MODELINE: u32 = 8;
pub const OPT_WINONLY: u32 = 16;
pub const OPT_NOWIN: u32 = 32;
pub const DLG_BUTTON_SEP: u8 = 10u8;
pub const DLG_HOTKEY_CHAR: u8 = 38u8;
pub const NO_SCREEN: u32 = 2;
pub const NO_BUFFERS: u32 = 1;
pub const SEA_NONE: u32 = 0;
pub const SEA_DIALOG: u32 = 1;
pub const SEA_QUIT: u32 = 2;
pub const SEA_RECOVER: u32 = 3;
pub const MIN_SWAP_PAGE_SIZE: u32 = 1048;
pub const MAX_SWAP_PAGE_SIZE: u32 = 50000;
pub const SID_MODELINE: i32 = -1;
pub const SID_CMDARG: i32 = -2;
pub const SID_CARG: i32 = -3;
pub const SID_ENV: i32 = -4;
pub const SID_ERROR: i32 = -5;
pub const SID_NONE: i32 = -6;
pub const MAYBE: u32 = 2;
pub const OP_NOP: u32 = 0;
pub const OP_DELETE: u32 = 1;
pub const OP_YANK: u32 = 2;
pub const OP_CHANGE: u32 = 3;
pub const OP_LSHIFT: u32 = 4;
pub const OP_RSHIFT: u32 = 5;
pub const OP_FILTER: u32 = 6;
pub const OP_TILDE: u32 = 7;
pub const OP_INDENT: u32 = 8;
pub const OP_FORMAT: u32 = 9;
pub const OP_COLON: u32 = 10;
pub const OP_UPPER: u32 = 11;
pub const OP_LOWER: u32 = 12;
pub const OP_JOIN: u32 = 13;
pub const OP_JOIN_NS: u32 = 14;
pub const OP_ROT13: u32 = 15;
pub const OP_REPLACE: u32 = 16;
pub const OP_INSERT: u32 = 17;
pub const OP_APPEND: u32 = 18;
pub const OP_FOLD: u32 = 19;
pub const OP_FOLDOPEN: u32 = 20;
pub const OP_FOLDOPENREC: u32 = 21;
pub const OP_FOLDCLOSE: u32 = 22;
pub const OP_FOLDCLOSEREC: u32 = 23;
pub const OP_FOLDDEL: u32 = 24;
pub const OP_FOLDDELREC: u32 = 25;
pub const OP_FORMAT2: u32 = 26;
pub const OP_FUNCTION: u32 = 27;
pub const OP_NR_ADD: u32 = 28;
pub const OP_NR_SUB: u32 = 29;
pub const OP_COMMENT: u32 = 30;
pub const MCHAR: u32 = 0;
pub const MLINE: u32 = 1;
pub const MBLOCK: u32 = 2;
pub const MAUTO: u32 = 255;
pub const MIN_COLUMNS: u32 = 12;
pub const MIN_LINES: u32 = 2;
pub const STATUS_HEIGHT: u32 = 1;
pub const QF_WINHEIGHT: u32 = 10;
pub const LSIZE: u32 = 512;
pub const IOSIZE: u32 = 1025;
pub const DIALOG_MSG_SIZE: u32 = 1000;
pub const MSG_BUF_LEN: u32 = 480;
pub const MSG_BUF_CLEN: u32 = 80;
pub const FOLD_TEXT_LEN: u32 = 51;
pub const TBUFSZ: u32 = 2048;
pub const MAXMAPLEN: u32 = 50;
pub const UNDO_HASH_SIZE: u32 = 32;
pub const WRITEBIN: &[u8; 3] = b"wb\0";
pub const READBIN: &[u8; 3] = b"rb\0";
pub const APPENDBIN: &[u8; 3] = b"ab\0";
pub const O_EXTRA: u32 = 0;
pub const MAXCOL: u32 = 2147483647;
pub const MAXLNUM: u64 = 9223372036854775807;
pub const SHOWCMD_COLS: u32 = 10;
pub const STL_MAX_ITEM: u32 = 80;
pub const MAX_MCO: u32 = 6;
pub const MB_MAXBYTES: u32 = 21;
pub const DFLT_EFM : & [u8 ; 607] = b"%*[^\"]\"%f\"%*\\D%l: %m,\"%f\"%*\\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\, line %l%*\\D%c%*[^ ] %m,%D%*\\a[%*\\d]: Entering directory %*[`']%f',%X%*\\a[%*\\d]: Leaving directory %*[`']%f',%D%*\\a: Entering directory %*[`']%f',%X%*\\a: Leaving directory %*[`']%f',%DMaking %*\\a in %f,%f|%l| %m\0" ;
pub const DFLT_GREPFORMAT: &[u8; 26] = b"%f:%l:%m,%f:%l%m,%f  %l%m\0";
pub const FF_DOS: &[u8; 4] = b"dos\0";
pub const FF_MAC: &[u8; 4] = b"mac\0";
pub const FF_UNIX: &[u8; 5] = b"unix\0";
pub const DFLT_FF: &[u8; 5] = b"unix\0";
pub const DFLT_FFS_VIM: &[u8; 9] = b"unix,dos\0";
pub const DFLT_FFS_VI: &[u8; 1] = b"\0";
pub const DFLT_TEXTAUTO: u32 = 0;
pub const ENC_UCSBOM: &[u8; 8] = b"ucs-bom\0";
pub const ENC_DFLT: &[u8; 6] = b"utf-8\0";
pub const EOL_UNKNOWN: i32 = -1;
pub const EOL_UNIX: u32 = 0;
pub const EOL_DOS: u32 = 1;
pub const EOL_MAC: u32 = 2;
pub const FO_WRAP: u8 = 116u8;
pub const FO_WRAP_COMS: u8 = 99u8;
pub const FO_RET_COMS: u8 = 114u8;
pub const FO_OPEN_COMS: u8 = 111u8;
pub const FO_Q_COMS: u8 = 113u8;
pub const FO_Q_NUMBER: u8 = 110u8;
pub const FO_Q_SECOND: u8 = 50u8;
pub const FO_INS_VI: u8 = 118u8;
pub const FO_INS_LONG: u8 = 108u8;
pub const FO_INS_BLANK: u8 = 98u8;
pub const FO_MBYTE_BREAK: u8 = 109u8;
pub const FO_MBYTE_JOIN: u8 = 77u8;
pub const FO_MBYTE_JOIN2: u8 = 66u8;
pub const FO_ONE_LETTER: u8 = 49u8;
pub const FO_WHITE_PAR: u8 = 119u8;
pub const FO_AUTO: u8 = 97u8;
pub const FO_REMOVE_COMS: u8 = 106u8;
pub const FO_PERIOD_ABBR: u8 = 112u8;
pub const DFLT_FO_VI: &[u8; 3] = b"vt\0";
pub const DFLT_FO_VIM: &[u8; 4] = b"tcq\0";
pub const FO_ALL: &[u8; 20] = b"tcroq2vlb1mMBn,awjp\0";
pub const CPO_ALTREAD: u8 = 97u8;
pub const CPO_ALTWRITE: u8 = 65u8;
pub const CPO_BAR: u8 = 98u8;
pub const CPO_BSLASH: u8 = 66u8;
pub const CPO_SEARCH: u8 = 99u8;
pub const CPO_CONCAT: u8 = 67u8;
pub const CPO_DOTTAG: u8 = 100u8;
pub const CPO_DIGRAPH: u8 = 68u8;
pub const CPO_EXECBUF: u8 = 101u8;
pub const CPO_EMPTYREGION: u8 = 69u8;
pub const CPO_FNAMER: u8 = 102u8;
pub const CPO_FNAMEW: u8 = 70u8;
pub const CPO_GOTO1: u8 = 103u8;
pub const CPO_INSEND: u8 = 72u8;
pub const CPO_INTMOD: u8 = 105u8;
pub const CPO_INDENT: u8 = 73u8;
pub const CPO_JOINSP: u8 = 106u8;
pub const CPO_ENDOFSENT: u8 = 74u8;
pub const CPO_KEYCODE: u8 = 107u8;
pub const CPO_KOFFSET: u8 = 75u8;
pub const CPO_LITERAL: u8 = 108u8;
pub const CPO_LISTWM: u8 = 76u8;
pub const CPO_SHOWMATCH: u8 = 109u8;
pub const CPO_MATCHBSL: u8 = 77u8;
pub const CPO_NUMCOL: u8 = 110u8;
pub const CPO_LINEOFF: u8 = 111u8;
pub const CPO_OVERNEW: u8 = 79u8;
pub const CPO_LISP: u8 = 112u8;
pub const CPO_FNAMEAPP: u8 = 80u8;
pub const CPO_JOINCOL: u8 = 113u8;
pub const CPO_REDO: u8 = 114u8;
pub const CPO_REMMARK: u8 = 82u8;
pub const CPO_BUFOPT: u8 = 115u8;
pub const CPO_BUFOPTGLOB: u8 = 83u8;
pub const CPO_TAGPAT: u8 = 116u8;
pub const CPO_UNDO: u8 = 117u8;
pub const CPO_BACKSPACE: u8 = 118u8;
pub const CPO_CW: u8 = 119u8;
pub const CPO_FWRITE: u8 = 87u8;
pub const CPO_ESC: u8 = 120u8;
pub const CPO_REPLCNT: u8 = 88u8;
pub const CPO_YANK: u8 = 121u8;
pub const CPO_KEEPRO: u8 = 90u8;
pub const CPO_DOLLAR: u8 = 36u8;
pub const CPO_FILTER: u8 = 33u8;
pub const CPO_MATCH: u8 = 37u8;
pub const CPO_STAR: u8 = 42u8;
pub const CPO_PLUS: u8 = 43u8;
pub const CPO_MINUS: u8 = 45u8;
pub const CPO_SPECI: u8 = 60u8;
pub const CPO_REGAPPEND: u8 = 62u8;
pub const CPO_HASH: u8 = 35u8;
pub const CPO_PARA: u8 = 123u8;
pub const CPO_TSIZE: u8 = 124u8;
pub const CPO_PRESERVE: u8 = 38u8;
pub const CPO_SUBPERCENT: u8 = 47u8;
pub const CPO_BACKSL: u8 = 92u8;
pub const CPO_CHDIR: u8 = 46u8;
pub const CPO_SCOLON: u8 = 59u8;
pub const CPO_VIM: &[u8; 8] = b"aABceFs\0";
pub const CPO_VI: &[u8; 53] = b"aAbBcCdDeEfFgHiIjJkKlLmMnoOpPqrRsStuvwWxXyZ$!%*-+<>;\0";
pub const CPO_ALL: &[u8; 60] = b"aAbBcCdDeEfFgHiIjJkKlLmMnoOpPqrRsStuvwWxXyZ$!%*-+<>#{|&/\\.;\0";
pub const WW_ALL: &[u8; 11] = b"bshl<>[],~\0";
pub const MOUSE_NORMAL: u8 = 110u8;
pub const MOUSE_VISUAL: u8 = 118u8;
pub const MOUSE_INSERT: u8 = 105u8;
pub const MOUSE_COMMAND: u8 = 99u8;
pub const MOUSE_HELP: u8 = 104u8;
pub const MOUSE_RETURN: u8 = 114u8;
pub const MOUSE_A: &[u8; 6] = b"nvich\0";
pub const MOUSE_ALL: &[u8; 8] = b"anvichr\0";
pub const MOUSE_NONE: u8 = 32u8;
pub const MOUSE_NONEF: u8 = 120u8;
pub const COCU_ALL: &[u8; 5] = b"nvic\0";
pub const SHM_RO: u8 = 114u8;
pub const SHM_MOD: u8 = 109u8;
pub const SHM_FILE: u8 = 102u8;
pub const SHM_LAST: u8 = 105u8;
pub const SHM_TEXT: u8 = 120u8;
pub const SHM_LINES: u8 = 108u8;
pub const SHM_NEW: u8 = 110u8;
pub const SHM_WRI: u8 = 119u8;
pub const SHM_A: &[u8; 9] = b"rmfixlnw\0";
pub const SHM_WRITE: u8 = 87u8;
pub const SHM_TRUNC: u8 = 116u8;
pub const SHM_TRUNCALL: u8 = 84u8;
pub const SHM_OVER: u8 = 111u8;
pub const SHM_OVERALL: u8 = 79u8;
pub const SHM_SEARCH: u8 = 115u8;
pub const SHM_ATTENTION: u8 = 65u8;
pub const SHM_INTRO: u8 = 73u8;
pub const SHM_COMPLETIONMENU: u8 = 99u8;
pub const SHM_RECORDING: u8 = 113u8;
pub const SHM_FILEINFO: u8 = 70u8;
pub const SHM_SEARCHCOUNT: u8 = 83u8;
pub const SHM_POSIX: &[u8; 3] = b"AS\0";
pub const SHM_ALL: &[u8; 22] = b"rmfixlnwaWtToOsAIcqFS\0";
pub const GO_TERMINAL: u8 = 33u8;
pub const GO_ASEL: u8 = 97u8;
pub const GO_ASELML: u8 = 65u8;
pub const GO_BOT: u8 = 98u8;
pub const GO_CONDIALOG: u8 = 99u8;
pub const GO_TABLINE: u8 = 101u8;
pub const GO_FORG: u8 = 102u8;
pub const GO_GREY: u8 = 103u8;
pub const GO_HORSCROLL: u8 = 104u8;
pub const GO_ICON: u8 = 105u8;
pub const GO_LEFT: u8 = 108u8;
pub const GO_VLEFT: u8 = 76u8;
pub const GO_MENUS: u8 = 109u8;
pub const GO_NOSYSMENU: u8 = 77u8;
pub const GO_POINTER: u8 = 112u8;
pub const GO_ASELPLUS: u8 = 80u8;
pub const GO_RIGHT: u8 = 114u8;
pub const GO_VRIGHT: u8 = 82u8;
pub const GO_TEAROFF: u8 = 116u8;
pub const GO_TOOLBAR: u8 = 84u8;
pub const GO_FOOTER: u8 = 70u8;
pub const GO_VERTICAL: u8 = 118u8;
pub const GO_KEEPWINSIZE: u8 = 107u8;
pub const GO_ALL: &[u8; 21] = b"!aAbcefFghilmMprtTvk\0";
pub const COM_NEST: u8 = 110u8;
pub const COM_BLANK: u8 = 98u8;
pub const COM_START: u8 = 115u8;
pub const COM_MIDDLE: u8 = 109u8;
pub const COM_END: u8 = 101u8;
pub const COM_AUTO_END: u8 = 120u8;
pub const COM_FIRST: u8 = 102u8;
pub const COM_LEFT: u8 = 108u8;
pub const COM_RIGHT: u8 = 114u8;
pub const COM_NOBACK: u8 = 79u8;
pub const COM_ALL: &[u8; 11] = b"nbsmexflrO\0";
pub const COM_MAX_LEN: u32 = 50;
pub const STL_FILEPATH: u8 = 102u8;
pub const STL_FULLPATH: u8 = 70u8;
pub const STL_FILENAME: u8 = 116u8;
pub const STL_COLUMN: u8 = 99u8;
pub const STL_VIRTCOL: u8 = 118u8;
pub const STL_VIRTCOL_ALT: u8 = 86u8;
pub const STL_LINE: u8 = 108u8;
pub const STL_NUMLINES: u8 = 76u8;
pub const STL_BUFNO: u8 = 110u8;
pub const STL_KEYMAP: u8 = 107u8;
pub const STL_OFFSET: u8 = 111u8;
pub const STL_OFFSET_X: u8 = 79u8;
pub const STL_BYTEVAL: u8 = 98u8;
pub const STL_BYTEVAL_X: u8 = 66u8;
pub const STL_ROFLAG: u8 = 114u8;
pub const STL_ROFLAG_ALT: u8 = 82u8;
pub const STL_HELPFLAG: u8 = 104u8;
pub const STL_HELPFLAG_ALT: u8 = 72u8;
pub const STL_FILETYPE: u8 = 121u8;
pub const STL_FILETYPE_ALT: u8 = 89u8;
pub const STL_PREVIEWFLAG: u8 = 119u8;
pub const STL_PREVIEWFLAG_ALT: u8 = 87u8;
pub const STL_MODIFIED: u8 = 109u8;
pub const STL_MODIFIED_ALT: u8 = 77u8;
pub const STL_QUICKFIX: u8 = 113u8;
pub const STL_PERCENTAGE: u8 = 112u8;
pub const STL_ALTPERCENT: u8 = 80u8;
pub const STL_ARGLISTSTAT: u8 = 97u8;
pub const STL_PAGENUM: u8 = 78u8;
pub const STL_VIM_EXPR: u8 = 123u8;
pub const STL_MIDDLEMARK: u8 = 61u8;
pub const STL_TRUNCMARK: u8 = 60u8;
pub const STL_USER_HL: u8 = 42u8;
pub const STL_HIGHLIGHT: u8 = 35u8;
pub const STL_TABPAGENR: u8 = 84u8;
pub const STL_TABCLOSENR: u8 = 88u8;
pub const WIM_FULL: u32 = 1;
pub const WIM_LONGEST: u32 = 2;
pub const WIM_LIST: u32 = 4;
pub const BS_INDENT: u8 = 105u8;
pub const BS_EOL: u8 = 111u8;
pub const BS_START: u8 = 115u8;
pub const LISPWORD_VALUE : & [u8 ; 746] = b"defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object\0" ;
pub const BKC_YES: u32 = 1;
pub const BKC_AUTO: u32 = 2;
pub const BKC_NO: u32 = 4;
pub const BKC_BREAKSYMLINK: u32 = 8;
pub const BKC_BREAKHARDLINK: u32 = 16;
pub const BO_ALL: u32 = 1;
pub const BO_BS: u32 = 2;
pub const BO_CRSR: u32 = 4;
pub const BO_COMPL: u32 = 8;
pub const BO_COPY: u32 = 16;
pub const BO_CTRLG: u32 = 32;
pub const BO_ERROR: u32 = 64;
pub const BO_ESC: u32 = 128;
pub const BO_EX: u32 = 256;
pub const BO_HANGUL: u32 = 512;
pub const BO_IM: u32 = 1024;
pub const BO_LANG: u32 = 2048;
pub const BO_MESS: u32 = 4096;
pub const BO_MATCH: u32 = 8192;
pub const BO_OPER: u32 = 16384;
pub const BO_REG: u32 = 32768;
pub const BO_SH: u32 = 65536;
pub const BO_SPELL: u32 = 131072;
pub const BO_WILD: u32 = 262144;
pub const CMP_INTERNAL: u32 = 1;
pub const CMP_KEEPASCII: u32 = 2;
pub const DY_LASTLINE: u32 = 1;
pub const DY_TRUNCATE: u32 = 2;
pub const DY_UHEX: u32 = 4;
pub const FDO_ALL: u32 = 1;
pub const FDO_BLOCK: u32 = 2;
pub const FDO_HOR: u32 = 4;
pub const FDO_MARK: u32 = 8;
pub const FDO_PERCENT: u32 = 16;
pub const FDO_QUICKFIX: u32 = 32;
pub const FDO_SEARCH: u32 = 64;
pub const FDO_TAG: u32 = 128;
pub const FDO_INSERT: u32 = 256;
pub const FDO_UNDO: u32 = 512;
pub const FDO_JUMP: u32 = 1024;
pub const SSOP_BUFFERS: u32 = 1;
pub const SSOP_WINPOS: u32 = 2;
pub const SSOP_RESIZE: u32 = 4;
pub const SSOP_WINSIZE: u32 = 8;
pub const SSOP_LOCALOPTIONS: u32 = 16;
pub const SSOP_OPTIONS: u32 = 32;
pub const SSOP_HELP: u32 = 64;
pub const SSOP_BLANK: u32 = 128;
pub const SSOP_GLOBALS: u32 = 256;
pub const SSOP_SLASH: u32 = 512;
pub const SSOP_UNIX: u32 = 1024;
pub const SSOP_SESDIR: u32 = 2048;
pub const SSOP_CURDIR: u32 = 4096;
pub const SSOP_FOLDS: u32 = 8192;
pub const SSOP_CURSOR: u32 = 16384;
pub const SSOP_TABPAGES: u32 = 32768;
pub const SSOP_TERMINAL: u32 = 65536;
pub const SWB_USEOPEN: u32 = 1;
pub const SWB_USETAB: u32 = 2;
pub const SWB_SPLIT: u32 = 4;
pub const SWB_NEWTAB: u32 = 8;
pub const SWB_VSPLIT: u32 = 16;
pub const TC_FOLLOWIC: u32 = 1;
pub const TC_IGNORE: u32 = 2;
pub const TC_MATCH: u32 = 4;
pub const TC_FOLLOWSCS: u32 = 8;
pub const TC_SMART: u32 = 16;
pub const VE_BLOCK: u32 = 5;
pub const VE_INSERT: u32 = 6;
pub const VE_ALL: u32 = 4;
pub const VE_ONEMORE: u32 = 8;
pub const NO_LOCAL_UNDOLEVEL: i32 = -123456;
pub const SDS_MAX_PREALLOC: u32 = 1048576;
pub const SDS_TYPE_5: u32 = 0;
pub const SDS_TYPE_8: u32 = 1;
pub const SDS_TYPE_16: u32 = 2;
pub const SDS_TYPE_32: u32 = 3;
pub const SDS_TYPE_64: u32 = 4;
pub const SDS_TYPE_MASK: u32 = 7;
pub const SDS_TYPE_BITS: u32 = 3;
pub const NSUBEXP: u32 = 10;
pub const NFA_MAX_BRACES: u32 = 20;
pub const NFA_MAX_STATES: u32 = 100000;
pub const NFA_TOO_EXPENSIVE: i32 = -1;
pub const AUTOMATIC_ENGINE: u32 = 0;
pub const BACKTRACKING_ENGINE: u32 = 1;
pub const NFA_ENGINE: u32 = 2;
pub const JUMPLISTSIZE: u32 = 100;
pub const TAGSTACKSIZE: u32 = 20;
pub const UH_CHANGED: u32 = 1;
pub const UH_EMPTYBUF: u32 = 2;
pub const MHT_INIT_SIZE: u32 = 64;
pub const BH_DIRTY: u32 = 1;
pub const BH_LOCKED: u32 = 2;
pub const XP_BS_NONE: u32 = 0;
pub const XP_BS_ONE: u32 = 1;
pub const XP_BS_THREE: u32 = 2;
pub const MF_SEED_LEN: u32 = 8;
pub const ML_CHNK_ADDLINE: u32 = 1;
pub const ML_CHNK_DELLINE: u32 = 2;
pub const ML_CHNK_UPDLINE: u32 = 3;
pub const ML_EMPTY: u32 = 1;
pub const ML_LINE_DIRTY: u32 = 2;
pub const ML_LOCKED_DIRTY: u32 = 4;
pub const ML_LOCKED_POS: u32 = 8;
pub const TP_FLAG_CONT_NEXT: u32 = 1;
pub const TP_FLAG_CONT_PREV: u32 = 2;
pub const PT_FLAG_INS_START_INCL: u32 = 1;
pub const PT_FLAG_INS_END_INCL: u32 = 2;
pub const PT_FLAG_COMBINE: u32 = 4;
pub const SIGN_DEF_PRIO: u32 = 10;
pub const SIGN_ANY: u32 = 0;
pub const SIGN_LINEHL: u32 = 1;
pub const SIGN_ICON: u32 = 2;
pub const SIGN_TEXT: u32 = 3;
pub const CSTACK_LEN: u32 = 50;
pub const CSF_TRUE: u32 = 1;
pub const CSF_ACTIVE: u32 = 2;
pub const CSF_ELSE: u32 = 4;
pub const CSF_WHILE: u32 = 8;
pub const CSF_FOR: u32 = 16;
pub const CSF_TRY: u32 = 256;
pub const CSF_FINALLY: u32 = 512;
pub const CSF_THROWN: u32 = 1024;
pub const CSF_CAUGHT: u32 = 2048;
pub const CSF_SILENT: u32 = 4096;
pub const CSTP_NONE: u32 = 0;
pub const CSTP_ERROR: u32 = 1;
pub const CSTP_INTERRUPT: u32 = 2;
pub const CSTP_THROW: u32 = 4;
pub const CSTP_BREAK: u32 = 8;
pub const CSTP_CONTINUE: u32 = 16;
pub const CSTP_RETURN: u32 = 24;
pub const CSTP_FINISH: u32 = 32;
pub const CSL_HAD_LOOP: u32 = 1;
pub const CSL_HAD_ENDLOOP: u32 = 2;
pub const CSL_HAD_CONT: u32 = 4;
pub const CSL_HAD_FINA: u32 = 8;
pub const _LIBICONV_VERSION: u32 = 267;
pub const __ICONV_F_HIDE_INVALID: u32 = 1;
pub const ICONV_TRIVIALP: u32 = 0;
pub const ICONV_GET_TRANSLITERATE: u32 = 1;
pub const ICONV_SET_TRANSLITERATE: u32 = 2;
pub const ICONV_GET_DISCARD_ILSEQ: u32 = 3;
pub const ICONV_SET_DISCARD_ILSEQ: u32 = 4;
pub const ICONV_SET_HOOKS: u32 = 5;
pub const ICONV_SET_FALLBACKS: u32 = 6;
pub const ICONV_GET_ILSEQ_INVALID: u32 = 128;
pub const ICONV_SET_ILSEQ_INVALID: u32 = 129;
pub const CONV_NONE: u32 = 0;
pub const CONV_TO_UTF8: u32 = 1;
pub const CONV_9_TO_UTF8: u32 = 2;
pub const CONV_TO_LATIN1: u32 = 3;
pub const CONV_TO_LATIN9: u32 = 4;
pub const CONV_ICONV: u32 = 5;
pub const CONV_MAC_LATIN1: u32 = 20;
pub const CONV_LATIN1_MAC: u32 = 21;
pub const CONV_MAC_UTF8: u32 = 22;
pub const CONV_UTF8_MAC: u32 = 23;
pub const HT_INIT_SIZE: u32 = 16;
pub const VARNUM_MIN: i64 = -9223372036854775808;
pub const VARNUM_MAX: u64 = 9223372036854775807;
pub const UVARNUM_MAX: i32 = -1;
pub const VAR_SCOPE: u32 = 1;
pub const VAR_DEF_SCOPE: u32 = 2;
pub const VAR_LOCKED: u32 = 1;
pub const VAR_FIXED: u32 = 2;
pub const DI_FLAGS_RO: u32 = 1;
pub const DI_FLAGS_RO_SBX: u32 = 2;
pub const DI_FLAGS_FIX: u32 = 4;
pub const DI_FLAGS_LOCK: u32 = 8;
pub const DI_FLAGS_ALLOC: u32 = 16;
pub const MAX_FUNC_ARGS: u32 = 20;
pub const VAR_SHORT_LEN: u32 = 20;
pub const FIXVAR_CNT: u32 = 12;
pub const INVALID_FD: i32 = -1;
pub const JO_MODE: u32 = 1;
pub const JO_IN_MODE: u32 = 2;
pub const JO_OUT_MODE: u32 = 4;
pub const JO_ERR_MODE: u32 = 8;
pub const JO_CALLBACK: u32 = 16;
pub const JO_OUT_CALLBACK: u32 = 32;
pub const JO_ERR_CALLBACK: u32 = 64;
pub const JO_CLOSE_CALLBACK: u32 = 128;
pub const JO_WAITTIME: u32 = 256;
pub const JO_TIMEOUT: u32 = 512;
pub const JO_OUT_TIMEOUT: u32 = 1024;
pub const JO_ERR_TIMEOUT: u32 = 2048;
pub const JO_PART: u32 = 4096;
pub const JO_ID: u32 = 8192;
pub const JO_STOPONEXIT: u32 = 16384;
pub const JO_EXIT_CB: u32 = 32768;
pub const JO_OUT_IO: u32 = 65536;
pub const JO_ERR_IO: u32 = 131072;
pub const JO_IN_IO: u32 = 262144;
pub const JO_OUT_NAME: u32 = 524288;
pub const JO_ERR_NAME: u32 = 1048576;
pub const JO_IN_NAME: u32 = 2097152;
pub const JO_IN_TOP: u32 = 4194304;
pub const JO_IN_BOT: u32 = 8388608;
pub const JO_OUT_BUF: u32 = 16777216;
pub const JO_ERR_BUF: u32 = 33554432;
pub const JO_IN_BUF: u32 = 67108864;
pub const JO_CHANNEL: u32 = 134217728;
pub const JO_BLOCK_WRITE: u32 = 268435456;
pub const JO_OUT_MODIFIABLE: u32 = 536870912;
pub const JO_ERR_MODIFIABLE: u32 = 1073741824;
pub const JO_ALL: u32 = 2147483647;
pub const JO2_OUT_MSG: u32 = 1;
pub const JO2_ERR_MSG: u32 = 2;
pub const JO2_TERM_NAME: u32 = 4;
pub const JO2_TERM_FINISH: u32 = 8;
pub const JO2_ENV: u32 = 16;
pub const JO2_CWD: u32 = 32;
pub const JO2_TERM_ROWS: u32 = 64;
pub const JO2_TERM_COLS: u32 = 128;
pub const JO2_VERTICAL: u32 = 256;
pub const JO2_CURWIN: u32 = 512;
pub const JO2_HIDDEN: u32 = 1024;
pub const JO2_TERM_OPENCMD: u32 = 2048;
pub const JO2_EOF_CHARS: u32 = 4096;
pub const JO2_NORESTORE: u32 = 8192;
pub const JO2_TERM_KILL: u32 = 16384;
pub const JO2_ANSI_COLORS: u32 = 32768;
pub const JO2_TTY_TYPE: u32 = 65536;
pub const JO_MODE_ALL: u32 = 15;
pub const JO_CB_ALL: u32 = 240;
pub const JO_TIMEOUT_ALL: u32 = 3584;
pub const SYNSPL_DEFAULT: u32 = 0;
pub const SYNSPL_TOP: u32 = 1;
pub const SYNSPL_NOTOP: u32 = 2;
pub const B_IMODE_USE_INSERT: i32 = -1;
pub const B_IMODE_NONE: u32 = 0;
pub const B_IMODE_LMAP: u32 = 1;
pub const B_IMODE_IM: u32 = 2;
pub const B_IMODE_LAST: u32 = 2;
pub const KEYMAP_INIT: u32 = 1;
pub const KEYMAP_LOADED: u32 = 2;
pub const BUF_HAS_QF_ENTRY: u32 = 1;
pub const BUF_HAS_LL_ENTRY: u32 = 2;
pub const DB_COUNT: u32 = 8;
pub const SNAP_HELP_IDX: u32 = 0;
pub const SNAP_AUCMD_IDX: u32 = 1;
pub const SNAP_COUNT: u32 = 2;
pub const FR_LEAF: u32 = 0;
pub const FR_ROW: u32 = 1;
pub const FR_COL: u32 = 2;
pub const MAXPOSMATCH: u32 = 8;
pub const CA_COMMAND_BUSY: u32 = 1;
pub const CA_NO_ADJ_OP_END: u32 = 2;
pub const PRINT_NUMBER_WIDTH: u32 = 8;
pub const MAX_ARG_CMDS: u32 = 10;
pub const WIN_HOR: u32 = 1;
pub const WIN_VER: u32 = 2;
pub const WIN_TABS: u32 = 3;
pub const PROF_NONE: u32 = 0;
pub const PROF_YES: u32 = 1;
pub const PROF_PAUSED: u32 = 2;
pub const VALID_PATH: u32 = 1;
pub const VALID_HEAD: u32 = 2;
pub const VV_COUNT: u32 = 0;
pub const VV_COUNT1: u32 = 1;
pub const VV_PREVCOUNT: u32 = 2;
pub const VV_ERRMSG: u32 = 3;
pub const VV_WARNINGMSG: u32 = 4;
pub const VV_STATUSMSG: u32 = 5;
pub const VV_SHELL_ERROR: u32 = 6;
pub const VV_THIS_SESSION: u32 = 7;
pub const VV_VERSION: u32 = 8;
pub const VV_LNUM: u32 = 9;
pub const VV_TERMRESPONSE: u32 = 10;
pub const VV_FNAME: u32 = 11;
pub const VV_LANG: u32 = 12;
pub const VV_LC_TIME: u32 = 13;
pub const VV_CTYPE: u32 = 14;
pub const VV_CC_FROM: u32 = 15;
pub const VV_CC_TO: u32 = 16;
pub const VV_FNAME_IN: u32 = 17;
pub const VV_FNAME_OUT: u32 = 18;
pub const VV_FNAME_NEW: u32 = 19;
pub const VV_FNAME_DIFF: u32 = 20;
pub const VV_CMDARG: u32 = 21;
pub const VV_FOLDSTART: u32 = 22;
pub const VV_FOLDEND: u32 = 23;
pub const VV_FOLDDASHES: u32 = 24;
pub const VV_FOLDLEVEL: u32 = 25;
pub const VV_PROGNAME: u32 = 26;
pub const VV_SEND_SERVER: u32 = 27;
pub const VV_DYING: u32 = 28;
pub const VV_EXCEPTION: u32 = 29;
pub const VV_THROWPOINT: u32 = 30;
pub const VV_REG: u32 = 31;
pub const VV_CMDBANG: u32 = 32;
pub const VV_INSERTMODE: u32 = 33;
pub const VV_VAL: u32 = 34;
pub const VV_KEY: u32 = 35;
pub const VV_PROFILING: u32 = 36;
pub const VV_FCS_REASON: u32 = 37;
pub const VV_FCS_CHOICE: u32 = 38;
pub const VV_BEVAL_BUFNR: u32 = 39;
pub const VV_BEVAL_WINNR: u32 = 40;
pub const VV_BEVAL_WINID: u32 = 41;
pub const VV_BEVAL_LNUM: u32 = 42;
pub const VV_BEVAL_COL: u32 = 43;
pub const VV_BEVAL_TEXT: u32 = 44;
pub const VV_SCROLLSTART: u32 = 45;
pub const VV_SWAPNAME: u32 = 46;
pub const VV_SWAPCHOICE: u32 = 47;
pub const VV_SWAPCOMMAND: u32 = 48;
pub const VV_CHAR: u32 = 49;
pub const VV_MOUSE_WIN: u32 = 50;
pub const VV_MOUSE_WINID: u32 = 51;
pub const VV_MOUSE_LNUM: u32 = 52;
pub const VV_MOUSE_COL: u32 = 53;
pub const VV_OP: u32 = 54;
pub const VV_SEARCHFORWARD: u32 = 55;
pub const VV_HLSEARCH: u32 = 56;
pub const VV_OLDFILES: u32 = 57;
pub const VV_WINDOWID: u32 = 58;
pub const VV_PROGPATH: u32 = 59;
pub const VV_COMPLETED_ITEM: u32 = 60;
pub const VV_OPTION_NEW: u32 = 61;
pub const VV_OPTION_OLD: u32 = 62;
pub const VV_OPTION_TYPE: u32 = 63;
pub const VV_ERRORS: u32 = 64;
pub const VV_FALSE: u32 = 65;
pub const VV_TRUE: u32 = 66;
pub const VV_NULL: u32 = 67;
pub const VV_NONE: u32 = 68;
pub const VV_VIM_DID_ENTER: u32 = 69;
pub const VV_TESTING: u32 = 70;
pub const VV_TYPE_NUMBER: u32 = 71;
pub const VV_TYPE_STRING: u32 = 72;
pub const VV_TYPE_FUNC: u32 = 73;
pub const VV_TYPE_LIST: u32 = 74;
pub const VV_TYPE_DICT: u32 = 75;
pub const VV_TYPE_FLOAT: u32 = 76;
pub const VV_TYPE_BOOL: u32 = 77;
pub const VV_TYPE_NONE: u32 = 78;
pub const VV_TYPE_JOB: u32 = 79;
pub const VV_TYPE_CHANNEL: u32 = 80;
pub const VV_TYPE_BLOB: u32 = 81;
pub const VV_TERMRFGRESP: u32 = 82;
pub const VV_TERMRBGRESP: u32 = 83;
pub const VV_TERMU7RESP: u32 = 84;
pub const VV_TERMSTYLERESP: u32 = 85;
pub const VV_TERMBLINKRESP: u32 = 86;
pub const VV_EVENT: u32 = 87;
pub const VV_LEN: u32 = 88;
pub const VVAL_FALSE: u32 = 0;
pub const VVAL_TRUE: u32 = 1;
pub const VVAL_NONE: u32 = 2;
pub const VVAL_NULL: u32 = 3;
pub const VAR_TYPE_NUMBER: u32 = 0;
pub const VAR_TYPE_STRING: u32 = 1;
pub const VAR_TYPE_FUNC: u32 = 2;
pub const VAR_TYPE_LIST: u32 = 3;
pub const VAR_TYPE_DICT: u32 = 4;
pub const VAR_TYPE_FLOAT: u32 = 5;
pub const VAR_TYPE_BOOL: u32 = 6;
pub const VAR_TYPE_NONE: u32 = 7;
pub const VAR_TYPE_JOB: u32 = 8;
pub const VAR_TYPE_CHANNEL: u32 = 9;
pub const VAR_TYPE_BLOB: u32 = 10;
pub const RANGE: u32 = 1;
pub const BANG: u32 = 2;
pub const EXTRA: u32 = 4;
pub const XFILE: u32 = 8;
pub const NOSPC: u32 = 16;
pub const DFLALL: u32 = 32;
pub const WHOLEFOLD: u32 = 64;
pub const NEEDARG: u32 = 128;
pub const TRLBAR: u32 = 256;
pub const REGSTR: u32 = 512;
pub const COUNT: u32 = 1024;
pub const NOTRLCOM: u32 = 2048;
pub const ZEROR: u32 = 4096;
pub const USECTRLV: u32 = 8192;
pub const EDITCMD: u32 = 16384;
pub const BUFNAME: u32 = 32768;
pub const BUFUNL: u32 = 65536;
pub const ARGOPT: u32 = 131072;
pub const SBOXOK: u32 = 262144;
pub const CMDWIN: u32 = 524288;
pub const MODIFY: u32 = 1048576;
pub const EXFLAGS: u32 = 2097152;
pub const RESTRICT: u32 = 4194304;
pub const FILES: u32 = 12;
pub const WORD1: u32 = 20;
pub const FILE1: u32 = 28;
pub const FORCE_BIN: u32 = 1;
pub const FORCE_NOBIN: u32 = 2;
pub const EXFLAG_LIST: u32 = 1;
pub const EXFLAG_NR: u32 = 2;
pub const EXFLAG_PRINT: u32 = 4;
pub const CLIP_UNNAMED: u32 = 1;
pub const CLIP_UNNAMED_PLUS: u32 = 2;
pub const DBCS_JPN: u32 = 932;
pub const DBCS_JPNU: u32 = 9932;
pub const DBCS_KOR: u32 = 949;
pub const DBCS_KORU: u32 = 9949;
pub const DBCS_CHS: u32 = 936;
pub const DBCS_CHSU: u32 = 9936;
pub const DBCS_CHT: u32 = 950;
pub const DBCS_CHTU: u32 = 9950;
pub const DBCS_2BYTE: u32 = 1;
pub const DBCS_DEBUG: i32 = -1;
pub const NSCRIPT: u32 = 15;
pub const ENC_8BIT: u32 = 1;
pub const ENC_DBCS: u32 = 2;
pub const ENC_UNICODE: u32 = 4;
pub const ENC_ENDIAN_B: u32 = 16;
pub const ENC_ENDIAN_L: u32 = 32;
pub const ENC_2BYTE: u32 = 64;
pub const ENC_4BYTE: u32 = 128;
pub const ENC_2WORD: u32 = 256;
pub const ENC_LATIN1: u32 = 512;
pub const ENC_LATIN9: u32 = 1024;
pub const ENC_MACROMAN: u32 = 2048;
pub const ICONV_E2BIG: u32 = 7;
pub const ICONV_EINVAL: u32 = 22;
pub const ICONV_EILSEQ: u32 = 92;
pub const SIGN_BYTE: u32 = 1;
pub const SIGNAL_BLOCK: i32 = -1;
pub const SIGNAL_UNBLOCK: i32 = -2;
pub const VGR_GLOBAL: u32 = 1;
pub const VGR_NOJUMP: u32 = 2;
pub const BAD_REPLACE: u8 = 63u8;
pub const BAD_KEEP: i32 = -1;
pub const BAD_DROP: i32 = -2;
pub const DOSO_NONE: u32 = 0;
pub const DOSO_VIMRC: u32 = 1;
pub const DOSO_GVIMRC: u32 = 2;
pub const VIF_WANT_INFO: u32 = 1;
pub const VIF_WANT_MARKS: u32 = 2;
pub const VIF_FORCEIT: u32 = 4;
pub const VIF_GET_OLDFILES: u32 = 8;
pub const BFA_DEL: u32 = 1;
pub const BFA_WIPE: u32 = 2;
pub const BFA_KEEP_UNDO: u32 = 4;
pub const MSCR_DOWN: u32 = 0;
pub const MSCR_UP: u32 = 1;
pub const MSCR_LEFT: i32 = -1;
pub const MSCR_RIGHT: i32 = -2;
pub const KEYLEN_PART_KEY: i32 = -1;
pub const KEYLEN_PART_MAP: i32 = -2;
pub const KEYLEN_REMOVED: u32 = 9999;
pub const FILEINFO_OK: u32 = 0;
pub const FILEINFO_ENC_FAIL: u32 = 1;
pub const FILEINFO_READ_FAIL: u32 = 2;
pub const FILEINFO_INFO_FAIL: u32 = 3;
pub const SOPT_BOOL: u32 = 1;
pub const SOPT_NUM: u32 = 2;
pub const SOPT_STRING: u32 = 4;
pub const SOPT_GLOBAL: u32 = 8;
pub const SOPT_WIN: u32 = 16;
pub const SOPT_BUF: u32 = 32;
pub const SOPT_UNSET: u32 = 64;
pub const SREQ_GLOBAL: u32 = 0;
pub const SREQ_WIN: u32 = 1;
pub const SREQ_BUF: u32 = 2;
pub const GREG_NO_EXPR: u32 = 1;
pub const GREG_EXPR_SRC: u32 = 2;
pub const GREG_LIST: u32 = 4;
pub const AUTOLOAD_CHAR: u8 = 35u8;
pub const MAX_OPEN_CHANNELS: u32 = 10;
pub const JSON_JS: u32 = 1;
pub const JSON_NO_NONE: u32 = 2;
pub const JSON_NL: u32 = 4;
pub const DIP_ALL: u32 = 1;
pub const DIP_DIR: u32 = 2;
pub const DIP_ERR: u32 = 4;
pub const DIP_START: u32 = 8;
pub const DIP_OPT: u32 = 16;
pub const DIP_NORTP: u32 = 32;
pub const DIP_NOAFTER: u32 = 64;
pub const DIP_AFTER: u32 = 128;
pub const LOWEST_WIN_ID: u32 = 1000;
pub const COPYID_INC: u32 = 2;
pub const COPYID_MASK: i32 = -2;
pub const TFN_INT: u32 = 1;
pub const TFN_QUIET: u32 = 2;
pub const TFN_NO_AUTOLOAD: u32 = 4;
pub const TFN_NO_DEREF: u32 = 8;
pub const TFN_READ_ONLY: u32 = 16;
pub const GLV_QUIET: u32 = 2;
pub const GLV_NO_AUTOLOAD: u32 = 4;
pub const GLV_READ_ONLY: u32 = 16;
pub const DO_NOT_FREE_CNT: u32 = 99999;
pub const ERROR_UNKNOWN: u32 = 0;
pub const ERROR_TOOMANY: u32 = 1;
pub const ERROR_TOOFEW: u32 = 2;
pub const ERROR_SCRIPT: u32 = 3;
pub const ERROR_DICT: u32 = 4;
pub const ERROR_NONE: u32 = 5;
pub const ERROR_OTHER: u32 = 6;
pub const ERROR_DELETED: u32 = 7;
pub const FNE_INCL_BR: u32 = 1;
pub const FNE_CHECK_START: u32 = 2;
pub const REPLACE_CR_NCHAR: i32 = -1;
pub const REPLACE_NL_NCHAR: i32 = -2;
pub const TERM_START_NOJOB: u32 = 1;
pub const TERM_START_FORCEIT: u32 = 2;
pub const TERM_START_SYSTEM: u32 = 4;
pub const SAVE_RESTORE_TITLE: u32 = 1;
pub const SAVE_RESTORE_ICON: u32 = 2;
pub const SAVE_RESTORE_BOTH: u32 = 3;
pub const APC_SAVE_FOR_UNDO: u32 = 1;
pub const APC_SUBSTITUTE: u32 = 2;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__map) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__types) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nranges) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ranges) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneCharClass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    const UNINIT: ::std::mem::MaybeUninit<_RuneLocale> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__encoding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sgetrune) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sputrune) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__invalid_rune) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__runetype) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__maplower) as usize - ptr as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mapupper) as usize - ptr as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__runetype_ext) as usize - ptr as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__maplower_ext) as usize - ptr as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mapupper_ext) as usize - ptr as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__variable) as usize - ptr as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__variable_len) as usize - ptr as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ncharclasses) as usize - ptr as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__charclasses) as usize - ptr as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type dev_t = __darwin_dev_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[test]
fn bindgen_test_layout_ostat() {
    const UNINIT: ::std::mem::MaybeUninit<ostat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ostat>(),
        96usize,
        concat!("Size of: ", stringify!(ostat))
    );
    assert_eq!(
        ::std::mem::align_of::<ostat>(),
        8usize,
        concat!("Alignment of ", stringify!(ostat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atimespec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtimespec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctimespec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_flags) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gen) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atimespec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtimespec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctimespec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_birthtimespec) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_birthtimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_flags) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_lspare) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_qspare) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_qspare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    const UNINIT: ::std::mem::MaybeUninit<stat64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        144usize,
        concat!("Size of: ", stringify!(stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atimespec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtimespec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctimespec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_birthtimespec) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_birthtimespec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_flags) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_lspare) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_qspare) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_qspare)
        )
    );
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat$INODE64"]
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat$INODE64"]
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat$INODE64"]
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatat$INODE64"]
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx_np$INODE64"]
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx_np$INODE64"]
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx_np$INODE64"]
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatx64_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstatx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type key_t = __int32_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_thread_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ebx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ecx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__edx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__edi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esi) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ebp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eflags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eip) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mmst_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mmst_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mmst_rsrv) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_xmm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__xmm_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ymm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ymm_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_zmm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__zmm_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_opmask_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opmask_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_float_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_avx_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_avx512_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_exception_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_debug_state32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    const UNINIT: ::std::mem::MaybeUninit<__x86_instruction_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_stream_valid_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_stream_valid_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__out_of_synch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__out_of_synch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_bytes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_cacheline) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_cacheline)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    const UNINIT: ::std::mem::MaybeUninit<__last_branch_record> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__from_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__from_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__to_ip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__to_ip)
        )
    );
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    const UNINIT: ::std::mem::MaybeUninit<__last_branch_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lbr_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lbrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbrs)
        )
    );
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    const UNINIT: ::std::mem::MaybeUninit<__x86_pagein_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_thread_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rbx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rcx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rdx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rdi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rsi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rbp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rsp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r10) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r11) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r12) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r13) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r14) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r15) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_thread_full_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gsbase) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__gsbase)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_float_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_avx_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_avx512_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh8) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh9) as usize - ptr as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh10) as usize - ptr as usize },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh11) as usize - ptr as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh12) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh13) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh14) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh15) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm16) as usize - ptr as usize },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm17) as usize - ptr as usize },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm18) as usize - ptr as usize },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm19) as usize - ptr as usize },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm20) as usize - ptr as usize },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm21) as usize - ptr as usize },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm22) as usize - ptr as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm23) as usize - ptr as usize },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm24) as usize - ptr as usize },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm25) as usize - ptr as usize },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm26) as usize - ptr as usize },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm27) as usize - ptr as usize },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm28) as usize - ptr as usize },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm29) as usize - ptr as usize },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm30) as usize - ptr as usize },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm31) as usize - ptr as usize },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_exception_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_debug_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_cpmu_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx512_32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext64_full> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx64_full> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx512_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext_avx512_64_full> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_mcontext_avx512_64_full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__fs)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_sigaltstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ucontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    const UNINIT: ::std::mem::MaybeUninit<__siginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    const UNINIT: ::std::mem::MaybeUninit<sigvec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::std::mem::MaybeUninit<rusage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v6() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v6>(),
        464usize,
        concat!("Size of: ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v6>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_ptime) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_ptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_ptime) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_ptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pinstructions) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pinstructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pcycles) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pcycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_energy_nj) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_energy_nj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_penergy_nj) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_penergy_nj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_reserved) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_reserved)
        )
    );
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::std::mem::MaybeUninit<rlimit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    const UNINIT: ::std::mem::MaybeUninit<proc_rlimit_control_wakeupmon> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_rate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    const UNINIT: ::std::mem::MaybeUninit<wait> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_T) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_S) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<accessx_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_name_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_pad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
pub type au_ctlmode_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
#[test]
fn bindgen_test_layout_au_tid() {
    const UNINIT: ::std::mem::MaybeUninit<au_tid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_tid>(),
        8usize,
        concat!("Size of: ", stringify!(au_tid))
    );
    assert_eq!(
        ::std::mem::align_of::<au_tid>(),
        4usize,
        concat!("Alignment of ", stringify!(au_tid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_tid),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(au_tid),
            "::",
            stringify!(machine)
        )
    );
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
#[test]
fn bindgen_test_layout_au_tid_addr() {
    const UNINIT: ::std::mem::MaybeUninit<au_tid_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_tid_addr>(),
        24usize,
        concat!("Size of: ", stringify!(au_tid_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<au_tid_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(au_tid_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).at_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_tid_addr),
            "::",
            stringify!(at_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).at_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(au_tid_addr),
            "::",
            stringify!(at_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).at_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(au_tid_addr),
            "::",
            stringify!(at_addr)
        )
    );
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_au_mask() {
    const UNINIT: ::std::mem::MaybeUninit<au_mask> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_mask>(),
        8usize,
        concat!("Size of: ", stringify!(au_mask))
    );
    assert_eq!(
        ::std::mem::align_of::<au_mask>(),
        4usize,
        concat!("Alignment of ", stringify!(au_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).am_success) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_mask),
            "::",
            stringify!(am_success)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).am_failure) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(au_mask),
            "::",
            stringify!(am_failure)
        )
    );
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
#[test]
fn bindgen_test_layout_auditinfo() {
    const UNINIT: ::std::mem::MaybeUninit<auditinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<auditinfo>(),
        24usize,
        concat!("Size of: ", stringify!(auditinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<auditinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(auditinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_auid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo),
            "::",
            stringify!(ai_auid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo),
            "::",
            stringify!(ai_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_termid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo),
            "::",
            stringify!(ai_termid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_asid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo),
            "::",
            stringify!(ai_asid)
        )
    );
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
#[test]
fn bindgen_test_layout_auditinfo_addr() {
    const UNINIT: ::std::mem::MaybeUninit<auditinfo_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<auditinfo_addr>(),
        48usize,
        concat!("Size of: ", stringify!(auditinfo_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<auditinfo_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(auditinfo_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_auid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo_addr),
            "::",
            stringify!(ai_auid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo_addr),
            "::",
            stringify!(ai_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_termid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo_addr),
            "::",
            stringify!(ai_termid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_asid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo_addr),
            "::",
            stringify!(ai_asid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(auditinfo_addr),
            "::",
            stringify!(ai_flags)
        )
    );
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
#[test]
fn bindgen_test_layout_auditpinfo() {
    const UNINIT: ::std::mem::MaybeUninit<auditpinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<auditpinfo>(),
        28usize,
        concat!("Size of: ", stringify!(auditpinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<auditpinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(auditpinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo),
            "::",
            stringify!(ap_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_auid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo),
            "::",
            stringify!(ap_auid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo),
            "::",
            stringify!(ap_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_termid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo),
            "::",
            stringify!(ap_termid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_asid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo),
            "::",
            stringify!(ap_asid)
        )
    );
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
#[test]
fn bindgen_test_layout_auditpinfo_addr() {
    const UNINIT: ::std::mem::MaybeUninit<auditpinfo_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<auditpinfo_addr>(),
        56usize,
        concat!("Size of: ", stringify!(auditpinfo_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<auditpinfo_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(auditpinfo_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo_addr),
            "::",
            stringify!(ap_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_auid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo_addr),
            "::",
            stringify!(ap_auid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo_addr),
            "::",
            stringify!(ap_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_termid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo_addr),
            "::",
            stringify!(ap_termid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_asid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo_addr),
            "::",
            stringify!(ap_asid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(auditpinfo_addr),
            "::",
            stringify!(ap_flags)
        )
    );
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
#[test]
fn bindgen_test_layout_au_session() {
    const UNINIT: ::std::mem::MaybeUninit<au_session> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_session>(),
        16usize,
        concat!("Size of: ", stringify!(au_session))
    );
    assert_eq!(
        ::std::mem::align_of::<au_session>(),
        8usize,
        concat!("Alignment of ", stringify!(au_session))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_aia_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_session),
            "::",
            stringify!(as_aia_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(au_session),
            "::",
            stringify!(as_mask)
        )
    );
}
pub type au_session_t = au_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: usize,
    pub op_type: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_au_expire_after() {
    const UNINIT: ::std::mem::MaybeUninit<au_expire_after> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_expire_after>(),
        24usize,
        concat!("Size of: ", stringify!(au_expire_after))
    );
    assert_eq!(
        ::std::mem::align_of::<au_expire_after>(),
        8usize,
        concat!("Alignment of ", stringify!(au_expire_after))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).age) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_expire_after),
            "::",
            stringify!(age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(au_expire_after),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(au_expire_after),
            "::",
            stringify!(op_type)
        )
    );
}
pub type au_expire_after_t = au_expire_after;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token {
    _unused: [u8; 0],
}
pub type token_t = au_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_au_qctrl() {
    const UNINIT: ::std::mem::MaybeUninit<au_qctrl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_qctrl>(),
        20usize,
        concat!("Size of: ", stringify!(au_qctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<au_qctrl>(),
        4usize,
        concat!("Alignment of ", stringify!(au_qctrl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aq_hiwater) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_qctrl),
            "::",
            stringify!(aq_hiwater)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aq_lowater) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(au_qctrl),
            "::",
            stringify!(aq_lowater)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aq_bufsz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(au_qctrl),
            "::",
            stringify!(aq_bufsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aq_delay) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(au_qctrl),
            "::",
            stringify!(aq_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aq_minfree) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(au_qctrl),
            "::",
            stringify!(aq_minfree)
        )
    );
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_audit_stat() {
    const UNINIT: ::std::mem::MaybeUninit<audit_stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audit_stat>(),
        56usize,
        concat!("Size of: ", stringify!(audit_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_stat>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_numevent) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_numevent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_generated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_generated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_nonattrib) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_nonattrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_kernel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_audit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_auditctl) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_auditctl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_enqueue) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_enqueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_written) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_written)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_wblocked) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_wblocked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_rblocked) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_rblocked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_dropped) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_dropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_totalsize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_totalsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as_memused) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_stat),
            "::",
            stringify!(as_memused)
        )
    );
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
#[test]
fn bindgen_test_layout_audit_fstat() {
    const UNINIT: ::std::mem::MaybeUninit<audit_fstat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audit_fstat>(),
        16usize,
        concat!("Size of: ", stringify!(audit_fstat))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_fstat>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_fstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).af_filesz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_fstat),
            "::",
            stringify!(af_filesz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).af_currsz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_fstat),
            "::",
            stringify!(af_currsz)
        )
    );
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
#[test]
fn bindgen_test_layout_au_evclass_map() {
    const UNINIT: ::std::mem::MaybeUninit<au_evclass_map> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<au_evclass_map>(),
        8usize,
        concat!("Size of: ", stringify!(au_evclass_map))
    );
    assert_eq!(
        ::std::mem::align_of::<au_evclass_map>(),
        4usize,
        concat!("Alignment of ", stringify!(au_evclass_map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ec_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(au_evclass_map),
            "::",
            stringify!(ec_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ec_class) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(au_evclass_map),
            "::",
            stringify!(ec_class)
        )
    );
}
pub type au_evclass_map_t = au_evclass_map;
pub const audit_session_flags_AU_SESSION_FLAG_IS_INITIAL: audit_session_flags = 1;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_GRAPHIC_ACCESS: audit_session_flags = 16;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_TTY: audit_session_flags = 32;
pub const audit_session_flags_AU_SESSION_FLAG_IS_REMOTE: audit_session_flags = 4096;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_CONSOLE_ACCESS: audit_session_flags = 8192;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_AUTHENTICATED: audit_session_flags = 16384;
pub type audit_session_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn audit(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditon(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditctl(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit_addr(
        arg1: *mut auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit_addr(
        arg1: *const auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
}
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_pset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_seqno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_mscount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_mscount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_qlimit) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_qlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_msgcount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_msgcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_sorights) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_sorights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_srights) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_srights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_pdrequest) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pdrequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_nsrequest) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_nsrequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_flags)
        )
    );
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_limits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl_qlimit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_limits),
            "::",
            stringify!(mpl_qlimit)
        )
    );
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_info_ext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpie_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpie_boost_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_boost_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(reserved)
        )
    );
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[test]
fn bindgen_test_layout_mach_port_guard_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_guard_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_guard_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_guard_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpgi_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_guard_info),
            "::",
            stringify!(mpgi_guard)
        )
    );
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_qos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_qos),
            "::",
            stringify!(len)
        )
    );
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[test]
fn bindgen_test_layout_mach_service_port_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_service_port_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_service_port_info>(),
        256usize,
        concat!("Size of: ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_service_port_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspi_string_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_string_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspi_domain_type) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_domain_type)
        )
    );
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_interval_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(work_interval_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_name)
        )
    );
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(mpl)
        )
    );
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE:
    mach_port_guard_exception_codes = 16777216;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
extern "C" {
    pub fn audit_session_self() -> mach_port_name_t;
}
extern "C" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_session_port(
        asid: au_asid_t,
        portname: *mut mach_port_name_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct label {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cred {
    _unused: [u8; 0],
}
pub type kauth_cred_t = *mut ucred;
pub type posix_cred_t = *mut posix_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout_xucred() {
    const UNINIT: ::std::mem::MaybeUninit<xucred> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<xucred>(),
        76usize,
        concat!("Size of: ", stringify!(xucred))
    );
    assert_eq!(
        ::std::mem::align_of::<xucred>(),
        4usize,
        concat!("Alignment of ", stringify!(xucred))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xucred),
            "::",
            stringify!(cr_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xucred),
            "::",
            stringify!(cr_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_ngroups) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xucred),
            "::",
            stringify!(cr_ngroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_groups) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xucred),
            "::",
            stringify!(cr_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[test]
fn bindgen_test_layout_timeval64() {
    const UNINIT: ::std::mem::MaybeUninit<timeval64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval64>(),
        16usize,
        concat!("Size of: ", stringify!(timeval64))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval64>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval64),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_clockinfo() {
    const UNINIT: ::std::mem::MaybeUninit<clockinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clockinfo>(),
        20usize,
        concat!("Size of: ", stringify!(clockinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<clockinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(clockinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tickadj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(tickadj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stathz) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(stathz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profhz) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(profhz)
        )
    );
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
pub type text_encoding_t = u_int32_t;
pub type fsobj_type_t = u_int32_t;
pub type fsobj_tag_t = u_int32_t;
pub type fsfile_type_t = u_int32_t;
pub type fsvolid_t = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[test]
fn bindgen_test_layout_fsobj_id() {
    const UNINIT: ::std::mem::MaybeUninit<fsobj_id> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsobj_id>(),
        8usize,
        concat!("Size of: ", stringify!(fsobj_id))
    );
    assert_eq!(
        ::std::mem::align_of::<fsobj_id>(),
        4usize,
        concat!("Alignment of ", stringify!(fsobj_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid_objno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_objno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid_generation) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_generation)
        )
    );
}
pub type fsobj_id_t = fsobj_id;
pub type attrgroup_t = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrlist {
    pub bitmapcount: u_short,
    pub reserved: u_int16_t,
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
#[test]
fn bindgen_test_layout_attrlist() {
    const UNINIT: ::std::mem::MaybeUninit<attrlist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attrlist>(),
        24usize,
        concat!("Size of: ", stringify!(attrlist))
    );
    assert_eq!(
        ::std::mem::align_of::<attrlist>(),
        4usize,
        concat!("Alignment of ", stringify!(attrlist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmapcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(bitmapcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commonattr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(commonattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volattr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(volattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirattr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(dirattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileattr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(fileattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forkattr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(attrlist),
            "::",
            stringify!(forkattr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_set {
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
#[test]
fn bindgen_test_layout_attribute_set() {
    const UNINIT: ::std::mem::MaybeUninit<attribute_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attribute_set>(),
        20usize,
        concat!("Size of: ", stringify!(attribute_set))
    );
    assert_eq!(
        ::std::mem::align_of::<attribute_set>(),
        4usize,
        concat!("Alignment of ", stringify!(attribute_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commonattr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attribute_set),
            "::",
            stringify!(commonattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volattr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(attribute_set),
            "::",
            stringify!(volattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirattr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attribute_set),
            "::",
            stringify!(dirattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileattr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(attribute_set),
            "::",
            stringify!(fileattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forkattr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(attribute_set),
            "::",
            stringify!(forkattr)
        )
    );
}
pub type attribute_set_t = attribute_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrreference {
    pub attr_dataoffset: i32,
    pub attr_length: u_int32_t,
}
#[test]
fn bindgen_test_layout_attrreference() {
    const UNINIT: ::std::mem::MaybeUninit<attrreference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attrreference>(),
        8usize,
        concat!("Size of: ", stringify!(attrreference))
    );
    assert_eq!(
        ::std::mem::align_of::<attrreference>(),
        4usize,
        concat!("Alignment of ", stringify!(attrreference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_dataoffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attrreference),
            "::",
            stringify!(attr_dataoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(attrreference),
            "::",
            stringify!(attr_length)
        )
    );
}
pub type attrreference_t = attrreference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diskextent {
    pub startblock: u_int32_t,
    pub blockcount: u_int32_t,
}
#[test]
fn bindgen_test_layout_diskextent() {
    const UNINIT: ::std::mem::MaybeUninit<diskextent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<diskextent>(),
        8usize,
        concat!("Size of: ", stringify!(diskextent))
    );
    assert_eq!(
        ::std::mem::align_of::<diskextent>(),
        4usize,
        concat!("Alignment of ", stringify!(diskextent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startblock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(diskextent),
            "::",
            stringify!(startblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockcount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(diskextent),
            "::",
            stringify!(blockcount)
        )
    );
}
pub type extentrecord = [diskextent; 8usize];
pub type vol_capabilities_set_t = [u_int32_t; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_capabilities_attr {
    pub capabilities: vol_capabilities_set_t,
    pub valid: vol_capabilities_set_t,
}
#[test]
fn bindgen_test_layout_vol_capabilities_attr() {
    const UNINIT: ::std::mem::MaybeUninit<vol_capabilities_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vol_capabilities_attr>(),
        32usize,
        concat!("Size of: ", stringify!(vol_capabilities_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<vol_capabilities_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(vol_capabilities_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vol_capabilities_attr),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vol_capabilities_attr),
            "::",
            stringify!(valid)
        )
    );
}
pub type vol_capabilities_attr_t = vol_capabilities_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_attributes_attr {
    pub validattr: attribute_set_t,
    pub nativeattr: attribute_set_t,
}
#[test]
fn bindgen_test_layout_vol_attributes_attr() {
    const UNINIT: ::std::mem::MaybeUninit<vol_attributes_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vol_attributes_attr>(),
        40usize,
        concat!("Size of: ", stringify!(vol_attributes_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<vol_attributes_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(vol_attributes_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validattr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vol_attributes_attr),
            "::",
            stringify!(validattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativeattr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vol_attributes_attr),
            "::",
            stringify!(nativeattr)
        )
    );
}
pub type vol_attributes_attr_t = vol_attributes_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    pub returnattrs: *mut attrlist,
    pub returnbuffer: *mut ::std::os::raw::c_void,
    pub returnbuffersize: usize,
    pub maxmatches: u_long,
    pub timelimit: timeval,
    pub searchparams1: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams1: usize,
    pub searchparams2: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams2: usize,
    pub searchattrs: attrlist,
}
#[test]
fn bindgen_test_layout_fssearchblock() {
    const UNINIT: ::std::mem::MaybeUninit<fssearchblock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fssearchblock>(),
        104usize,
        concat!("Size of: ", stringify!(fssearchblock))
    );
    assert_eq!(
        ::std::mem::align_of::<fssearchblock>(),
        8usize,
        concat!("Alignment of ", stringify!(fssearchblock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnattrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(returnattrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnbuffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(returnbuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnbuffersize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(returnbuffersize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxmatches) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(maxmatches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timelimit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(timelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchparams1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(searchparams1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeofsearchparams1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(sizeofsearchparams1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchparams2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(searchparams2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeofsearchparams2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(sizeofsearchparams2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchattrs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fssearchblock),
            "::",
            stringify!(searchattrs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    pub ss_union_flags: u32,
    pub ss_union_layer: u32,
    pub ss_fsstate: [u_char; 548usize],
}
#[test]
fn bindgen_test_layout_searchstate() {
    const UNINIT: ::std::mem::MaybeUninit<searchstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<searchstate>(),
        556usize,
        concat!("Size of: ", stringify!(searchstate))
    );
    assert_eq!(
        ::std::mem::align_of::<searchstate>(),
        1usize,
        concat!("Alignment of ", stringify!(searchstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_union_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(searchstate),
            "::",
            stringify!(ss_union_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_union_layer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(searchstate),
            "::",
            stringify!(ss_union_layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_fsstate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(searchstate),
            "::",
            stringify!(ss_fsstate)
        )
    );
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_fsid() {
    const UNINIT: ::std::mem::MaybeUninit<fsid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsid>(),
        8usize,
        concat!("Size of: ", stringify!(fsid))
    );
    assert_eq!(
        ::std::mem::align_of::<fsid>(),
        4usize,
        concat!("Alignment of ", stringify!(fsid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsid), "::", stringify!(val))
    );
}
pub type fsid_t = fsid;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct secure_boot_cryptex_args {
    pub sbc_version: u_int32_t,
    pub sbc_4cc: u_int32_t,
    pub sbc_authentic_manifest_fd: ::std::os::raw::c_int,
    pub sbc_user_manifest_fd: ::std::os::raw::c_int,
    pub sbc_payload_fd: ::std::os::raw::c_int,
    pub sbc_flags: u_int64_t,
}
#[test]
fn bindgen_test_layout_secure_boot_cryptex_args() {
    const UNINIT: ::std::mem::MaybeUninit<secure_boot_cryptex_args> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<secure_boot_cryptex_args>(),
        28usize,
        concat!("Size of: ", stringify!(secure_boot_cryptex_args))
    );
    assert_eq!(
        ::std::mem::align_of::<secure_boot_cryptex_args>(),
        4usize,
        concat!("Alignment of ", stringify!(secure_boot_cryptex_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(secure_boot_cryptex_args),
            "::",
            stringify!(sbc_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_4cc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(secure_boot_cryptex_args),
            "::",
            stringify!(sbc_4cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_authentic_manifest_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(secure_boot_cryptex_args),
            "::",
            stringify!(sbc_authentic_manifest_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_user_manifest_fd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(secure_boot_cryptex_args),
            "::",
            stringify!(sbc_user_manifest_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_payload_fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(secure_boot_cryptex_args),
            "::",
            stringify!(sbc_payload_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(secure_boot_cryptex_args),
            "::",
            stringify!(sbc_flags)
        )
    );
}
pub type secure_boot_cryptex_args_t = secure_boot_cryptex_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union graft_args {
    pub max_size: [u_int8_t; 512usize],
    pub sbc_args: secure_boot_cryptex_args_t,
}
#[test]
fn bindgen_test_layout_graft_args() {
    const UNINIT: ::std::mem::MaybeUninit<graft_args> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<graft_args>(),
        512usize,
        concat!("Size of: ", stringify!(graft_args))
    );
    assert_eq!(
        ::std::mem::align_of::<graft_args>(),
        4usize,
        concat!("Alignment of ", stringify!(graft_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(graft_args),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbc_args) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(graft_args),
            "::",
            stringify!(sbc_args)
        )
    );
}
pub type graftdmg_args_un = graft_args;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount {
    _unused: [u8; 0],
}
pub type mount_t = *mut mount;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode {
    _unused: [u8; 0],
}
pub type vnode_t = *mut vnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs64 {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_statfs64() {
    const UNINIT: ::std::mem::MaybeUninit<statfs64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statfs64>(),
        2168usize,
        concat!("Size of: ", stringify!(statfs64))
    );
    assert_eq!(
        ::std::mem::align_of::<statfs64>(),
        8usize,
        concat!("Alignment of ", stringify!(statfs64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_iosize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_iosize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_owner) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_type) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fssubtype) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_fssubtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fstypename) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_fstypename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_mntonname) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_mntonname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_mntfromname) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_mntfromname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flags_ext) as usize - ptr as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_flags_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_reserved) as usize - ptr as usize },
        2140usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs64),
            "::",
            stringify!(f_reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_statfs() {
    const UNINIT: ::std::mem::MaybeUninit<statfs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statfs>(),
        2168usize,
        concat!("Size of: ", stringify!(statfs))
    );
    assert_eq!(
        ::std::mem::align_of::<statfs>(),
        8usize,
        concat!("Alignment of ", stringify!(statfs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_iosize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_iosize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_owner) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_type) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fssubtype) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_fssubtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fstypename) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_fstypename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_mntonname) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_mntonname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_mntfromname) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_mntfromname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flags_ext) as usize - ptr as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_flags_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_reserved) as usize - ptr as usize },
        2140usize,
        concat!(
            "Offset of field: ",
            stringify!(statfs),
            "::",
            stringify!(f_reserved)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vfsstatfs {
    pub f_bsize: u32,
    pub f_iosize: usize,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_bused: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_flags: u64,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_fssubtype: u32,
    pub f_reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_vfsstatfs() {
    const UNINIT: ::std::mem::MaybeUninit<vfsstatfs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vfsstatfs>(),
        2164usize,
        concat!("Size of: ", stringify!(vfsstatfs))
    );
    assert_eq!(
        ::std::mem::align_of::<vfsstatfs>(),
        4usize,
        concat!("Alignment of ", stringify!(vfsstatfs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_iosize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_iosize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bused) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_bused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_owner) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fstypename) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_fstypename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_mntonname) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_mntonname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_mntfromname) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_mntfromname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fssubtype) as usize - ptr as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_fssubtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_reserved) as usize - ptr as usize },
        2148usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsstatfs),
            "::",
            stringify!(f_reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsconf {
    pub vfc_reserved1: u32,
    pub vfc_name: [::std::os::raw::c_char; 15usize],
    pub vfc_typenum: ::std::os::raw::c_int,
    pub vfc_refcount: ::std::os::raw::c_int,
    pub vfc_flags: ::std::os::raw::c_int,
    pub vfc_reserved2: u32,
    pub vfc_reserved3: u32,
}
#[test]
fn bindgen_test_layout_vfsconf() {
    const UNINIT: ::std::mem::MaybeUninit<vfsconf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vfsconf>(),
        40usize,
        concat!("Size of: ", stringify!(vfsconf))
    );
    assert_eq!(
        ::std::mem::align_of::<vfsconf>(),
        4usize,
        concat!("Alignment of ", stringify!(vfsconf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_typenum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_typenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_reserved2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vfc_reserved3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsconf),
            "::",
            stringify!(vfc_reserved3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsidctl {
    pub vc_vers: ::std::os::raw::c_int,
    pub vc_fsid: fsid_t,
    pub vc_ptr: *mut ::std::os::raw::c_void,
    pub vc_len: usize,
    pub vc_spare: [u_int32_t; 12usize],
}
#[test]
fn bindgen_test_layout_vfsidctl() {
    const UNINIT: ::std::mem::MaybeUninit<vfsidctl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vfsidctl>(),
        80usize,
        concat!("Size of: ", stringify!(vfsidctl))
    );
    assert_eq!(
        ::std::mem::align_of::<vfsidctl>(),
        8usize,
        concat!("Alignment of ", stringify!(vfsidctl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_vers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsidctl),
            "::",
            stringify!(vc_vers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_fsid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsidctl),
            "::",
            stringify!(vc_fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsidctl),
            "::",
            stringify!(vc_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsidctl),
            "::",
            stringify!(vc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_spare) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsidctl),
            "::",
            stringify!(vc_spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsquery {
    pub vq_flags: u_int32_t,
    pub vq_spare: [u_int32_t; 31usize],
}
#[test]
fn bindgen_test_layout_vfsquery() {
    const UNINIT: ::std::mem::MaybeUninit<vfsquery> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vfsquery>(),
        128usize,
        concat!("Size of: ", stringify!(vfsquery))
    );
    assert_eq!(
        ::std::mem::align_of::<vfsquery>(),
        4usize,
        concat!("Alignment of ", stringify!(vfsquery))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vq_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsquery),
            "::",
            stringify!(vq_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vq_spare) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vfsquery),
            "::",
            stringify!(vq_spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_server {
    pub vs_minutes: i32,
    pub vs_server_name: [u_int8_t; 768usize],
}
#[test]
fn bindgen_test_layout_vfs_server() {
    const UNINIT: ::std::mem::MaybeUninit<vfs_server> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vfs_server>(),
        772usize,
        concat!("Size of: ", stringify!(vfs_server))
    );
    assert_eq!(
        ::std::mem::align_of::<vfs_server>(),
        4usize,
        concat!("Alignment of ", stringify!(vfs_server))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs_minutes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vfs_server),
            "::",
            stringify!(vs_minutes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs_server_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vfs_server),
            "::",
            stringify!(vs_server_name)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct netfs_status {
    pub ns_status: u_int32_t,
    pub ns_mountopts: [::std::os::raw::c_char; 512usize],
    pub ns_waittime: u32,
    pub ns_threadcount: u32,
    pub ns_threadids: __IncompleteArrayField<u64>,
}
#[test]
fn bindgen_test_layout_netfs_status() {
    const UNINIT: ::std::mem::MaybeUninit<netfs_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<netfs_status>(),
        528usize,
        concat!("Size of: ", stringify!(netfs_status))
    );
    assert_eq!(
        ::std::mem::align_of::<netfs_status>(),
        8usize,
        concat!("Alignment of ", stringify!(netfs_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netfs_status),
            "::",
            stringify!(ns_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_mountopts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(netfs_status),
            "::",
            stringify!(ns_mountopts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_waittime) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(netfs_status),
            "::",
            stringify!(ns_waittime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_threadcount) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(netfs_status),
            "::",
            stringify!(ns_threadcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ns_threadids) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(netfs_status),
            "::",
            stringify!(ns_threadids)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fhandle {
    pub fh_len: ::std::os::raw::c_uint,
    pub fh_data: [::std::os::raw::c_uchar; 128usize],
}
#[test]
fn bindgen_test_layout_fhandle() {
    const UNINIT: ::std::mem::MaybeUninit<fhandle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fhandle>(),
        132usize,
        concat!("Size of: ", stringify!(fhandle))
    );
    assert_eq!(
        ::std::mem::align_of::<fhandle>(),
        4usize,
        concat!("Alignment of ", stringify!(fhandle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fhandle),
            "::",
            stringify!(fh_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh_data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fhandle),
            "::",
            stringify!(fh_data)
        )
    );
}
pub type fhandle_t = fhandle;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_BOOT: graftdmg_type_t = 1;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_PREBOOT: graftdmg_type_t = 2;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_DOWNLEVEL: graftdmg_type_t = 3;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_PDI_NONCE: graftdmg_type_t = 6;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_EFFECTIVE_AP: graftdmg_type_t = 7;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_MAX: graftdmg_type_t = 7;
pub type graftdmg_type_t = u32;
pub const cryptex_auth_type_t_CRYPTEX1_AUTH_ENV_GENERIC: cryptex_auth_type_t = 4;
pub const cryptex_auth_type_t_CRYPTEX1_AUTH_ENV_GENERIC_SUPPLEMENTAL: cryptex_auth_type_t = 5;
pub const cryptex_auth_type_t_CRYPTEX_AUTH_PDI_NONCE: cryptex_auth_type_t = 6;
pub const cryptex_auth_type_t_CRYPTEX_AUTH_MAX: cryptex_auth_type_t = 7;
pub type cryptex_auth_type_t = u32;
extern "C" {
    pub fn fhopen(arg1: *const fhandle, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatfs$INODE64"]
    pub fn fstatfs(arg1: ::std::os::raw::c_int, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatfs64(arg1: ::std::os::raw::c_int, arg2: *mut statfs64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfh(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fhandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getfsstat$INODE64"]
    pub fn getfsstat(
        arg1: *mut statfs,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfsstat64(
        arg1: *mut statfs64,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmntinfo$INODE64"]
    pub fn getmntinfo(arg1: *mut *mut statfs, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmntinfo_r_np$INODE64"]
    pub fn getmntinfo_r_np(
        arg1: *mut *mut statfs,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo64(
        arg1: *mut *mut statfs64,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statfs$INODE64"]
    pub fn statfs(arg1: *const ::std::os::raw::c_char, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statfs64(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statfs64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvfsbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut vfsconf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
#[test]
fn bindgen_test_layout_tms() {
    const UNINIT: ::std::mem::MaybeUninit<tms> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tms>(),
        32usize,
        concat!("Size of: ", stringify!(tms))
    );
    assert_eq!(
        ::std::mem::align_of::<tms>(),
        8usize,
        concat!("Alignment of ", stringify!(tms))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tms_utime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tms_stime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tms_cutime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_cutime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tms_cstime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_cstime)
        )
    );
}
extern "C" {
    pub fn times(arg1: *mut tms) -> clock_t;
}
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        24usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[test]
fn bindgen_test_layout_flocktimeout() {
    const UNINIT: ::std::mem::MaybeUninit<flocktimeout> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flocktimeout>(),
        40usize,
        concat!("Size of: ", stringify!(flocktimeout))
    );
    assert_eq!(
        ::std::mem::align_of::<flocktimeout>(),
        8usize,
        concat!("Alignment of ", stringify!(flocktimeout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_radvisory() {
    const UNINIT: ::std::mem::MaybeUninit<radvisory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<radvisory>(),
        16usize,
        concat!("Size of: ", stringify!(radvisory))
    );
    assert_eq!(
        ::std::mem::align_of::<radvisory>(),
        8usize,
        concat!("Alignment of ", stringify!(radvisory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ra_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ra_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsignatures() {
    const UNINIT: ::std::mem::MaybeUninit<fsignatures> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsignatures>(),
        56usize,
        concat!("Size of: ", stringify!(fsignatures))
    );
    assert_eq!(
        ::std::mem::align_of::<fsignatures>(),
        8usize,
        concat!("Alignment of ", stringify!(fsignatures))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_file_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_fsignatures_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_fsignatures_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_cdhash) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_cdhash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_hash_type) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_hash_type)
        )
    );
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsupplement() {
    const UNINIT: ::std::mem::MaybeUninit<fsupplement> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsupplement>(),
        32usize,
        concat!("Size of: ", stringify!(fsupplement))
    );
    assert_eq!(
        ::std::mem::align_of::<fsupplement>(),
        8usize,
        concat!("Alignment of ", stringify!(fsupplement))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_file_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_blob_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_blob_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_orig_fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_orig_fd)
        )
    );
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fchecklv() {
    const UNINIT: ::std::mem::MaybeUninit<fchecklv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fchecklv>(),
        24usize,
        concat!("Size of: ", stringify!(fchecklv))
    );
    assert_eq!(
        ::std::mem::align_of::<fchecklv>(),
        8usize,
        concat!("Alignment of ", stringify!(fchecklv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_file_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_file_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_error_message_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_error_message) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message)
        )
    );
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fgetsigsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<fgetsigsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fgetsigsinfo>(),
        16usize,
        concat!("Size of: ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<fgetsigsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_file_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_file_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_info_request) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_info_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_sig_is_platform) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_sig_is_platform)
        )
    );
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[test]
fn bindgen_test_layout_fstore() {
    const UNINIT: ::std::mem::MaybeUninit<fstore> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fstore>(),
        32usize,
        concat!("Size of: ", stringify!(fstore))
    );
    assert_eq!(
        ::std::mem::align_of::<fstore>(),
        8usize,
        concat!("Alignment of ", stringify!(fstore))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_posmode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_posmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fst_bytesalloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_bytesalloc)
        )
    );
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[test]
fn bindgen_test_layout_fpunchhole() {
    const UNINIT: ::std::mem::MaybeUninit<fpunchhole> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fpunchhole>(),
        24usize,
        concat!("Size of: ", stringify!(fpunchhole))
    );
    assert_eq!(
        ::std::mem::align_of::<fpunchhole>(),
        8usize,
        concat!("Alignment of ", stringify!(fpunchhole))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_length)
        )
    );
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[test]
fn bindgen_test_layout_ftrimactivefile() {
    const UNINIT: ::std::mem::MaybeUninit<ftrimactivefile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ftrimactivefile>(),
        16usize,
        concat!("Size of: ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        ::std::mem::align_of::<ftrimactivefile>(),
        8usize,
        concat!("Alignment of ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fta_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fta_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_length)
        )
    );
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[test]
fn bindgen_test_layout_fspecread() {
    const UNINIT: ::std::mem::MaybeUninit<fspecread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fspecread>(),
        24usize,
        concat!("Size of: ", stringify!(fspecread))
    );
    assert_eq!(
        ::std::mem::align_of::<fspecread>(),
        8usize,
        concat!("Alignment of ", stringify!(fspecread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsr_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_length)
        )
    );
}
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fattributiontag {
    pub ft_flags: ::std::os::raw::c_uint,
    pub ft_hash: ::std::os::raw::c_ulonglong,
    pub ft_attribution_name: [::std::os::raw::c_char; 255usize],
}
#[test]
fn bindgen_test_layout_fattributiontag() {
    const UNINIT: ::std::mem::MaybeUninit<fattributiontag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fattributiontag>(),
        272usize,
        concat!("Size of: ", stringify!(fattributiontag))
    );
    assert_eq!(
        ::std::mem::align_of::<fattributiontag>(),
        8usize,
        concat!("Alignment of ", stringify!(fattributiontag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ft_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fattributiontag),
            "::",
            stringify!(ft_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ft_hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fattributiontag),
            "::",
            stringify!(ft_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ft_attribution_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fattributiontag),
            "::",
            stringify!(ft_attribution_name)
        )
    );
}
pub type fattributiontag_t = fattributiontag;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[test]
fn bindgen_test_layout_log2phys() {
    const UNINIT: ::std::mem::MaybeUninit<log2phys> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<log2phys>(),
        20usize,
        concat!("Size of: ", stringify!(log2phys))
    );
    assert_eq!(
        ::std::mem::align_of::<log2phys>(),
        4usize,
        concat!("Alignment of ", stringify!(log2phys))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2p_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2p_contigbytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_contigbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2p_devoffset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_devoffset)
        )
    );
}
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
#[test]
fn bindgen_test_layout_sa_endpoints() {
    const UNINIT: ::std::mem::MaybeUninit<sa_endpoints> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sa_endpoints>(),
        40usize,
        concat!("Size of: ", stringify!(sa_endpoints))
    );
    assert_eq!(
        ::std::mem::align_of::<sa_endpoints>(),
        8usize,
        concat!("Alignment of ", stringify!(sa_endpoints))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sae_srcif) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcif)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sae_srcaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sae_srcaddrlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcaddrlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sae_dstaddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_dstaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sae_dstaddrlen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_dstaddrlen)
        )
    );
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[test]
fn bindgen_test_layout_so_np_extensions() {
    const UNINIT: ::std::mem::MaybeUninit<so_np_extensions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<so_np_extensions>(),
        8usize,
        concat!("Size of: ", stringify!(so_np_extensions))
    );
    assert_eq!(
        ::std::mem::align_of::<so_np_extensions>(),
        4usize,
        concat!("Alignment of ", stringify!(so_np_extensions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npx_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(so_np_extensions),
            "::",
            stringify!(npx_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npx_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(so_np_extensions),
            "::",
            stringify!(npx_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        1usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[test]
fn bindgen_test_layout___sockaddr_header() {
    const UNINIT: ::std::mem::MaybeUninit<__sockaddr_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sockaddr_header>(),
        2usize,
        concat!("Size of: ", stringify!(__sockaddr_header))
    );
    assert_eq!(
        ::std::mem::align_of::<__sockaddr_header>(),
        1usize,
        concat!("Alignment of ", stringify!(__sockaddr_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sockaddr_header),
            "::",
            stringify!(sa_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__sockaddr_header),
            "::",
            stringify!(sa_family)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[test]
fn bindgen_test_layout_sockproto() {
    const UNINIT: ::std::mem::MaybeUninit<sockproto> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockproto>(),
        4usize,
        concat!("Size of: ", stringify!(sockproto))
    );
    assert_eq!(
        ::std::mem::align_of::<sockproto>(),
        2usize,
        concat!("Alignment of ", stringify!(sockproto))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_protocol) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_protocol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_pad2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        48usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        12usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sf_hdtr() {
    const UNINIT: ::std::mem::MaybeUninit<sf_hdtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sf_hdtr>(),
        32usize,
        concat!("Size of: ", stringify!(sf_hdtr))
    );
    assert_eq!(
        ::std::mem::align_of::<sf_hdtr>(),
        8usize,
        concat!("Alignment of ", stringify!(sf_hdtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(hdr_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trailers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trl_cnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trl_cnt)
        )
    );
}
extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    const UNINIT: ::std::mem::MaybeUninit<winsize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_row) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_col) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_xpixel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_ypixel) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_ttysize() {
    const UNINIT: ::std::mem::MaybeUninit<ttysize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ttysize>(),
        8usize,
        concat!("Size of: ", stringify!(ttysize))
    );
    assert_eq!(
        ::std::mem::align_of::<ttysize>(),
        2usize,
        concat!("Alignment of ", stringify!(ttysize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts_lines) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts_cols) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts_xxx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_xxx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts_yyy) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_yyy)
        )
    );
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    const UNINIT: ::std::mem::MaybeUninit<ip_opts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_opts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreqn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq_source> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        132usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        4usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_source_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        260usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        4usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
#[test]
fn bindgen_test_layout___msfilterreq() {
    const UNINIT: ::std::mem::MaybeUninit<__msfilterreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__msfilterreq>(),
        152usize,
        concat!("Size of: ", stringify!(__msfilterreq))
    );
    assert_eq!(
        ::std::mem::align_of::<__msfilterreq>(),
        4usize,
        concat!("Alignment of ", stringify!(__msfilterreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msfr_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msfr_fmode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msfr_nsrcs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_nsrcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__msfr_align) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(__msfr_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msfr_group) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msfr_srcs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_srcs)
        )
    );
}
extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__u6_addr)
        )
    );
}
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ipv6_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_interface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_in6_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in6_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_pktinfo>(),
        20usize,
        concat!("Size of: ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi6_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi6_ifindex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
#[test]
fn bindgen_test_layout_ip6_mtuinfo() {
    const UNINIT: ::std::mem::MaybeUninit<ip6_mtuinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip6_mtuinfo>(),
        32usize,
        concat!("Size of: ", stringify!(ip6_mtuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ip6_mtuinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ip6_mtuinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip6m_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip6_mtuinfo),
            "::",
            stringify!(ip6m_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip6m_mtu) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ip6_mtuinfo),
            "::",
            stringify!(ip6m_mtu)
        )
    );
}
extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type kern_return_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qelem {
    pub q_forw: *mut qelem,
    pub q_back: *mut qelem,
    pub q_data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_qelem() {
    const UNINIT: ::std::mem::MaybeUninit<qelem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<qelem>(),
        24usize,
        concat!("Size of: ", stringify!(qelem))
    );
    assert_eq!(
        ::std::mem::align_of::<qelem>(),
        8usize,
        concat!("Alignment of ", stringify!(qelem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q_forw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qelem),
            "::",
            stringify!(q_forw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q_back) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(qelem),
            "::",
            stringify!(q_back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(qelem),
            "::",
            stringify!(q_data)
        )
    );
}
extern "C" {
    pub fn map_fd(
        fd: ::std::os::raw::c_int,
        offset: vm_offset_t,
        addr: *mut vm_offset_t,
        find_space: boolean_t,
        numbytes: vm_size_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        1048usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_seekoff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_seekoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_namlen) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_namlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    const UNINIT: ::std::mem::MaybeUninit<DIR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_loc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_seek) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__padding) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_lock) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dd_td) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opendir$INODE64"]
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_readdir$INODE64"]
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    #[link_name = "\u{1}_readdir_r$INODE64"]
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewinddir$INODE64"]
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    #[link_name = "\u{1}_seekdir$INODE64"]
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_telldir$INODE64"]
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fdopendir$INODE64"]
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_alphasort$INODE64"]
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir$INODE64"]
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir_b$INODE64"]
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___opendir2$INODE64"]
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
#[test]
fn bindgen_test_layout_passwd() {
    const UNINIT: ::std::mem::MaybeUninit<passwd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        72usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_passwd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_change) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_class) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gecos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_dir) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_shell) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_expire) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_expire)
        )
    );
}
extern "C" {
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_compare(
        uu1: *mut ::std::os::raw::c_uchar,
        uu2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_is_null(uu: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(
        in_: *mut ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_unparse(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_lower(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_upper(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
extern "C" {
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn longjmperror();
}
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_ulong;
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st {
    _unused: [u8; 0],
}
pub type WINDOW = _win_st;
pub type attr_t = chtype;
pub type NCURSES_OUTC = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_get(
        arg1: *mut attr_t,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baudrate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgdset(arg1: chtype);
}
extern "C" {
    pub fn border(
        arg1: chtype,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_box"]
    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color() -> bool;
}
extern "C" {
    pub fn cbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chgat(
        arg1: ::std::os::raw::c_int,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtobot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtoeol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_set(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copywin(
        arg1: *const WINDOW,
        arg2: *mut WINDOW,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delscreen(arg1: *mut SCREEN);
}
extern "C" {
    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn derwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn doupdate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn echo() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erase() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter();
}
extern "C" {
    pub fn flash() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors() -> bool;
}
extern "C" {
    pub fn has_ic() -> bool;
}
extern "C" {
    pub fn has_il() -> bool;
}
extern "C" {
    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idcok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn immedok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn inch() -> chtype;
}
extern "C" {
    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initscr() -> *mut WINDOW;
}
extern "C" {
    pub fn init_color(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin() -> bool;
}
extern "C" {
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
}
extern "C" {
    pub fn keyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_move"]
    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvchgat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: attr_t,
        arg5: ::std::os::raw::c_short,
        arg6: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvcur(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvdelch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvderwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> chtype;
}
extern "C" {
    pub fn mvinchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvprintw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvscanw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: attr_t,
        arg6: ::std::os::raw::c_short,
        arg7: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwdelch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> chtype;
}
extern "C" {
    pub fn mvwinchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwprintw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwscanw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut FILE,
    ) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn nl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush();
}
extern "C" {
    pub fn noraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pnoutrefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush();
}
extern "C" {
    pub fn raw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ripoffline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WINDOW,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanw(arg1: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_dump(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setscrreg(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
}
extern "C" {
    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr() -> attr_t;
}
extern "C" {
    pub fn slk_attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standout() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standend() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subpad(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn subwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs() -> chtype;
}
extern "C" {
    pub fn termname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timeout(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn touchline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env(arg1: bool);
}
extern "C" {
    pub fn use_tioctl(arg1: bool);
}
extern "C" {
    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs(arg1: chtype, arg2: NCURSES_OUTC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_printw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_scanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchnstr(
        arg1: *mut WINDOW,
        arg2: *const chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_get(
        arg1: *mut WINDOW,
        arg2: *mut attr_t,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_on(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_off(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_set(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
}
extern "C" {
    pub fn wborder(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
        arg9: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: attr_t,
        arg4: ::std::os::raw::c_short,
        arg5: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcolor_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcursyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winch(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn winchnstr(
        arg1: *mut WINDOW,
        arg2: *mut chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmove(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wredrawln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsetscrreg(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsyncdown(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wsyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wtouchln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wvline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _nc_tiparm(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tigetflag(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm(arg1: *mut ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tiparm(arg1: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tiparm_s(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
pub type NCURSES_WINDOW_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_SCREEN_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn is_term_resized(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn keybound(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curses_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn assume_default_colors(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_escdelay() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_defined(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resize_term(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_screen(
        arg1: *mut SCREEN,
        arg2: NCURSES_SCREEN_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_window(
        arg1: *mut WINDOW,
        arg2: NCURSES_WINDOW_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wresize(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter();
}
extern "C" {
    pub fn wgetparent(arg1: *const WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn is_cleared(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idcok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idlok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_immedok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_keypad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_leaveok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_nodelay(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_notimeout(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_pad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_scrollok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_subwin(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_syncok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn wgetdelay(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetscrreg(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
#[test]
fn bindgen_test_layout_MEVENT() {
    const UNINIT: ::std::mem::MaybeUninit<MEVENT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MEVENT>(),
        24usize,
        concat!("Size of: ", stringify!(MEVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<MEVENT>(),
        8usize,
        concat!("Alignment of ", stringify!(MEVENT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MEVENT),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bstate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MEVENT),
            "::",
            stringify!(bstate)
        )
    );
}
extern "C" {
    pub fn has_mouse() -> bool;
}
extern "C" {
    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn wenclose(
        arg1: *const WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn mouseinterval(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmouse_trafo(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: bool,
    ) -> bool;
}
extern "C" {
    pub fn mouse_trafo(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: bool,
    ) -> bool;
}
extern "C" {
    pub fn mcprint(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unctrl(arg1: chtype) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    const UNINIT: ::std::mem::MaybeUninit<lconv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimal_point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thousands_sep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grouping) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_curr_symbol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_decimal_point) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_thousands_sep) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_grouping) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive_sign) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative_sign) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_frac_digits) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frac_digits) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_cs_precedes) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sep_by_space) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_cs_precedes) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sep_by_space) as usize - ptr as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sign_posn) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sign_posn) as usize - ptr as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_cs_precedes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_cs_precedes) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sep_by_space) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sep_by_space) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sign_posn) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sign_posn) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type char_u = ::std::os::raw::c_uchar;
pub type short_u = ::std::os::raw::c_ushort;
pub type int_u = ::std::os::raw::c_uint;
pub type long_long_T = ::std::os::raw::c_longlong;
pub type long_long_u_T = ::std::os::raw::c_ulonglong;
pub type long_u = ::std::os::raw::c_ulong;
pub type long_i = ::std::os::raw::c_long;
pub type off_T = off_t;
pub type schar_T = char_u;
pub type sattr_T = ::std::os::raw::c_ushort;
pub type u8char_T = ::std::os::raw::c_uint;
pub const key_extra_KE_NAME: key_extra = 3;
pub const key_extra_KE_S_UP: key_extra = 4;
pub const key_extra_KE_S_DOWN: key_extra = 5;
pub const key_extra_KE_S_F1: key_extra = 6;
pub const key_extra_KE_S_F2: key_extra = 7;
pub const key_extra_KE_S_F3: key_extra = 8;
pub const key_extra_KE_S_F4: key_extra = 9;
pub const key_extra_KE_S_F5: key_extra = 10;
pub const key_extra_KE_S_F6: key_extra = 11;
pub const key_extra_KE_S_F7: key_extra = 12;
pub const key_extra_KE_S_F8: key_extra = 13;
pub const key_extra_KE_S_F9: key_extra = 14;
pub const key_extra_KE_S_F10: key_extra = 15;
pub const key_extra_KE_S_F11: key_extra = 16;
pub const key_extra_KE_S_F12: key_extra = 17;
pub const key_extra_KE_S_F13: key_extra = 18;
pub const key_extra_KE_S_F14: key_extra = 19;
pub const key_extra_KE_S_F15: key_extra = 20;
pub const key_extra_KE_S_F16: key_extra = 21;
pub const key_extra_KE_S_F17: key_extra = 22;
pub const key_extra_KE_S_F18: key_extra = 23;
pub const key_extra_KE_S_F19: key_extra = 24;
pub const key_extra_KE_S_F20: key_extra = 25;
pub const key_extra_KE_S_F21: key_extra = 26;
pub const key_extra_KE_S_F22: key_extra = 27;
pub const key_extra_KE_S_F23: key_extra = 28;
pub const key_extra_KE_S_F24: key_extra = 29;
pub const key_extra_KE_S_F25: key_extra = 30;
pub const key_extra_KE_S_F26: key_extra = 31;
pub const key_extra_KE_S_F27: key_extra = 32;
pub const key_extra_KE_S_F28: key_extra = 33;
pub const key_extra_KE_S_F29: key_extra = 34;
pub const key_extra_KE_S_F30: key_extra = 35;
pub const key_extra_KE_S_F31: key_extra = 36;
pub const key_extra_KE_S_F32: key_extra = 37;
pub const key_extra_KE_S_F33: key_extra = 38;
pub const key_extra_KE_S_F34: key_extra = 39;
pub const key_extra_KE_S_F35: key_extra = 40;
pub const key_extra_KE_S_F36: key_extra = 41;
pub const key_extra_KE_S_F37: key_extra = 42;
pub const key_extra_KE_MOUSE: key_extra = 43;
pub const key_extra_KE_LEFTMOUSE: key_extra = 44;
pub const key_extra_KE_LEFTDRAG: key_extra = 45;
pub const key_extra_KE_LEFTRELEASE: key_extra = 46;
pub const key_extra_KE_MIDDLEMOUSE: key_extra = 47;
pub const key_extra_KE_MIDDLEDRAG: key_extra = 48;
pub const key_extra_KE_MIDDLERELEASE: key_extra = 49;
pub const key_extra_KE_RIGHTMOUSE: key_extra = 50;
pub const key_extra_KE_RIGHTDRAG: key_extra = 51;
pub const key_extra_KE_RIGHTRELEASE: key_extra = 52;
pub const key_extra_KE_IGNORE: key_extra = 53;
pub const key_extra_KE_TAB: key_extra = 54;
pub const key_extra_KE_S_TAB_OLD: key_extra = 55;
pub const key_extra_KE_SNIFF_UNUSED: key_extra = 56;
pub const key_extra_KE_XF1: key_extra = 57;
pub const key_extra_KE_XF2: key_extra = 58;
pub const key_extra_KE_XF3: key_extra = 59;
pub const key_extra_KE_XF4: key_extra = 60;
pub const key_extra_KE_XEND: key_extra = 61;
pub const key_extra_KE_ZEND: key_extra = 62;
pub const key_extra_KE_XHOME: key_extra = 63;
pub const key_extra_KE_ZHOME: key_extra = 64;
pub const key_extra_KE_XUP: key_extra = 65;
pub const key_extra_KE_XDOWN: key_extra = 66;
pub const key_extra_KE_XLEFT: key_extra = 67;
pub const key_extra_KE_XRIGHT: key_extra = 68;
pub const key_extra_KE_LEFTMOUSE_NM: key_extra = 69;
pub const key_extra_KE_LEFTRELEASE_NM: key_extra = 70;
pub const key_extra_KE_S_XF1: key_extra = 71;
pub const key_extra_KE_S_XF2: key_extra = 72;
pub const key_extra_KE_S_XF3: key_extra = 73;
pub const key_extra_KE_S_XF4: key_extra = 74;
pub const key_extra_KE_MOUSEDOWN: key_extra = 75;
pub const key_extra_KE_MOUSEUP: key_extra = 76;
pub const key_extra_KE_MOUSELEFT: key_extra = 77;
pub const key_extra_KE_MOUSERIGHT: key_extra = 78;
pub const key_extra_KE_KINS: key_extra = 79;
pub const key_extra_KE_KDEL: key_extra = 80;
pub const key_extra_KE_CSI: key_extra = 81;
pub const key_extra_KE_SNR: key_extra = 82;
pub const key_extra_KE_PLUG: key_extra = 83;
pub const key_extra_KE_CMDWIN: key_extra = 84;
pub const key_extra_KE_C_LEFT: key_extra = 85;
pub const key_extra_KE_C_RIGHT: key_extra = 86;
pub const key_extra_KE_C_HOME: key_extra = 87;
pub const key_extra_KE_C_END: key_extra = 88;
pub const key_extra_KE_X1MOUSE: key_extra = 89;
pub const key_extra_KE_X1DRAG: key_extra = 90;
pub const key_extra_KE_X1RELEASE: key_extra = 91;
pub const key_extra_KE_X2MOUSE: key_extra = 92;
pub const key_extra_KE_X2DRAG: key_extra = 93;
pub const key_extra_KE_X2RELEASE: key_extra = 94;
pub const key_extra_KE_DROP: key_extra = 95;
pub const key_extra_KE_CURSORHOLD: key_extra = 96;
pub const key_extra_KE_NOP: key_extra = 97;
pub const key_extra_KE_FOCUSGAINED: key_extra = 98;
pub const key_extra_KE_FOCUSLOST: key_extra = 99;
pub const key_extra_KE_MOUSEMOVE: key_extra = 100;
pub const key_extra_KE_CANCEL: key_extra = 101;
pub type key_extra = ::std::os::raw::c_uint;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    pub fn __inff() -> f32;
}
extern "C" {
    pub fn __inf() -> f64;
}
extern "C" {
    pub fn __infl() -> u128;
}
extern "C" {
    pub fn __nan() -> f32;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[test]
fn bindgen_test_layout___float2() {
    const UNINIT: ::std::mem::MaybeUninit<__float2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__float2>(),
        8usize,
        concat!("Size of: ", stringify!(__float2))
    );
    assert_eq!(
        ::std::mem::align_of::<__float2>(),
        4usize,
        concat!("Alignment of ", stringify!(__float2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__cosval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[test]
fn bindgen_test_layout___double2() {
    const UNINIT: ::std::mem::MaybeUninit<__double2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__double2>(),
        16usize,
        concat!("Size of: ", stringify!(__double2))
    );
    assert_eq!(
        ::std::mem::align_of::<__double2>(),
        8usize,
        concat!("Alignment of ", stringify!(__double2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__cosval)
        )
    );
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    const UNINIT: ::std::mem::MaybeUninit<exception> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
pub const SpecialKey_KS_NAME: SpecialKey = 0;
pub const SpecialKey_KS_CE: SpecialKey = 1;
pub const SpecialKey_KS_AL: SpecialKey = 2;
pub const SpecialKey_KS_CAL: SpecialKey = 3;
pub const SpecialKey_KS_DL: SpecialKey = 4;
pub const SpecialKey_KS_CDL: SpecialKey = 5;
pub const SpecialKey_KS_CS: SpecialKey = 6;
pub const SpecialKey_KS_CL: SpecialKey = 7;
pub const SpecialKey_KS_CD: SpecialKey = 8;
pub const SpecialKey_KS_UT: SpecialKey = 9;
pub const SpecialKey_KS_DA: SpecialKey = 10;
pub const SpecialKey_KS_DB: SpecialKey = 11;
pub const SpecialKey_KS_VI: SpecialKey = 12;
pub const SpecialKey_KS_VE: SpecialKey = 13;
pub const SpecialKey_KS_VS: SpecialKey = 14;
pub const SpecialKey_KS_CVS: SpecialKey = 15;
pub const SpecialKey_KS_CSH: SpecialKey = 16;
pub const SpecialKey_KS_CRC: SpecialKey = 17;
pub const SpecialKey_KS_CRS: SpecialKey = 18;
pub const SpecialKey_KS_ME: SpecialKey = 19;
pub const SpecialKey_KS_MR: SpecialKey = 20;
pub const SpecialKey_KS_MD: SpecialKey = 21;
pub const SpecialKey_KS_SE: SpecialKey = 22;
pub const SpecialKey_KS_SO: SpecialKey = 23;
pub const SpecialKey_KS_CZH: SpecialKey = 24;
pub const SpecialKey_KS_CZR: SpecialKey = 25;
pub const SpecialKey_KS_UE: SpecialKey = 26;
pub const SpecialKey_KS_US: SpecialKey = 27;
pub const SpecialKey_KS_UCE: SpecialKey = 28;
pub const SpecialKey_KS_UCS: SpecialKey = 29;
pub const SpecialKey_KS_STE: SpecialKey = 30;
pub const SpecialKey_KS_STS: SpecialKey = 31;
pub const SpecialKey_KS_MS: SpecialKey = 32;
pub const SpecialKey_KS_CM: SpecialKey = 33;
pub const SpecialKey_KS_SR: SpecialKey = 34;
pub const SpecialKey_KS_CRI: SpecialKey = 35;
pub const SpecialKey_KS_VB: SpecialKey = 36;
pub const SpecialKey_KS_KS: SpecialKey = 37;
pub const SpecialKey_KS_KE: SpecialKey = 38;
pub const SpecialKey_KS_TI: SpecialKey = 39;
pub const SpecialKey_KS_TE: SpecialKey = 40;
pub const SpecialKey_KS_BC: SpecialKey = 41;
pub const SpecialKey_KS_CCS: SpecialKey = 42;
pub const SpecialKey_KS_CCO: SpecialKey = 43;
pub const SpecialKey_KS_CSF: SpecialKey = 44;
pub const SpecialKey_KS_CSB: SpecialKey = 45;
pub const SpecialKey_KS_XS: SpecialKey = 46;
pub const SpecialKey_KS_XN: SpecialKey = 47;
pub const SpecialKey_KS_MB: SpecialKey = 48;
pub const SpecialKey_KS_CAF: SpecialKey = 49;
pub const SpecialKey_KS_CAB: SpecialKey = 50;
pub const SpecialKey_KS_LE: SpecialKey = 51;
pub const SpecialKey_KS_ND: SpecialKey = 52;
pub const SpecialKey_KS_CIS: SpecialKey = 53;
pub const SpecialKey_KS_CIE: SpecialKey = 54;
pub const SpecialKey_KS_CSC: SpecialKey = 55;
pub const SpecialKey_KS_CEC: SpecialKey = 56;
pub const SpecialKey_KS_TS: SpecialKey = 57;
pub const SpecialKey_KS_FS: SpecialKey = 58;
pub const SpecialKey_KS_CWP: SpecialKey = 59;
pub const SpecialKey_KS_CGP: SpecialKey = 60;
pub const SpecialKey_KS_CWS: SpecialKey = 61;
pub const SpecialKey_KS_CRV: SpecialKey = 62;
pub const SpecialKey_KS_RFG: SpecialKey = 63;
pub const SpecialKey_KS_RBG: SpecialKey = 64;
pub const SpecialKey_KS_CSI: SpecialKey = 65;
pub const SpecialKey_KS_CEI: SpecialKey = 66;
pub const SpecialKey_KS_CSR: SpecialKey = 67;
pub const SpecialKey_KS_CSV: SpecialKey = 68;
pub const SpecialKey_KS_OP: SpecialKey = 69;
pub const SpecialKey_KS_U7: SpecialKey = 70;
pub const SpecialKey_KS_8F: SpecialKey = 71;
pub const SpecialKey_KS_8B: SpecialKey = 72;
pub const SpecialKey_KS_CBE: SpecialKey = 73;
pub const SpecialKey_KS_CBD: SpecialKey = 74;
pub const SpecialKey_KS_CPS: SpecialKey = 75;
pub const SpecialKey_KS_CPE: SpecialKey = 76;
pub const SpecialKey_KS_CST: SpecialKey = 77;
pub const SpecialKey_KS_CRT: SpecialKey = 78;
pub const SpecialKey_KS_SSI: SpecialKey = 79;
pub const SpecialKey_KS_SRI: SpecialKey = 80;
pub type SpecialKey = ::std::os::raw::c_uint;
extern "C" {
    pub static mut term_strings: [*mut char_u; 0usize];
}
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type wctrans_t = __darwin_wctrans_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(arg1: *const ::std::os::raw::c_char) -> wctrans_t;
}
pub type max_align_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
extern "C" {
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _c_locale: locale_t;
}
extern "C" {
    pub fn duplocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn localeconv_l(arg1: locale_t) -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn querylocale(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn ___runetype_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune_l(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctype_t;
}
extern "C" {
    pub fn strtoimax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn fprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> f64;
}
extern "C" {
    pub fn atoi_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mblen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtod_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtouq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasestr_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nextwctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn towctrans_l(arg1: wint_t, arg2: wctrans_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctrans_t;
}
extern "C" {
    pub static mut libintl_version: ::std::os::raw::c_int;
}
extern "C" {
    pub fn libintl_gettext(__msgid: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_ngettext(
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_dngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_dcngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_textdomain(
        __domainname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_bindtextdomain(
        __domainname: *const ::std::os::raw::c_char,
        __dirname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_bind_textdomain_codeset(
        __domainname: *const ::std::os::raw::c_char,
        __codeset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn libintl_newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn libintl_set_relocation_prefix(
        orig_prefix: *const ::std::os::raw::c_char,
        curr_prefix: *const ::std::os::raw::c_char,
    );
}
pub const btype_T_BVAL_NR: btype_T = 0;
pub const btype_T_BVAL_STRING: btype_T = 1;
pub const btype_T_BVAL_EMPTY: btype_T = 2;
pub type btype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bval_T {
    pub bv_type: btype_T,
    pub bv_nr: ::std::os::raw::c_long,
    pub bv_string: *mut char_u,
    pub bv_len: ::std::os::raw::c_int,
    pub bv_allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bval_T() {
    const UNINIT: ::std::mem::MaybeUninit<bval_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bval_T>(),
        32usize,
        concat!("Size of: ", stringify!(bval_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bval_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bval_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_nr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_allocated) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_allocated)
        )
    );
}
pub const auto_event_EVENT_BUFADD: auto_event = 0;
pub const auto_event_EVENT_BUFDELETE: auto_event = 1;
pub const auto_event_EVENT_BUFENTER: auto_event = 2;
pub const auto_event_EVENT_BUFFILEPOST: auto_event = 3;
pub const auto_event_EVENT_BUFFILEPRE: auto_event = 4;
pub const auto_event_EVENT_BUFHIDDEN: auto_event = 5;
pub const auto_event_EVENT_BUFLEAVE: auto_event = 6;
pub const auto_event_EVENT_BUFNEW: auto_event = 7;
pub const auto_event_EVENT_BUFNEWFILE: auto_event = 8;
pub const auto_event_EVENT_BUFREADCMD: auto_event = 9;
pub const auto_event_EVENT_BUFREADPOST: auto_event = 10;
pub const auto_event_EVENT_BUFREADPRE: auto_event = 11;
pub const auto_event_EVENT_BUFUNLOAD: auto_event = 12;
pub const auto_event_EVENT_BUFWINENTER: auto_event = 13;
pub const auto_event_EVENT_BUFWINLEAVE: auto_event = 14;
pub const auto_event_EVENT_BUFWIPEOUT: auto_event = 15;
pub const auto_event_EVENT_BUFWRITECMD: auto_event = 16;
pub const auto_event_EVENT_BUFWRITEPOST: auto_event = 17;
pub const auto_event_EVENT_BUFWRITEPRE: auto_event = 18;
pub const auto_event_EVENT_CMDLINECHANGED: auto_event = 19;
pub const auto_event_EVENT_CMDLINEENTER: auto_event = 20;
pub const auto_event_EVENT_CMDLINELEAVE: auto_event = 21;
pub const auto_event_EVENT_CMDUNDEFINED: auto_event = 22;
pub const auto_event_EVENT_CMDWINENTER: auto_event = 23;
pub const auto_event_EVENT_CMDWINLEAVE: auto_event = 24;
pub const auto_event_EVENT_COLORSCHEME: auto_event = 25;
pub const auto_event_EVENT_COLORSCHEMEPRE: auto_event = 26;
pub const auto_event_EVENT_COMPLETECHANGED: auto_event = 27;
pub const auto_event_EVENT_COMPLETEDONE: auto_event = 28;
pub const auto_event_EVENT_CURSORHOLD: auto_event = 29;
pub const auto_event_EVENT_CURSORHOLDI: auto_event = 30;
pub const auto_event_EVENT_CURSORMOVED: auto_event = 31;
pub const auto_event_EVENT_CURSORMOVEDI: auto_event = 32;
pub const auto_event_EVENT_DIFFUPDATED: auto_event = 33;
pub const auto_event_EVENT_DIRCHANGED: auto_event = 34;
pub const auto_event_EVENT_ENCODINGCHANGED: auto_event = 35;
pub const auto_event_EVENT_EXITPRE: auto_event = 36;
pub const auto_event_EVENT_FILEAPPENDCMD: auto_event = 37;
pub const auto_event_EVENT_FILEAPPENDPOST: auto_event = 38;
pub const auto_event_EVENT_FILEAPPENDPRE: auto_event = 39;
pub const auto_event_EVENT_FILECHANGEDRO: auto_event = 40;
pub const auto_event_EVENT_FILECHANGEDSHELL: auto_event = 41;
pub const auto_event_EVENT_FILECHANGEDSHELLPOST: auto_event = 42;
pub const auto_event_EVENT_FILEREADCMD: auto_event = 43;
pub const auto_event_EVENT_FILEREADPOST: auto_event = 44;
pub const auto_event_EVENT_FILEREADPRE: auto_event = 45;
pub const auto_event_EVENT_FILETYPE: auto_event = 46;
pub const auto_event_EVENT_FILEWRITECMD: auto_event = 47;
pub const auto_event_EVENT_FILEWRITEPOST: auto_event = 48;
pub const auto_event_EVENT_FILEWRITEPRE: auto_event = 49;
pub const auto_event_EVENT_FILTERREADPOST: auto_event = 50;
pub const auto_event_EVENT_FILTERREADPRE: auto_event = 51;
pub const auto_event_EVENT_FILTERWRITEPOST: auto_event = 52;
pub const auto_event_EVENT_FILTERWRITEPRE: auto_event = 53;
pub const auto_event_EVENT_FOCUSGAINED: auto_event = 54;
pub const auto_event_EVENT_FOCUSLOST: auto_event = 55;
pub const auto_event_EVENT_FUNCUNDEFINED: auto_event = 56;
pub const auto_event_EVENT_GUIENTER: auto_event = 57;
pub const auto_event_EVENT_GUIFAILED: auto_event = 58;
pub const auto_event_EVENT_INSERTCHANGE: auto_event = 59;
pub const auto_event_EVENT_INSERTCHARPRE: auto_event = 60;
pub const auto_event_EVENT_INSERTENTER: auto_event = 61;
pub const auto_event_EVENT_INSERTLEAVE: auto_event = 62;
pub const auto_event_EVENT_MENUPOPUP: auto_event = 63;
pub const auto_event_EVENT_OPTIONSET: auto_event = 64;
pub const auto_event_EVENT_QUICKFIXCMDPOST: auto_event = 65;
pub const auto_event_EVENT_QUICKFIXCMDPRE: auto_event = 66;
pub const auto_event_EVENT_QUITPRE: auto_event = 67;
pub const auto_event_EVENT_REMOTEREPLY: auto_event = 68;
pub const auto_event_EVENT_SESSIONLOADPOST: auto_event = 69;
pub const auto_event_EVENT_SHELLCMDPOST: auto_event = 70;
pub const auto_event_EVENT_SHELLFILTERPOST: auto_event = 71;
pub const auto_event_EVENT_SOURCECMD: auto_event = 72;
pub const auto_event_EVENT_SOURCEPRE: auto_event = 73;
pub const auto_event_EVENT_SOURCEPOST: auto_event = 74;
pub const auto_event_EVENT_SPELLFILEMISSING: auto_event = 75;
pub const auto_event_EVENT_STDINREADPOST: auto_event = 76;
pub const auto_event_EVENT_STDINREADPRE: auto_event = 77;
pub const auto_event_EVENT_SWAPEXISTS: auto_event = 78;
pub const auto_event_EVENT_SYNTAX: auto_event = 79;
pub const auto_event_EVENT_TABCLOSED: auto_event = 80;
pub const auto_event_EVENT_TABENTER: auto_event = 81;
pub const auto_event_EVENT_TABLEAVE: auto_event = 82;
pub const auto_event_EVENT_TABNEW: auto_event = 83;
pub const auto_event_EVENT_TERMCHANGED: auto_event = 84;
pub const auto_event_EVENT_TERMINALOPEN: auto_event = 85;
pub const auto_event_EVENT_TERMRESPONSE: auto_event = 86;
pub const auto_event_EVENT_TEXTCHANGED: auto_event = 87;
pub const auto_event_EVENT_TEXTCHANGEDI: auto_event = 88;
pub const auto_event_EVENT_TEXTCHANGEDP: auto_event = 89;
pub const auto_event_EVENT_TEXTYANKPOST: auto_event = 90;
pub const auto_event_EVENT_USER: auto_event = 91;
pub const auto_event_EVENT_VIMENTER: auto_event = 92;
pub const auto_event_EVENT_VIMLEAVE: auto_event = 93;
pub const auto_event_EVENT_VIMLEAVEPRE: auto_event = 94;
pub const auto_event_EVENT_VIMRESIZED: auto_event = 95;
pub const auto_event_EVENT_WINENTER: auto_event = 96;
pub const auto_event_EVENT_WINLEAVE: auto_event = 97;
pub const auto_event_EVENT_WINNEW: auto_event = 98;
pub const auto_event_NUM_EVENTS: auto_event = 99;
pub type auto_event = ::std::os::raw::c_uint;
pub use self::auto_event as event_T;
pub const hlf_T_HLF_8: hlf_T = 0;
pub const hlf_T_HLF_EOB: hlf_T = 1;
pub const hlf_T_HLF_AT: hlf_T = 2;
pub const hlf_T_HLF_D: hlf_T = 3;
pub const hlf_T_HLF_E: hlf_T = 4;
pub const hlf_T_HLF_H: hlf_T = 5;
pub const hlf_T_HLF_I: hlf_T = 6;
pub const hlf_T_HLF_L: hlf_T = 7;
pub const hlf_T_HLF_M: hlf_T = 8;
pub const hlf_T_HLF_CM: hlf_T = 9;
pub const hlf_T_HLF_N: hlf_T = 10;
pub const hlf_T_HLF_CLN: hlf_T = 11;
pub const hlf_T_HLF_R: hlf_T = 12;
pub const hlf_T_HLF_S: hlf_T = 13;
pub const hlf_T_HLF_SNC: hlf_T = 14;
pub const hlf_T_HLF_C: hlf_T = 15;
pub const hlf_T_HLF_T: hlf_T = 16;
pub const hlf_T_HLF_V: hlf_T = 17;
pub const hlf_T_HLF_VNC: hlf_T = 18;
pub const hlf_T_HLF_W: hlf_T = 19;
pub const hlf_T_HLF_WM: hlf_T = 20;
pub const hlf_T_HLF_FL: hlf_T = 21;
pub const hlf_T_HLF_FC: hlf_T = 22;
pub const hlf_T_HLF_ADD: hlf_T = 23;
pub const hlf_T_HLF_CHD: hlf_T = 24;
pub const hlf_T_HLF_DED: hlf_T = 25;
pub const hlf_T_HLF_TXD: hlf_T = 26;
pub const hlf_T_HLF_CONCEAL: hlf_T = 27;
pub const hlf_T_HLF_SC: hlf_T = 28;
pub const hlf_T_HLF_SPB: hlf_T = 29;
pub const hlf_T_HLF_SPC: hlf_T = 30;
pub const hlf_T_HLF_SPR: hlf_T = 31;
pub const hlf_T_HLF_SPL: hlf_T = 32;
pub const hlf_T_HLF_PNI: hlf_T = 33;
pub const hlf_T_HLF_PSI: hlf_T = 34;
pub const hlf_T_HLF_PSB: hlf_T = 35;
pub const hlf_T_HLF_PST: hlf_T = 36;
pub const hlf_T_HLF_TP: hlf_T = 37;
pub const hlf_T_HLF_TPS: hlf_T = 38;
pub const hlf_T_HLF_TPF: hlf_T = 39;
pub const hlf_T_HLF_CUC: hlf_T = 40;
pub const hlf_T_HLF_CUL: hlf_T = 41;
pub const hlf_T_HLF_MC: hlf_T = 42;
pub const hlf_T_HLF_QFL: hlf_T = 43;
pub const hlf_T_HLF_ST: hlf_T = 44;
pub const hlf_T_HLF_STNC: hlf_T = 45;
pub const hlf_T_HLF_COUNT: hlf_T = 46;
pub type hlf_T = ::std::os::raw::c_uint;
pub type UINT32_T = u32;
pub type linenr_T = ::std::os::raw::c_long;
pub type colnr_T = ::std::os::raw::c_int;
pub type disptick_T = ::std::os::raw::c_ushort;
pub type vim_acl_T = *mut ::std::os::raw::c_void;
pub type proftime_T = timeval;
pub type time_T = time_t;
pub type sock_T = ::std::os::raw::c_int;
extern "C" {
    pub static mut p_aleph: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_acd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ambw: *mut char_u;
}
extern "C" {
    pub static mut p_emoji: *mut char_u;
}
extern "C" {
    pub static mut p_ar: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_aw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_awa: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_bs: *mut char_u;
}
extern "C" {
    pub static mut p_bg: *mut char_u;
}
extern "C" {
    pub static mut p_bk: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_bkc: *mut char_u;
}
extern "C" {
    pub static mut bkc_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_bdir: *mut char_u;
}
extern "C" {
    pub static mut p_bex: *mut char_u;
}
extern "C" {
    pub static mut p_bo: *mut char_u;
}
extern "C" {
    pub static mut bo_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_bsk: *mut char_u;
}
extern "C" {
    pub static mut p_breakat: *mut char_u;
}
extern "C" {
    pub static mut p_cmp: *mut char_u;
}
extern "C" {
    pub static mut cmp_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_enc: *mut char_u;
}
extern "C" {
    pub static mut p_deco: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ccv: *mut char_u;
}
extern "C" {
    pub static mut p_ch: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_codelens: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_cp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_cpo: *mut char_u;
}
extern "C" {
    pub static mut p_debug: *mut char_u;
}
extern "C" {
    pub static mut p_def: *mut char_u;
}
extern "C" {
    pub static mut p_inc: *mut char_u;
}
extern "C" {
    pub static mut p_dip: *mut char_u;
}
extern "C" {
    pub static mut p_dex: *mut char_u;
}
extern "C" {
    pub static mut p_dir: *mut char_u;
}
extern "C" {
    pub static mut p_dy: *mut char_u;
}
extern "C" {
    pub static mut dy_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_ed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ead: *mut char_u;
}
extern "C" {
    pub static mut p_ea: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ep: *mut char_u;
}
extern "C" {
    pub static mut p_eb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ef: *mut char_u;
}
extern "C" {
    pub static mut p_efm: *mut char_u;
}
extern "C" {
    pub static mut p_gefm: *mut char_u;
}
extern "C" {
    pub static mut p_gp: *mut char_u;
}
extern "C" {
    pub static mut p_ei: *mut char_u;
}
extern "C" {
    pub static mut p_ek: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_exrc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_fencs: *mut char_u;
}
extern "C" {
    pub static mut p_ffs: *mut char_u;
}
extern "C" {
    pub static mut p_fic: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fcl: *mut char_u;
}
extern "C" {
    pub static mut p_fdls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fdo: *mut char_u;
}
extern "C" {
    pub static mut fdo_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_fp: *mut char_u;
}
extern "C" {
    pub static mut p_fs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_gd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_guifont: *mut char_u;
}
extern "C" {
    pub static mut p_prompt: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hf: *mut char_u;
}
extern "C" {
    pub static mut p_hh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_hlg: *mut char_u;
}
extern "C" {
    pub static mut p_hid: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hl: *mut char_u;
}
extern "C" {
    pub static mut p_hls: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hi: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_hkmap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hkmapp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_arshape: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_imaf: *mut char_u;
}
extern "C" {
    pub static mut p_imsf: *mut char_u;
}
extern "C" {
    pub static mut p_imcmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_imdisable: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_is: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_im: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_isf: *mut char_u;
}
extern "C" {
    pub static mut p_isi: *mut char_u;
}
extern "C" {
    pub static mut p_isp: *mut char_u;
}
extern "C" {
    pub static mut p_js: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_keydisplay: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_kp: *mut char_u;
}
extern "C" {
    pub static mut p_km: *mut char_u;
}
extern "C" {
    pub static mut p_langmap: *mut char_u;
}
extern "C" {
    pub static mut p_lnr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_lrm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_stal: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_linespace: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_lcs: *mut char_u;
}
extern "C" {
    pub static mut p_lz: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_lpl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_magic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_menc: *mut char_u;
}
extern "C" {
    pub static mut p_mef: *mut char_u;
}
extern "C" {
    pub static mut p_mp: *mut char_u;
}
extern "C" {
    pub static mut p_scl: *mut char_u;
}
extern "C" {
    pub static mut p_mat: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mco: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mfd: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmd: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmp: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmt: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_minimap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_mle: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mouse: *mut char_u;
}
extern "C" {
    pub static mut p_mousem: *mut char_u;
}
extern "C" {
    pub static mut p_mouset: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_opfunc: *mut char_u;
}
extern "C" {
    pub static mut p_para: *mut char_u;
}
extern "C" {
    pub static mut p_paste: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_pt: *mut char_u;
}
extern "C" {
    pub static mut p_pex: *mut char_u;
}
extern "C" {
    pub static mut p_pm: *mut char_u;
}
extern "C" {
    pub static mut p_path: *mut char_u;
}
extern "C" {
    pub static mut p_cdpath: *mut char_u;
}
extern "C" {
    pub static mut p_rdt: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_remap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_re: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_report: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_pvh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ari: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ri: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_pp: *mut char_u;
}
extern "C" {
    pub static mut p_rtp: *mut char_u;
}
extern "C" {
    pub static mut p_sj: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_so: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_sbo: *mut char_u;
}
extern "C" {
    pub static mut p_sections: *mut char_u;
}
extern "C" {
    pub static mut p_secure: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sel: *mut char_u;
}
extern "C" {
    pub static mut p_slm: *mut char_u;
}
extern "C" {
    pub static mut p_ssop: *mut char_u;
}
extern "C" {
    pub static mut ssop_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_sh: *mut char_u;
}
extern "C" {
    pub static mut p_shcf: *mut char_u;
}
extern "C" {
    pub static mut p_sp: *mut char_u;
}
extern "C" {
    pub static mut p_shq: *mut char_u;
}
extern "C" {
    pub static mut p_sxq: *mut char_u;
}
extern "C" {
    pub static mut p_sxe: *mut char_u;
}
extern "C" {
    pub static mut p_srr: *mut char_u;
}
extern "C" {
    pub static mut p_stmp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_shm: *mut char_u;
}
extern "C" {
    pub static mut p_sbr: *mut char_u;
}
extern "C" {
    pub static mut p_sft: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_smd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ss: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_siso: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_scs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sta: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_smoothscroll: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tpm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_spr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_su: *mut char_u;
}
extern "C" {
    pub static mut p_sws: *mut char_u;
}
extern "C" {
    pub static mut p_swb: *mut char_u;
}
extern "C" {
    pub static mut swb_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_tbs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tc: *mut char_u;
}
extern "C" {
    pub static mut tc_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_tl: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_tr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tags: *mut char_u;
}
extern "C" {
    pub static mut p_tgst: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tbidi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tenc: *mut char_u;
}
extern "C" {
    pub static mut p_termfont: *mut char_u;
}
extern "C" {
    pub static mut p_terse: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ta: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_to: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_timeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ttimeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ttm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_tbi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tf: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ttyscroll: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_udir: *mut char_u;
}
extern "C" {
    pub static mut p_ul: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ur: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_uc: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ut: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fcs: *mut char_u;
}
extern "C" {
    pub static mut p_vcp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_viminfo: *mut char_u;
}
extern "C" {
    pub static mut p_viminfofile: *mut char_u;
}
extern "C" {
    pub static mut p_vdir: *mut char_u;
}
extern "C" {
    pub static mut p_vop: *mut char_u;
}
extern "C" {
    pub static mut vop_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_vb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ve: *mut char_u;
}
extern "C" {
    pub static mut ve_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_verbose: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_vfile: *mut char_u;
}
extern "C" {
    pub static mut p_warn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wop: *mut char_u;
}
extern "C" {
    pub static mut p_window: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wig: *mut char_u;
}
extern "C" {
    pub static mut p_wiv: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ww: *mut char_u;
}
extern "C" {
    pub static mut p_wc: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wcm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wic: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wim: *mut char_u;
}
extern "C" {
    pub static mut p_wh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wmh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wmw: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wiw: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ws: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_write: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wa: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wd: ::std::os::raw::c_long;
}
pub const BV_AI: _bindgen_ty_1 = 0;
pub const BV_AR: _bindgen_ty_1 = 1;
pub const BV_BH: _bindgen_ty_1 = 2;
pub const BV_BKC: _bindgen_ty_1 = 3;
pub const BV_BT: _bindgen_ty_1 = 4;
pub const BV_EFM: _bindgen_ty_1 = 5;
pub const BV_GP: _bindgen_ty_1 = 6;
pub const BV_MP: _bindgen_ty_1 = 7;
pub const BV_BIN: _bindgen_ty_1 = 8;
pub const BV_BL: _bindgen_ty_1 = 9;
pub const BV_BOMB: _bindgen_ty_1 = 10;
pub const BV_CI: _bindgen_ty_1 = 11;
pub const BV_CM: _bindgen_ty_1 = 12;
pub const BV_CMS: _bindgen_ty_1 = 13;
pub const BV_COM: _bindgen_ty_1 = 14;
pub const BV_DEF: _bindgen_ty_1 = 15;
pub const BV_INC: _bindgen_ty_1 = 16;
pub const BV_EOL: _bindgen_ty_1 = 17;
pub const BV_FIXEOL: _bindgen_ty_1 = 18;
pub const BV_EP: _bindgen_ty_1 = 19;
pub const BV_ET: _bindgen_ty_1 = 20;
pub const BV_FENC: _bindgen_ty_1 = 21;
pub const BV_FP: _bindgen_ty_1 = 22;
pub const BV_BEXPR: _bindgen_ty_1 = 23;
pub const BV_FEX: _bindgen_ty_1 = 24;
pub const BV_FF: _bindgen_ty_1 = 25;
pub const BV_FLP: _bindgen_ty_1 = 26;
pub const BV_FO: _bindgen_ty_1 = 27;
pub const BV_FT: _bindgen_ty_1 = 28;
pub const BV_IMI: _bindgen_ty_1 = 29;
pub const BV_IMS: _bindgen_ty_1 = 30;
pub const BV_INDE: _bindgen_ty_1 = 31;
pub const BV_INDK: _bindgen_ty_1 = 32;
pub const BV_INEX: _bindgen_ty_1 = 33;
pub const BV_INF: _bindgen_ty_1 = 34;
pub const BV_ISK: _bindgen_ty_1 = 35;
pub const BV_KMAP: _bindgen_ty_1 = 36;
pub const BV_KP: _bindgen_ty_1 = 37;
pub const BV_MENC: _bindgen_ty_1 = 38;
pub const BV_MA: _bindgen_ty_1 = 39;
pub const BV_ML: _bindgen_ty_1 = 40;
pub const BV_MOD: _bindgen_ty_1 = 41;
pub const BV_MPS: _bindgen_ty_1 = 42;
pub const BV_NF: _bindgen_ty_1 = 43;
pub const BV_PATH: _bindgen_ty_1 = 44;
pub const BV_PI: _bindgen_ty_1 = 45;
pub const BV_QE: _bindgen_ty_1 = 46;
pub const BV_RO: _bindgen_ty_1 = 47;
pub const BV_SN: _bindgen_ty_1 = 48;
pub const BV_STS: _bindgen_ty_1 = 49;
pub const BV_SUA: _bindgen_ty_1 = 50;
pub const BV_SW: _bindgen_ty_1 = 51;
pub const BV_SWF: _bindgen_ty_1 = 52;
pub const BV_TFU: _bindgen_ty_1 = 53;
pub const BV_TAGS: _bindgen_ty_1 = 54;
pub const BV_TC: _bindgen_ty_1 = 55;
pub const BV_TS: _bindgen_ty_1 = 56;
pub const BV_TW: _bindgen_ty_1 = 57;
pub const BV_TX: _bindgen_ty_1 = 58;
pub const BV_UDF: _bindgen_ty_1 = 59;
pub const BV_UL: _bindgen_ty_1 = 60;
pub const BV_WM: _bindgen_ty_1 = 61;
pub const BV_VSTS: _bindgen_ty_1 = 62;
pub const BV_VTS: _bindgen_ty_1 = 63;
pub const BV_COUNT: _bindgen_ty_1 = 64;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const WV_LIST: _bindgen_ty_2 = 0;
pub const WV_ARAB: _bindgen_ty_2 = 1;
pub const WV_CRBIND: _bindgen_ty_2 = 2;
pub const WV_BRI: _bindgen_ty_2 = 3;
pub const WV_BRIOPT: _bindgen_ty_2 = 4;
pub const WV_WCR: _bindgen_ty_2 = 5;
pub const WV_DIFF: _bindgen_ty_2 = 6;
pub const WV_FDC: _bindgen_ty_2 = 7;
pub const WV_FEN: _bindgen_ty_2 = 8;
pub const WV_FDI: _bindgen_ty_2 = 9;
pub const WV_FDL: _bindgen_ty_2 = 10;
pub const WV_FDM: _bindgen_ty_2 = 11;
pub const WV_FML: _bindgen_ty_2 = 12;
pub const WV_FDN: _bindgen_ty_2 = 13;
pub const WV_FDE: _bindgen_ty_2 = 14;
pub const WV_FDT: _bindgen_ty_2 = 15;
pub const WV_FMR: _bindgen_ty_2 = 16;
pub const WV_LBR: _bindgen_ty_2 = 17;
pub const WV_NU: _bindgen_ty_2 = 18;
pub const WV_RNU: _bindgen_ty_2 = 19;
pub const WV_NUW: _bindgen_ty_2 = 20;
pub const WV_PVW: _bindgen_ty_2 = 21;
pub const WV_RL: _bindgen_ty_2 = 22;
pub const WV_RLC: _bindgen_ty_2 = 23;
pub const WV_SCBIND: _bindgen_ty_2 = 24;
pub const WV_SCROLL: _bindgen_ty_2 = 25;
pub const WV_SISO: _bindgen_ty_2 = 26;
pub const WV_SO: _bindgen_ty_2 = 27;
pub const WV_WFH: _bindgen_ty_2 = 28;
pub const WV_WFW: _bindgen_ty_2 = 29;
pub const WV_WRAP: _bindgen_ty_2 = 30;
pub const WV_SCL: _bindgen_ty_2 = 31;
pub const WV_COUNT: _bindgen_ty_2 = 32;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut SDS_NOINIT: *const ::std::os::raw::c_char;
}
pub type sds = *mut ::std::os::raw::c_char;
#[repr(C, packed)]
pub struct sdshdr5 {
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr5() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr5>(),
        1usize,
        concat!("Size of: ", stringify!(sdshdr5))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr5>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr5),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr5),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr8 {
    pub len: u8,
    pub alloc: u8,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr8() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr8>(),
        3usize,
        concat!("Size of: ", stringify!(sdshdr8))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr8>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr16 {
    pub len: u16,
    pub alloc: u16,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr16() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr16>(),
        5usize,
        concat!("Size of: ", stringify!(sdshdr16))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr16>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr32 {
    pub len: u32,
    pub alloc: u32,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr32() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr32>(),
        9usize,
        concat!("Size of: ", stringify!(sdshdr32))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr32>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
pub struct sdshdr64 {
    pub len: u64,
    pub alloc: u64,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr64() {
    const UNINIT: ::std::mem::MaybeUninit<sdshdr64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdshdr64>(),
        17usize,
        concat!("Size of: ", stringify!(sdshdr64))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr64>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    pub fn sdsnewlen(init: *const ::std::os::raw::c_void, initlen: usize) -> sds;
}
extern "C" {
    pub fn sdsnew(init: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdsempty() -> sds;
}
extern "C" {
    pub fn sdsdup(s: sds) -> sds;
}
extern "C" {
    pub fn sdsfree(s: sds);
}
extern "C" {
    pub fn sdsgrowzero(s: sds, len: usize) -> sds;
}
extern "C" {
    pub fn sdscatlen(s: sds, t: *const ::std::os::raw::c_void, len: usize) -> sds;
}
extern "C" {
    pub fn sdscat(s: sds, t: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdscatsds(s: sds, t: sds) -> sds;
}
extern "C" {
    pub fn sdscpylen(s: sds, t: *const ::std::os::raw::c_char, len: usize) -> sds;
}
extern "C" {
    pub fn sdscpy(s: sds, t: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdscatvprintf(s: sds, fmt: *const ::std::os::raw::c_char, ap: *mut __va_list_tag)
        -> sds;
}
extern "C" {
    pub fn sdscatprintf(s: sds, fmt: *const ::std::os::raw::c_char, ...) -> sds;
}
extern "C" {
    pub fn sdscatfmt(s: sds, fmt: *const ::std::os::raw::c_char, ...) -> sds;
}
extern "C" {
    pub fn sdstrim(s: sds, cset: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdsrange(s: sds, start: isize, end: isize);
}
extern "C" {
    pub fn sdsupdatelen(s: sds);
}
extern "C" {
    pub fn sdsclear(s: sds);
}
extern "C" {
    pub fn sdscmp(s1: sds, s2: sds) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdssplitlen(
        s: *const ::std::os::raw::c_char,
        len: isize,
        sep: *const ::std::os::raw::c_char,
        seplen: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut sds;
}
extern "C" {
    pub fn sdsfreesplitres(tokens: *mut sds, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdstolower(s: sds);
}
extern "C" {
    pub fn sdstoupper(s: sds);
}
extern "C" {
    pub fn sdsfromlonglong(value: ::std::os::raw::c_longlong) -> sds;
}
extern "C" {
    pub fn sdscatrepr(s: sds, p: *const ::std::os::raw::c_char, len: usize) -> sds;
}
extern "C" {
    pub fn sdssplitargs(
        line: *const ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> *mut sds;
}
extern "C" {
    pub fn sdsmapchars(
        s: sds,
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        setlen: usize,
    ) -> sds;
}
extern "C" {
    pub fn sdsjoin(
        argv: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        sep: *mut ::std::os::raw::c_char,
    ) -> sds;
}
extern "C" {
    pub fn sdsjoinsds(
        argv: *mut sds,
        argc: ::std::os::raw::c_int,
        sep: *const ::std::os::raw::c_char,
        seplen: usize,
    ) -> sds;
}
extern "C" {
    pub fn sdsMakeRoomFor(s: sds, addlen: usize) -> sds;
}
extern "C" {
    pub fn sdsIncrLen(s: sds, incr: isize);
}
extern "C" {
    pub fn sdsRemoveFreeSpace(s: sds) -> sds;
}
extern "C" {
    pub fn sdsAllocSize(s: sds) -> usize;
}
extern "C" {
    pub fn sdsAllocPtr(s: sds) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_free(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
    pub coladd: colnr_T,
}
#[test]
fn bindgen_test_layout_pos_T() {
    const UNINIT: ::std::mem::MaybeUninit<pos_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pos_T>(),
        16usize,
        concat!("Size of: ", stringify!(pos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pos_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coladd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(coladd)
        )
    );
}
pub type buf_T = file_buffer;
pub const msgPriority_T_MSG_INFO: msgPriority_T = 0;
pub const msgPriority_T_MSG_WARNING: msgPriority_T = 1;
pub const msgPriority_T_MSG_ERROR: msgPriority_T = 2;
pub type msgPriority_T = ::std::os::raw::c_uint;
pub const windowSplit_T_SPLIT_HORIZONTAL: windowSplit_T = 0;
pub const windowSplit_T_SPLIT_HORIZONTAL_NEW: windowSplit_T = 1;
pub const windowSplit_T_SPLIT_VERTICAL: windowSplit_T = 2;
pub const windowSplit_T_SPLIT_VERTICAL_NEW: windowSplit_T = 3;
pub const windowSplit_T_SPLIT_TAB: windowSplit_T = 4;
pub const windowSplit_T_SPLIT_TAB_NEW: windowSplit_T = 5;
pub type windowSplit_T = ::std::os::raw::c_uint;
pub const windowMovement_T_WIN_CURSOR_LEFT: windowMovement_T = 0;
pub const windowMovement_T_WIN_CURSOR_RIGHT: windowMovement_T = 1;
pub const windowMovement_T_WIN_CURSOR_UP: windowMovement_T = 2;
pub const windowMovement_T_WIN_CURSOR_DOWN: windowMovement_T = 3;
pub const windowMovement_T_WIN_MOVE_FULL_LEFT: windowMovement_T = 4;
pub const windowMovement_T_WIN_MOVE_FULL_RIGHT: windowMovement_T = 5;
pub const windowMovement_T_WIN_MOVE_FULL_UP: windowMovement_T = 6;
pub const windowMovement_T_WIN_MOVE_FULL_DOWN: windowMovement_T = 7;
pub const windowMovement_T_WIN_CURSOR_TOP_LEFT: windowMovement_T = 8;
pub const windowMovement_T_WIN_CURSOR_BOTTOM_RIGHT: windowMovement_T = 9;
pub const windowMovement_T_WIN_CURSOR_PREVIOUS: windowMovement_T = 10;
pub const windowMovement_T_WIN_MOVE_ROTATE_DOWNWARDS: windowMovement_T = 11;
pub const windowMovement_T_WIN_MOVE_ROTATE_UPWARDS: windowMovement_T = 12;
pub type windowMovement_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exCommand_T {
    pub cmd: *mut char_u,
    pub forceit: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_exCommand_T() {
    const UNINIT: ::std::mem::MaybeUninit<exCommand_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exCommand_T>(),
        16usize,
        concat!("Size of: ", stringify!(exCommand_T))
    );
    assert_eq!(
        ::std::mem::align_of::<exCommand_T>(),
        8usize,
        concat!("Alignment of ", stringify!(exCommand_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(forceit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(regname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yankInfo_T {
    pub op_char: ::std::os::raw::c_int,
    pub extra_op_char: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub blockType: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub numLines: ::std::os::raw::c_int,
    pub lines: *mut *mut char_u,
}
#[test]
fn bindgen_test_layout_yankInfo_T() {
    const UNINIT: ::std::mem::MaybeUninit<yankInfo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<yankInfo_T>(),
        64usize,
        concat!("Size of: ", stringify!(yankInfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<yankInfo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(yankInfo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_char) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(op_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_op_char) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(extra_op_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(blockType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numLines) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(numLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(lines)
        )
    );
}
pub const gotoTarget_T_DEFINITION: gotoTarget_T = 0;
pub const gotoTarget_T_DECLARATION: gotoTarget_T = 1;
pub const gotoTarget_T_IMPLEMENTATION: gotoTarget_T = 2;
pub const gotoTarget_T_TYPEDEFINITION: gotoTarget_T = 3;
pub const gotoTarget_T_HOVER: gotoTarget_T = 4;
pub const gotoTarget_T_OUTLINE: gotoTarget_T = 5;
pub const gotoTarget_T_MESSAGES: gotoTarget_T = 6;
pub type gotoTarget_T = ::std::os::raw::c_uint;
pub const clearTarget_T_CLEAR_MESSAGES: clearTarget_T = 0;
pub type clearTarget_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clearRequest_T {
    pub count: ::std::os::raw::c_int,
    pub target: clearTarget_T,
}
#[test]
fn bindgen_test_layout_clearRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<clearRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<clearRequest_T>(),
        8usize,
        concat!("Size of: ", stringify!(clearRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<clearRequest_T>(),
        4usize,
        concat!("Alignment of ", stringify!(clearRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clearRequest_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clearRequest_T),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gotoRequest_T {
    pub count: ::std::os::raw::c_int,
    pub location: pos_T,
    pub target: gotoTarget_T,
}
#[test]
fn bindgen_test_layout_gotoRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<gotoRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gotoRequest_T>(),
        32usize,
        concat!("Size of: ", stringify!(gotoRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<gotoRequest_T>(),
        8usize,
        concat!("Alignment of ", stringify!(gotoRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(target)
        )
    );
}
pub const scrollDirection_T_SCROLL_CURSOR_CENTERV: scrollDirection_T = 0;
pub const scrollDirection_T_SCROLL_CURSOR_CENTERH: scrollDirection_T = 1;
pub const scrollDirection_T_SCROLL_CURSOR_TOP: scrollDirection_T = 2;
pub const scrollDirection_T_SCROLL_CURSOR_BOTTOM: scrollDirection_T = 3;
pub const scrollDirection_T_SCROLL_CURSOR_LEFT: scrollDirection_T = 4;
pub const scrollDirection_T_SCROLL_CURSOR_RIGHT: scrollDirection_T = 5;
pub const scrollDirection_T_SCROLL_LINE_UP: scrollDirection_T = 6;
pub const scrollDirection_T_SCROLL_LINE_DOWN: scrollDirection_T = 7;
pub const scrollDirection_T_SCROLL_HALFPAGE_DOWN: scrollDirection_T = 8;
pub const scrollDirection_T_SCROLL_HALFPAGE_UP: scrollDirection_T = 9;
pub const scrollDirection_T_SCROLL_PAGE_DOWN: scrollDirection_T = 10;
pub const scrollDirection_T_SCROLL_PAGE_UP: scrollDirection_T = 11;
pub const scrollDirection_T_SCROLL_HALFPAGE_LEFT: scrollDirection_T = 12;
pub const scrollDirection_T_SCROLL_HALFPAGE_RIGHT: scrollDirection_T = 13;
pub const scrollDirection_T_SCROLL_COLUMN_LEFT: scrollDirection_T = 14;
pub const scrollDirection_T_SCROLL_COLUMN_RIGHT: scrollDirection_T = 15;
pub type scrollDirection_T = ::std::os::raw::c_uint;
pub const subMode_T_SM_NONE: subMode_T = 0;
pub const subMode_T_SM_INSERT_LITERAL: subMode_T = 1;
pub type subMode_T = ::std::os::raw::c_uint;
pub const tabPageKind_T_GOTO: tabPageKind_T = 0;
pub const tabPageKind_T_MOVE: tabPageKind_T = 1;
pub const tabPageKind_T_CLOSE: tabPageKind_T = 2;
pub const tabPageKind_T_ONLY: tabPageKind_T = 3;
pub type tabPageKind_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tabPageRequest_T {
    pub kind: tabPageKind_T,
    pub arg: ::std::os::raw::c_int,
    pub relative: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tabPageRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<tabPageRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tabPageRequest_T>(),
        12usize,
        concat!("Size of: ", stringify!(tabPageRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tabPageRequest_T>(),
        4usize,
        concat!("Alignment of ", stringify!(tabPageRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(relative)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct terminalRequest_t {
    pub cmd: *mut char_u,
    pub rows: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub curwin: ::std::os::raw::c_int,
    pub finish: ::std::os::raw::c_char,
    pub hidden: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_terminalRequest_t() {
    const UNINIT: ::std::mem::MaybeUninit<terminalRequest_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<terminalRequest_t>(),
        32usize,
        concat!("Size of: ", stringify!(terminalRequest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<terminalRequest_t>(),
        8usize,
        concat!("Alignment of ", stringify!(terminalRequest_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curwin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finish) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(hidden)
        )
    );
}
pub const formatRequestType_T_INDENTATION: formatRequestType_T = 0;
pub const formatRequestType_T_FORMATTING: formatRequestType_T = 1;
pub type formatRequestType_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct formatRequest_T {
    pub formatType: formatRequestType_T,
    pub returnCursor: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub buf: *mut buf_T,
    pub cmd: *mut char_u,
}
#[test]
fn bindgen_test_layout_formatRequest_T() {
    const UNINIT: ::std::mem::MaybeUninit<formatRequest_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<formatRequest_T>(),
        56usize,
        concat!("Size of: ", stringify!(formatRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<formatRequest_T>(),
        8usize,
        concat!("Alignment of ", stringify!(formatRequest_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(formatType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returnCursor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(returnCursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(cmd)
        )
    );
}
pub type ClipboardGetCallback = ::std::option::Option<
    unsafe extern "C" fn(
        regname: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
        blockType: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type ColorSchemeChangedCallback =
    ::std::option::Option<unsafe extern "C" fn(colorScheme: *mut char_u) -> ::std::os::raw::c_int>;
pub type CursorAddCallback = ::std::option::Option<unsafe extern "C" fn(cursor: pos_T)>;
pub type ColorSchemeCompletionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        filter: *mut char_u,
        num_colorschemes: *mut ::std::os::raw::c_int,
        colorschemes: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type FormatCallback =
    ::std::option::Option<unsafe extern "C" fn(formatRequest: *mut formatRequest_T)>;
pub type AutoIndentCallback = ::std::option::Option<
    unsafe extern "C" fn(
        lnum: ::std::os::raw::c_int,
        buf: *mut buf_T,
        prevLine: *mut char_u,
        currentLine: *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type MacroStartRecordCallback =
    ::std::option::Option<unsafe extern "C" fn(regname: ::std::os::raw::c_int)>;
pub type MacroStopRecordCallback = ::std::option::Option<
    unsafe extern "C" fn(regname: ::std::os::raw::c_int, regvalue: *mut char_u),
>;
pub type VoidCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type WindowSplitCallback =
    ::std::option::Option<unsafe extern "C" fn(splitType: windowSplit_T, fname: *mut char_u)>;
pub type WindowMovementCallback = ::std::option::Option<
    unsafe extern "C" fn(movementType: windowMovement_T, count: ::std::os::raw::c_int),
>;
pub type YankCallback = ::std::option::Option<unsafe extern "C" fn(yankInfo: *mut yankInfo_T)>;
pub type TerminalCallback =
    ::std::option::Option<unsafe extern "C" fn(terminalRequest: *mut terminalRequest_t)>;
pub type ClearCallback = ::std::option::Option<unsafe extern "C" fn(clearInfo: clearRequest_T)>;
pub type GotoCallback =
    ::std::option::Option<unsafe extern "C" fn(gotoInfo: gotoRequest_T) -> ::std::os::raw::c_int>;
pub type ScrollCallback = ::std::option::Option<
    unsafe extern "C" fn(dir: scrollDirection_T, count: ::std::os::raw::c_long),
>;
pub type TabPageCallback = ::std::option::Option<
    unsafe extern "C" fn(tabPageInfo: tabPageRequest_T) -> ::std::os::raw::c_int,
>;
pub type FunctionGetCharCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mode: ::std::os::raw::c_int,
        character: *mut ::std::os::raw::c_char,
        modMask: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const screenLineMotion_T_MOTION_H: screenLineMotion_T = 0;
pub const screenLineMotion_T_MOTION_L: screenLineMotion_T = 1;
pub const screenLineMotion_T_MOTION_M: screenLineMotion_T = 2;
pub type screenLineMotion_T = ::std::os::raw::c_uint;
pub type CursorMoveScreenLineCallback = ::std::option::Option<
    unsafe extern "C" fn(
        motion: screenLineMotion_T,
        count: ::std::os::raw::c_int,
        startLine: linenr_T,
        destLine: *mut linenr_T,
    ),
>;
pub type CursorMoveScreenPositionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        direction: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        lnum: linenr_T,
        cursor: colnr_T,
        curswant: colnr_T,
        destLnum: *mut linenr_T,
        destCol: *mut colnr_T,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_T {
    pub contents: sds,
    pub title: sds,
    pub priority: msgPriority_T,
}
#[test]
fn bindgen_test_layout_msg_T() {
    const UNINIT: ::std::mem::MaybeUninit<msg_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msg_T>(),
        24usize,
        concat!("Size of: ", stringify!(msg_T))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_T>(),
        8usize,
        concat!("Alignment of ", stringify!(msg_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(priority)
        )
    );
}
pub const executionStatus_T_HANDLED: executionStatus_T = 0;
pub const executionStatus_T_COMPLETED: executionStatus_T = 1;
pub const executionStatus_T_UNHANDLED: executionStatus_T = 2;
pub const executionStatus_T_COMPLETED_UNHANDLED: executionStatus_T = 3;
pub type executionStatus_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lpos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
}
#[test]
fn bindgen_test_layout_lpos_T() {
    const UNINIT: ::std::mem::MaybeUninit<lpos_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lpos_T>(),
        16usize,
        concat!("Size of: ", stringify!(lpos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<lpos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(lpos_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lpos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lpos_T),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct growarray {
    pub ga_len: ::std::os::raw::c_int,
    pub ga_maxlen: ::std::os::raw::c_int,
    pub ga_itemsize: ::std::os::raw::c_int,
    pub ga_growsize: ::std::os::raw::c_int,
    pub ga_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_growarray() {
    const UNINIT: ::std::mem::MaybeUninit<growarray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<growarray>(),
        24usize,
        concat!("Size of: ", stringify!(growarray))
    );
    assert_eq!(
        ::std::mem::align_of::<growarray>(),
        8usize,
        concat!("Alignment of ", stringify!(growarray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_maxlen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_maxlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_itemsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_itemsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_growsize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_growsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ga_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_data)
        )
    );
}
pub type garray_T = growarray;
pub type win_T = window_S;
pub type wininfo_T = wininfo_S;
pub type frame_T = frame_S;
pub type scid_T = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct terminal_S {
    _unused: [u8; 0],
}
pub type term_T = terminal_S;
pub type AutoCommandCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: event_T, buf: *mut buf_T)>;
pub type CustomCommandCallback =
    ::std::option::Option<unsafe extern "C" fn(eap: *mut exCommand_T) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctx_T {
    pub sc_sid: scid_T,
    pub sc_seq: ::std::os::raw::c_int,
    pub sc_lnum: linenr_T,
    pub sc_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sctx_T() {
    const UNINIT: ::std::mem::MaybeUninit<sctx_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sctx_T>(),
        24usize,
        concat!("Size of: ", stringify!(sctx_T))
    );
    assert_eq!(
        ::std::mem::align_of::<sctx_T>(),
        8usize,
        concat!("Alignment of ", stringify!(sctx_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_sid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_sid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufref_T {
    pub br_buf: *mut buf_T,
    pub br_fnum: ::std::os::raw::c_int,
    pub br_buf_free_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bufref_T() {
    const UNINIT: ::std::mem::MaybeUninit<bufref_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bufref_T>(),
        16usize,
        concat!("Size of: ", stringify!(bufref_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bufref_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bufref_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_fnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_buf_free_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_buf_free_count)
        )
    );
}
pub type regengine_T = regengine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regprog {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regprog() {
    const UNINIT: ::std::mem::MaybeUninit<regprog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regprog>(),
        24usize,
        concat!("Size of: ", stringify!(regprog))
    );
    assert_eq!(
        ::std::mem::align_of::<regprog>(),
        8usize,
        concat!("Alignment of ", stringify!(regprog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_engine) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_in_use) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_in_use)
        )
    );
}
pub type regprog_T = regprog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_regprog_T {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
    pub regstart: ::std::os::raw::c_int,
    pub reganch: char_u,
    pub regmust: *mut char_u,
    pub regmlen: ::std::os::raw::c_int,
    pub program: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_bt_regprog_T() {
    const UNINIT: ::std::mem::MaybeUninit<bt_regprog_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_regprog_T>(),
        48usize,
        concat!("Size of: ", stringify!(bt_regprog_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_regprog_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_regprog_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_engine) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_in_use) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_in_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regstart) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reganch) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regmust) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regmust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regmlen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regmlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).program) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(program)
        )
    );
}
pub type nfa_state_T = nfa_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfa_state {
    pub c: ::std::os::raw::c_int,
    pub out: *mut nfa_state_T,
    pub out1: *mut nfa_state_T,
    pub id: ::std::os::raw::c_int,
    pub lastlist: [::std::os::raw::c_int; 2usize],
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_nfa_state() {
    const UNINIT: ::std::mem::MaybeUninit<nfa_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nfa_state>(),
        40usize,
        concat!("Size of: ", stringify!(nfa_state))
    );
    assert_eq!(
        ::std::mem::align_of::<nfa_state>(),
        8usize,
        concat!("Alignment of ", stringify!(nfa_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(out1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastlist) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(lastlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfa_regprog_T {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
    pub start: *mut nfa_state_T,
    pub reganch: ::std::os::raw::c_int,
    pub regstart: ::std::os::raw::c_int,
    pub match_text: *mut char_u,
    pub has_zend: ::std::os::raw::c_int,
    pub has_backref: ::std::os::raw::c_int,
    pub pattern: *mut char_u,
    pub nsubexp: ::std::os::raw::c_int,
    pub nstate: ::std::os::raw::c_int,
    pub state: [nfa_state_T; 1usize],
}
#[test]
fn bindgen_test_layout_nfa_regprog_T() {
    const UNINIT: ::std::mem::MaybeUninit<nfa_regprog_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nfa_regprog_T>(),
        112usize,
        concat!("Size of: ", stringify!(nfa_regprog_T))
    );
    assert_eq!(
        ::std::mem::align_of::<nfa_regprog_T>(),
        8usize,
        concat!("Alignment of ", stringify!(nfa_regprog_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_engine) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_in_use) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_in_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reganch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regstart) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_text) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(match_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_zend) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(has_zend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_backref) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(has_backref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsubexp) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(nsubexp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstate) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(nstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_T {
    pub regprog: *mut regprog_T,
    pub startp: [*mut char_u; 10usize],
    pub endp: [*mut char_u; 10usize],
    pub rm_ic: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regmatch_T() {
    const UNINIT: ::std::mem::MaybeUninit<regmatch_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regmatch_T>(),
        176usize,
        concat!("Size of: ", stringify!(regmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regprog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(regprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(startp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endp) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(endp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_ic) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(rm_ic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmmatch_T {
    pub regprog: *mut regprog_T,
    pub startpos: [lpos_T; 10usize],
    pub endpos: [lpos_T; 10usize],
    pub rmm_ic: ::std::os::raw::c_int,
    pub rmm_maxcol: colnr_T,
}
#[test]
fn bindgen_test_layout_regmmatch_T() {
    const UNINIT: ::std::mem::MaybeUninit<regmmatch_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regmmatch_T>(),
        336usize,
        concat!("Size of: ", stringify!(regmmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<regmmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(regmmatch_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regprog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(regprog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startpos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(startpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpos) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(endpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmm_ic) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(rmm_ic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmm_maxcol) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(rmm_maxcol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_extmatch_T {
    pub refcnt: ::std::os::raw::c_short,
    pub matches: [*mut char_u; 10usize],
}
#[test]
fn bindgen_test_layout_reg_extmatch_T() {
    const UNINIT: ::std::mem::MaybeUninit<reg_extmatch_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<reg_extmatch_T>(),
        88usize,
        concat!("Size of: ", stringify!(reg_extmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_extmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_extmatch_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_extmatch_T),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matches) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_extmatch_T),
            "::",
            stringify!(matches)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regengine {
    pub regcomp: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut char_u, arg2: ::std::os::raw::c_int) -> *mut regprog_T,
    >,
    pub regfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut regprog_T)>,
    pub regexec_nl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut regmatch_T,
            arg2: *mut char_u,
            arg3: colnr_T,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub regexec_multi: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut regmmatch_T,
            arg2: *mut win_T,
            arg3: *mut buf_T,
            arg4: linenr_T,
            arg5: colnr_T,
            arg6: *mut proftime_T,
            arg7: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
    >,
    pub expr: *mut char_u,
}
#[test]
fn bindgen_test_layout_regengine() {
    const UNINIT: ::std::mem::MaybeUninit<regengine> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regengine>(),
        40usize,
        concat!("Size of: ", stringify!(regengine))
    );
    assert_eq!(
        ::std::mem::align_of::<regengine>(),
        8usize,
        concat!("Alignment of ", stringify!(regengine))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regcomp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regcomp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regfree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regexec_nl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regexec_nl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regexec_multi) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regexec_multi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(expr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct filemark {
    pub mark: pos_T,
    pub fnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_filemark() {
    const UNINIT: ::std::mem::MaybeUninit<filemark> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<filemark>(),
        24usize,
        concat!("Size of: ", stringify!(filemark))
    );
    assert_eq!(
        ::std::mem::align_of::<filemark>(),
        8usize,
        concat!("Alignment of ", stringify!(filemark))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(filemark),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(filemark),
            "::",
            stringify!(fnum)
        )
    );
}
pub type fmark_T = filemark;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xfilemark {
    pub fmark: fmark_T,
    pub fname: *mut char_u,
    pub time_set: time_T,
}
#[test]
fn bindgen_test_layout_xfilemark() {
    const UNINIT: ::std::mem::MaybeUninit<xfilemark> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<xfilemark>(),
        40usize,
        concat!("Size of: ", stringify!(xfilemark))
    );
    assert_eq!(
        ::std::mem::align_of::<xfilemark>(),
        8usize,
        concat!("Alignment of ", stringify!(xfilemark))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmark) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(fmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_set) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(time_set)
        )
    );
}
pub type xfmark_T = xfilemark;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taggy {
    pub tagname: *mut char_u,
    pub fmark: fmark_T,
    pub cur_match: ::std::os::raw::c_int,
    pub cur_fnum: ::std::os::raw::c_int,
    pub user_data: *mut char_u,
}
#[test]
fn bindgen_test_layout_taggy() {
    const UNINIT: ::std::mem::MaybeUninit<taggy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<taggy>(),
        48usize,
        concat!("Size of: ", stringify!(taggy))
    );
    assert_eq!(
        ::std::mem::align_of::<taggy>(),
        8usize,
        concat!("Alignment of ", stringify!(taggy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmark) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(fmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_match) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(cur_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_fnum) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(cur_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(user_data)
        )
    );
}
pub type taggy_T = taggy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winopt_T {
    pub wo_arab: ::std::os::raw::c_int,
    pub wo_bri: ::std::os::raw::c_int,
    pub wo_briopt: *mut char_u,
    pub wo_wcr: *mut char_u,
    pub wo_diff: ::std::os::raw::c_int,
    pub wo_fdc: ::std::os::raw::c_long,
    pub wo_fdc_save: ::std::os::raw::c_int,
    pub wo_fen: ::std::os::raw::c_int,
    pub wo_fen_save: ::std::os::raw::c_int,
    pub wo_fdi: *mut char_u,
    pub wo_fdl: ::std::os::raw::c_long,
    pub wo_fdl_save: ::std::os::raw::c_int,
    pub wo_fdm: *mut char_u,
    pub wo_fdm_save: *mut char_u,
    pub wo_fml: ::std::os::raw::c_long,
    pub wo_fdn: ::std::os::raw::c_long,
    pub wo_fde: *mut char_u,
    pub wo_fdt: *mut char_u,
    pub wo_fmr: *mut char_u,
    pub wo_lbr: ::std::os::raw::c_int,
    pub wo_list: ::std::os::raw::c_int,
    pub wo_nu: ::std::os::raw::c_int,
    pub wo_rnu: ::std::os::raw::c_int,
    pub wo_nuw: ::std::os::raw::c_long,
    pub wo_wfh: ::std::os::raw::c_int,
    pub wo_wfw: ::std::os::raw::c_int,
    pub wo_pvw: ::std::os::raw::c_int,
    pub wo_rl: ::std::os::raw::c_int,
    pub wo_rlc: *mut char_u,
    pub wo_scr: ::std::os::raw::c_long,
    pub wo_scb: ::std::os::raw::c_int,
    pub wo_diff_saved: ::std::os::raw::c_int,
    pub wo_scb_save: ::std::os::raw::c_int,
    pub wo_wrap: ::std::os::raw::c_int,
    pub wo_wrap_save: ::std::os::raw::c_int,
    pub wo_crb: ::std::os::raw::c_int,
    pub wo_crb_save: ::std::os::raw::c_int,
    pub wo_scl: *mut char_u,
    pub wo_script_ctx: [sctx_T; 32usize],
}
#[test]
fn bindgen_test_layout_winopt_T() {
    const UNINIT: ::std::mem::MaybeUninit<winopt_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<winopt_T>(),
        1000usize,
        concat!("Size of: ", stringify!(winopt_T))
    );
    assert_eq!(
        ::std::mem::align_of::<winopt_T>(),
        8usize,
        concat!("Alignment of ", stringify!(winopt_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_arab) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_arab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_bri) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_bri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_briopt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_briopt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wcr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_diff) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdc_save) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdc_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fen_save) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fen_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdi) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdl) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdl_save) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdl_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdm) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdm_save) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdm_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fml) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdn) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fde) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fde)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fdt) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_fmr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_lbr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_lbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_list) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_nu) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_nu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_rnu) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rnu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_nuw) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_nuw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wfh) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wfh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wfw) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wfw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_pvw) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_pvw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_rl) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_rlc) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rlc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scr) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scb) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_diff_saved) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_diff_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scb_save) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scb_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wrap) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wrap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_wrap_save) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wrap_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_crb) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_crb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_crb_save) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_crb_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_scl) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wo_script_ctx) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_script_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wininfo_S {
    pub wi_next: *mut wininfo_T,
    pub wi_prev: *mut wininfo_T,
    pub wi_win: *mut win_T,
    pub wi_fpos: pos_T,
    pub wi_optset: ::std::os::raw::c_int,
    pub wi_opt: winopt_T,
    pub wi_fold_manual: ::std::os::raw::c_int,
    pub wi_folds: garray_T,
}
#[test]
fn bindgen_test_layout_wininfo_S() {
    const UNINIT: ::std::mem::MaybeUninit<wininfo_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wininfo_S>(),
        1080usize,
        concat!("Size of: ", stringify!(wininfo_S))
    );
    assert_eq!(
        ::std::mem::align_of::<wininfo_S>(),
        8usize,
        concat!("Alignment of ", stringify!(wininfo_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_win) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_fpos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_fpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_optset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_optset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_opt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_fold_manual) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_fold_manual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wi_folds) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_folds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct foldinfo {
    pub fi_level: ::std::os::raw::c_int,
    pub fi_lnum: ::std::os::raw::c_int,
    pub fi_low_level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_foldinfo() {
    const UNINIT: ::std::mem::MaybeUninit<foldinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<foldinfo>(),
        12usize,
        concat!("Size of: ", stringify!(foldinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<foldinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(foldinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fi_level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fi_lnum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fi_low_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_low_level)
        )
    );
}
pub type foldinfo_T = foldinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct visualinfo_T {
    pub vi_start: pos_T,
    pub vi_end: pos_T,
    pub vi_mode: ::std::os::raw::c_int,
    pub vi_curswant: colnr_T,
}
#[test]
fn bindgen_test_layout_visualinfo_T() {
    const UNINIT: ::std::mem::MaybeUninit<visualinfo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<visualinfo_T>(),
        40usize,
        concat!("Size of: ", stringify!(visualinfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<visualinfo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(visualinfo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vi_curswant) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_curswant)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct undoline_T {
    pub ul_line: *mut char_u,
    pub ul_len: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_undoline_T() {
    const UNINIT: ::std::mem::MaybeUninit<undoline_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<undoline_T>(),
        16usize,
        concat!("Size of: ", stringify!(undoline_T))
    );
    assert_eq!(
        ::std::mem::align_of::<undoline_T>(),
        8usize,
        concat!("Alignment of ", stringify!(undoline_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ul_line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(undoline_T),
            "::",
            stringify!(ul_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ul_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(undoline_T),
            "::",
            stringify!(ul_len)
        )
    );
}
pub type u_entry_T = u_entry;
pub type u_header_T = u_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u_entry {
    pub ue_next: *mut u_entry_T,
    pub ue_top: linenr_T,
    pub ue_bot: linenr_T,
    pub ue_lcount: linenr_T,
    pub ue_array: *mut undoline_T,
    pub ue_size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_entry() {
    const UNINIT: ::std::mem::MaybeUninit<u_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_entry>(),
        48usize,
        concat!("Size of: ", stringify!(u_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<u_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(u_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_top) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_bot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_lcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_lcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_array) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ue_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct u_header {
    pub uh_next: u_header__bindgen_ty_1,
    pub uh_prev: u_header__bindgen_ty_2,
    pub uh_alt_next: u_header__bindgen_ty_3,
    pub uh_alt_prev: u_header__bindgen_ty_4,
    pub uh_seq: ::std::os::raw::c_long,
    pub uh_walk: ::std::os::raw::c_int,
    pub uh_entry: *mut u_entry_T,
    pub uh_getbot_entry: *mut u_entry_T,
    pub uh_cursor: pos_T,
    pub uh_cursor_vcol: ::std::os::raw::c_long,
    pub uh_flags: ::std::os::raw::c_int,
    pub uh_namedm: [pos_T; 26usize],
    pub uh_visual: visualinfo_T,
    pub uh_time: time_T,
    pub uh_save_nr: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_1 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_1),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_2 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_2),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_2),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_3 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_3),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_3),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_4 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<u_header__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_4),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_4),
            "::",
            stringify!(seq)
        )
    );
}
#[test]
fn bindgen_test_layout_u_header() {
    const UNINIT: ::std::mem::MaybeUninit<u_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<u_header>(),
        568usize,
        concat!("Size of: ", stringify!(u_header))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_alt_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_alt_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_alt_prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_alt_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_seq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_walk) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_walk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_entry) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_getbot_entry) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_getbot_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_cursor) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_cursor_vcol) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_cursor_vcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_flags) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_namedm) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_namedm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_visual) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_visual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_time) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uh_save_nr) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_save_nr)
        )
    );
}
pub type minfo_T = m_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m_info {
    pub m_size: long_u,
    pub m_next: *mut minfo_T,
}
#[test]
fn bindgen_test_layout_m_info() {
    const UNINIT: ::std::mem::MaybeUninit<m_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<m_info>(),
        16usize,
        concat!("Size of: ", stringify!(m_info))
    );
    assert_eq!(
        ::std::mem::align_of::<m_info>(),
        8usize,
        concat!("Alignment of ", stringify!(m_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m_info),
            "::",
            stringify!(m_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m_info),
            "::",
            stringify!(m_next)
        )
    );
}
pub type bhdr_T = block_hdr;
pub type memfile_T = memfile;
pub type blocknr_T = ::std::os::raw::c_long;
pub type mf_hashitem_T = mf_hashitem_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mf_hashitem_S {
    pub mhi_next: *mut mf_hashitem_T,
    pub mhi_prev: *mut mf_hashitem_T,
    pub mhi_key: blocknr_T,
}
#[test]
fn bindgen_test_layout_mf_hashitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<mf_hashitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mf_hashitem_S>(),
        24usize,
        concat!("Size of: ", stringify!(mf_hashitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<mf_hashitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(mf_hashitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mhi_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mhi_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mhi_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mf_hashtab_S {
    pub mht_mask: long_u,
    pub mht_count: long_u,
    pub mht_buckets: *mut *mut mf_hashitem_T,
    pub mht_small_buckets: [*mut mf_hashitem_T; 64usize],
    pub mht_fixed: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mf_hashtab_S() {
    const UNINIT: ::std::mem::MaybeUninit<mf_hashtab_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mf_hashtab_S>(),
        544usize,
        concat!("Size of: ", stringify!(mf_hashtab_S))
    );
    assert_eq!(
        ::std::mem::align_of::<mf_hashtab_S>(),
        8usize,
        concat!("Alignment of ", stringify!(mf_hashtab_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_buckets) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_buckets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_small_buckets) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_small_buckets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mht_fixed) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_fixed)
        )
    );
}
pub type mf_hashtab_T = mf_hashtab_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_hdr {
    pub bh_hashitem: mf_hashitem_T,
    pub bh_next: *mut bhdr_T,
    pub bh_prev: *mut bhdr_T,
    pub bh_data: *mut char_u,
    pub bh_page_count: ::std::os::raw::c_int,
    pub bh_flags: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_block_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<block_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<block_hdr>(),
        56usize,
        concat!("Size of: ", stringify!(block_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<block_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(block_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_hashitem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_hashitem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_page_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_flags) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_flags)
        )
    );
}
pub type NR_TRANS = nr_trans;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nr_trans {
    pub nt_hashitem: mf_hashitem_T,
    pub nt_new_bnum: blocknr_T,
}
#[test]
fn bindgen_test_layout_nr_trans() {
    const UNINIT: ::std::mem::MaybeUninit<nr_trans> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nr_trans>(),
        32usize,
        concat!("Size of: ", stringify!(nr_trans))
    );
    assert_eq!(
        ::std::mem::align_of::<nr_trans>(),
        8usize,
        concat!("Alignment of ", stringify!(nr_trans))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_hashitem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nr_trans),
            "::",
            stringify!(nt_hashitem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_new_bnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nr_trans),
            "::",
            stringify!(nt_new_bnum)
        )
    );
}
pub type buffblock_T = buffblock;
pub type buffheader_T = buffheader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffblock {
    pub b_next: *mut buffblock_T,
    pub b_str: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_buffblock() {
    const UNINIT: ::std::mem::MaybeUninit<buffblock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<buffblock>(),
        16usize,
        concat!("Size of: ", stringify!(buffblock))
    );
    assert_eq!(
        ::std::mem::align_of::<buffblock>(),
        8usize,
        concat!("Alignment of ", stringify!(buffblock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffblock),
            "::",
            stringify!(b_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_str) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(buffblock),
            "::",
            stringify!(b_str)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffheader {
    pub bh_first: buffblock_T,
    pub bh_curr: *mut buffblock_T,
    pub bh_index: ::std::os::raw::c_int,
    pub bh_space: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_buffheader() {
    const UNINIT: ::std::mem::MaybeUninit<buffheader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<buffheader>(),
        32usize,
        concat!("Size of: ", stringify!(buffheader))
    );
    assert_eq!(
        ::std::mem::align_of::<buffheader>(),
        8usize,
        concat!("Alignment of ", stringify!(buffheader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_curr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_curr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bh_space) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct save_redo_T {
    pub sr_redobuff: buffheader_T,
    pub sr_old_redobuff: buffheader_T,
}
#[test]
fn bindgen_test_layout_save_redo_T() {
    const UNINIT: ::std::mem::MaybeUninit<save_redo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<save_redo_T>(),
        64usize,
        concat!("Size of: ", stringify!(save_redo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<save_redo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(save_redo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sr_redobuff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(save_redo_T),
            "::",
            stringify!(sr_redobuff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sr_old_redobuff) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(save_redo_T),
            "::",
            stringify!(sr_old_redobuff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct expand {
    pub xp_context: ::std::os::raw::c_int,
    pub xp_pattern: *mut char_u,
    pub xp_pattern_len: ::std::os::raw::c_int,
    pub xp_arg: *mut char_u,
    pub xp_script_ctx: sctx_T,
    pub xp_backslash: ::std::os::raw::c_int,
    pub xp_shell: ::std::os::raw::c_int,
    pub xp_numfiles: ::std::os::raw::c_int,
    pub xp_files: *mut *mut char_u,
    pub xp_line: *mut char_u,
    pub xp_col: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_expand() {
    const UNINIT: ::std::mem::MaybeUninit<expand> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<expand>(),
        96usize,
        concat!("Size of: ", stringify!(expand))
    );
    assert_eq!(
        ::std::mem::align_of::<expand>(),
        8usize,
        concat!("Alignment of ", stringify!(expand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_pattern) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_pattern_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_pattern_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_arg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_script_ctx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_script_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_backslash) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_backslash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_shell) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_shell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_numfiles) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_numfiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_files) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_line) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_col) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_col)
        )
    );
}
pub type expand_T = expand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdline_info {
    pub cmdbuff: *mut char_u,
    pub cmdbufflen: ::std::os::raw::c_int,
    pub cmdlen: ::std::os::raw::c_int,
    pub cmdpos: ::std::os::raw::c_int,
    pub cmdfirstc: ::std::os::raw::c_int,
    pub cmdindent: ::std::os::raw::c_int,
    pub cmdprompt: *mut char_u,
    pub cmdattr: ::std::os::raw::c_int,
    pub overstrike: ::std::os::raw::c_int,
    pub xpc: *mut expand_T,
    pub xp_context: ::std::os::raw::c_int,
    pub xp_arg: *mut char_u,
    pub input_fn: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmdline_info() {
    const UNINIT: ::std::mem::MaybeUninit<cmdline_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmdline_info>(),
        80usize,
        concat!("Size of: ", stringify!(cmdline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdline_info>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdline_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdbuff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdbuff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdbufflen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdbufflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdlen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdpos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdfirstc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdfirstc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdindent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdindent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdprompt) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdprompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdattr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overstrike) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(overstrike)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xpc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xpc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_context) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp_arg) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xp_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_fn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(input_fn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdmod_T {
    pub hide: ::std::os::raw::c_int,
    pub browse: ::std::os::raw::c_int,
    pub split: ::std::os::raw::c_int,
    pub tab: ::std::os::raw::c_int,
    pub keepalt: ::std::os::raw::c_int,
    pub keepmarks: ::std::os::raw::c_int,
    pub keepjumps: ::std::os::raw::c_int,
    pub lockmarks: ::std::os::raw::c_int,
    pub keeppatterns: ::std::os::raw::c_int,
    pub noswapfile: ::std::os::raw::c_int,
    pub save_ei: *mut char_u,
    pub filter_regmatch: regmatch_T,
    pub filter_force: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmdmod_T() {
    const UNINIT: ::std::mem::MaybeUninit<cmdmod_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmdmod_T>(),
        232usize,
        concat!("Size of: ", stringify!(cmdmod_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdmod_T>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdmod_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hide) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(hide)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).browse) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(browse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(split)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tab) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(tab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepalt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepmarks) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepmarks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepjumps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepjumps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockmarks) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(lockmarks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keeppatterns) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keeppatterns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noswapfile) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(noswapfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_ei) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(save_ei)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_regmatch) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(filter_regmatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_force) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(filter_force)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memfile {
    pub mf_fname: *mut char_u,
    pub mf_ffname: *mut char_u,
    pub mf_fd: ::std::os::raw::c_int,
    pub mf_flags: ::std::os::raw::c_int,
    pub mf_reopen: ::std::os::raw::c_int,
    pub mf_free_first: *mut bhdr_T,
    pub mf_used_first: *mut bhdr_T,
    pub mf_used_last: *mut bhdr_T,
    pub mf_used_count: ::std::os::raw::c_uint,
    pub mf_used_count_max: ::std::os::raw::c_uint,
    pub mf_hash: mf_hashtab_T,
    pub mf_trans: mf_hashtab_T,
    pub mf_blocknr_max: blocknr_T,
    pub mf_blocknr_min: blocknr_T,
    pub mf_neg_count: blocknr_T,
    pub mf_infile_count: blocknr_T,
    pub mf_page_size: ::std::os::raw::c_uint,
    pub mf_dirty: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_memfile() {
    const UNINIT: ::std::mem::MaybeUninit<memfile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memfile>(),
        1192usize,
        concat!("Size of: ", stringify!(memfile))
    );
    assert_eq!(
        ::std::mem::align_of::<memfile>(),
        8usize,
        concat!("Alignment of ", stringify!(memfile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_ffname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_ffname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_reopen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_reopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_free_first) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_free_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_first) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_last) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_used_count_max) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_count_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_hash) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_trans) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_blocknr_max) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_blocknr_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_blocknr_min) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_blocknr_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_neg_count) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_neg_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_infile_count) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_infile_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_page_size) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mf_dirty) as usize - ptr as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_dirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct info_pointer {
    pub ip_bnum: blocknr_T,
    pub ip_low: linenr_T,
    pub ip_high: linenr_T,
    pub ip_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_info_pointer() {
    const UNINIT: ::std::mem::MaybeUninit<info_pointer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<info_pointer>(),
        32usize,
        concat!("Size of: ", stringify!(info_pointer))
    );
    assert_eq!(
        ::std::mem::align_of::<info_pointer>(),
        8usize,
        concat!("Alignment of ", stringify!(info_pointer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_bnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_bnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_low) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_high) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_index)
        )
    );
}
pub type infoptr_T = info_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ml_chunksize {
    pub mlcs_numlines: ::std::os::raw::c_int,
    pub mlcs_totalsize: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ml_chunksize() {
    const UNINIT: ::std::mem::MaybeUninit<ml_chunksize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ml_chunksize>(),
        16usize,
        concat!("Size of: ", stringify!(ml_chunksize))
    );
    assert_eq!(
        ::std::mem::align_of::<ml_chunksize>(),
        8usize,
        concat!("Alignment of ", stringify!(ml_chunksize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlcs_numlines) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ml_chunksize),
            "::",
            stringify!(mlcs_numlines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlcs_totalsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ml_chunksize),
            "::",
            stringify!(mlcs_totalsize)
        )
    );
}
pub type chunksize_T = ml_chunksize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memline {
    pub ml_line_count: linenr_T,
    pub ml_mfp: *mut memfile_T,
    pub ml_flags: ::std::os::raw::c_int,
    pub ml_stack: *mut infoptr_T,
    pub ml_stack_top: ::std::os::raw::c_int,
    pub ml_stack_size: ::std::os::raw::c_int,
    pub ml_line_lnum: linenr_T,
    pub ml_line_ptr: *mut char_u,
    pub ml_line_len: colnr_T,
    pub ml_locked: *mut bhdr_T,
    pub ml_locked_low: linenr_T,
    pub ml_locked_high: linenr_T,
    pub ml_locked_lineadd: ::std::os::raw::c_int,
    pub ml_chunksize: *mut chunksize_T,
    pub ml_numchunks: ::std::os::raw::c_int,
    pub ml_usedchunks: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_memline() {
    const UNINIT: ::std::mem::MaybeUninit<memline> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memline>(),
        112usize,
        concat!("Size of: ", stringify!(memline))
    );
    assert_eq!(
        ::std::mem::align_of::<memline>(),
        8usize,
        concat!("Alignment of ", stringify!(memline))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_mfp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_mfp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_stack) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_stack_top) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_stack_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_lnum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_ptr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_line_len) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked_low) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked_high) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_locked_lineadd) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_lineadd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_chunksize) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_chunksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_numchunks) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_numchunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ml_usedchunks) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_usedchunks)
        )
    );
}
pub type memline_T = memline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct textprop_S {
    pub tp_col: colnr_T,
    pub tp_len: colnr_T,
    pub tp_id: ::std::os::raw::c_int,
    pub tp_type: ::std::os::raw::c_int,
    pub tp_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_textprop_S() {
    const UNINIT: ::std::mem::MaybeUninit<textprop_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<textprop_S>(),
        20usize,
        concat!("Size of: ", stringify!(textprop_S))
    );
    assert_eq!(
        ::std::mem::align_of::<textprop_S>(),
        4usize,
        concat!("Alignment of ", stringify!(textprop_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_col) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_flags)
        )
    );
}
pub type textprop_T = textprop_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proptype_S {
    pub pt_id: ::std::os::raw::c_int,
    pub pt_type: ::std::os::raw::c_int,
    pub pt_hl_id: ::std::os::raw::c_int,
    pub pt_priority: ::std::os::raw::c_int,
    pub pt_flags: ::std::os::raw::c_int,
    pub pt_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_proptype_S() {
    const UNINIT: ::std::mem::MaybeUninit<proptype_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<proptype_S>(),
        24usize,
        concat!("Size of: ", stringify!(proptype_S))
    );
    assert_eq!(
        ::std::mem::align_of::<proptype_S>(),
        4usize,
        concat!("Alignment of ", stringify!(proptype_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_hl_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_hl_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_name)
        )
    );
}
pub type proptype_T = proptype_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signgroup_S {
    pub refcount: short_u,
    pub next_sign_id: ::std::os::raw::c_int,
    pub sg_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_signgroup_S() {
    const UNINIT: ::std::mem::MaybeUninit<signgroup_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<signgroup_S>(),
        12usize,
        concat!("Size of: ", stringify!(signgroup_S))
    );
    assert_eq!(
        ::std::mem::align_of::<signgroup_S>(),
        4usize,
        concat!("Alignment of ", stringify!(signgroup_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_sign_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(next_sign_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(sg_name)
        )
    );
}
pub type signgroup_T = signgroup_S;
pub type signlist_T = signlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signlist {
    pub id: ::std::os::raw::c_int,
    pub lnum: linenr_T,
    pub typenr: ::std::os::raw::c_int,
    pub group: *mut signgroup_T,
    pub priority: ::std::os::raw::c_int,
    pub next: *mut signlist_T,
    pub prev: *mut signlist_T,
}
#[test]
fn bindgen_test_layout_signlist() {
    const UNINIT: ::std::mem::MaybeUninit<signlist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<signlist>(),
        56usize,
        concat!("Size of: ", stringify!(signlist))
    );
    assert_eq!(
        ::std::mem::align_of::<signlist>(),
        8usize,
        concat!("Alignment of ", stringify!(signlist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typenr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(typenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arglist {
    pub al_ga: garray_T,
    pub al_refcount: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_arglist() {
    const UNINIT: ::std::mem::MaybeUninit<arglist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<arglist>(),
        32usize,
        concat!("Size of: ", stringify!(arglist))
    );
    assert_eq!(
        ::std::mem::align_of::<arglist>(),
        8usize,
        concat!("Alignment of ", stringify!(arglist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).al_ga) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(al_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).al_refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(al_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(id)
        )
    );
}
pub type alist_T = arglist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argentry {
    pub ae_fname: *mut char_u,
    pub ae_fnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_argentry() {
    const UNINIT: ::std::mem::MaybeUninit<argentry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<argentry>(),
        16usize,
        concat!("Size of: ", stringify!(argentry))
    );
    assert_eq!(
        ::std::mem::align_of::<argentry>(),
        8usize,
        concat!("Alignment of ", stringify!(argentry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argentry),
            "::",
            stringify!(ae_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_fnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argentry),
            "::",
            stringify!(ae_fnum)
        )
    );
}
pub type aentry_T = argentry;
pub type eslist_T = eslist_elem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eslist_elem {
    pub saved_emsg_silent: ::std::os::raw::c_int,
    pub next: *mut eslist_T,
}
#[test]
fn bindgen_test_layout_eslist_elem() {
    const UNINIT: ::std::mem::MaybeUninit<eslist_elem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<eslist_elem>(),
        16usize,
        concat!("Size of: ", stringify!(eslist_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<eslist_elem>(),
        8usize,
        concat!("Alignment of ", stringify!(eslist_elem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_emsg_silent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eslist_elem),
            "::",
            stringify!(saved_emsg_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eslist_elem),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct condstack {
    pub cs_flags: [::std::os::raw::c_short; 50usize],
    pub cs_pending: [::std::os::raw::c_char; 50usize],
    pub cs_pend: condstack__bindgen_ty_1,
    pub cs_forinfo: [*mut ::std::os::raw::c_void; 50usize],
    pub cs_line: [::std::os::raw::c_int; 50usize],
    pub cs_idx: ::std::os::raw::c_int,
    pub cs_looplevel: ::std::os::raw::c_int,
    pub cs_trylevel: ::std::os::raw::c_int,
    pub cs_emsg_silent_list: *mut eslist_T,
    pub cs_lflags: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union condstack__bindgen_ty_1 {
    pub csp_rv: [*mut ::std::os::raw::c_void; 50usize],
    pub csp_ex: [*mut ::std::os::raw::c_void; 50usize],
}
#[test]
fn bindgen_test_layout_condstack__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<condstack__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<condstack__bindgen_ty_1>(),
        400usize,
        concat!("Size of: ", stringify!(condstack__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<condstack__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(condstack__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csp_rv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack__bindgen_ty_1),
            "::",
            stringify!(csp_rv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csp_ex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack__bindgen_ty_1),
            "::",
            stringify!(csp_ex)
        )
    );
}
#[test]
fn bindgen_test_layout_condstack() {
    const UNINIT: ::std::mem::MaybeUninit<condstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<condstack>(),
        1184usize,
        concat!("Size of: ", stringify!(condstack))
    );
    assert_eq!(
        ::std::mem::align_of::<condstack>(),
        8usize,
        concat!("Alignment of ", stringify!(condstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_pending) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_pend) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_pend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_forinfo) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_forinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_line) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_idx) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_looplevel) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_looplevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_trylevel) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_trylevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_emsg_silent_list) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_emsg_silent_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_lflags) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_lflags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msglist {
    pub msg: *mut ::std::os::raw::c_char,
    pub throw_msg: *mut ::std::os::raw::c_char,
    pub next: *mut msglist,
}
#[test]
fn bindgen_test_layout_msglist() {
    const UNINIT: ::std::mem::MaybeUninit<msglist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msglist>(),
        24usize,
        concat!("Size of: ", stringify!(msglist))
    );
    assert_eq!(
        ::std::mem::align_of::<msglist>(),
        8usize,
        concat!("Alignment of ", stringify!(msglist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throw_msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(throw_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(next)
        )
    );
}
pub const except_type_T_ET_USER: except_type_T = 0;
pub const except_type_T_ET_ERROR: except_type_T = 1;
pub const except_type_T_ET_INTERRUPT: except_type_T = 2;
pub type except_type_T = ::std::os::raw::c_uint;
pub type except_T = vim_exception;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vim_exception {
    pub type_: except_type_T,
    pub value: *mut ::std::os::raw::c_char,
    pub messages: *mut msglist,
    pub throw_name: *mut char_u,
    pub throw_lnum: linenr_T,
    pub caught: *mut except_T,
}
#[test]
fn bindgen_test_layout_vim_exception() {
    const UNINIT: ::std::mem::MaybeUninit<vim_exception> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vim_exception>(),
        48usize,
        concat!("Size of: ", stringify!(vim_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<vim_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(vim_exception))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(messages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throw_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(throw_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throw_lnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(throw_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).caught) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(caught)
        )
    );
}
pub type cleanup_T = cleanup_stuff;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cleanup_stuff {
    pub pending: ::std::os::raw::c_int,
    pub exception: *mut except_T,
}
#[test]
fn bindgen_test_layout_cleanup_stuff() {
    const UNINIT: ::std::mem::MaybeUninit<cleanup_stuff> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cleanup_stuff>(),
        16usize,
        concat!("Size of: ", stringify!(cleanup_stuff))
    );
    assert_eq!(
        ::std::mem::align_of::<cleanup_stuff>(),
        8usize,
        concat!("Alignment of ", stringify!(cleanup_stuff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cleanup_stuff),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cleanup_stuff),
            "::",
            stringify!(exception)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attr_entry {
    pub ae_attr: ::std::os::raw::c_short,
    pub ae_u: attr_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union attr_entry__bindgen_ty_1 {
    pub term: attr_entry__bindgen_ty_1__bindgen_ty_1,
    pub cterm: attr_entry__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attr_entry__bindgen_ty_1__bindgen_ty_1 {
    pub start: *mut char_u,
    pub stop: *mut char_u,
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(stop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attr_entry__bindgen_ty_1__bindgen_ty_2 {
    pub fg_color: short_u,
    pub bg_color: short_u,
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bg_color)
        )
    );
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(attr_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(attr_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cterm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1),
            "::",
            stringify!(cterm)
        )
    );
}
#[test]
fn bindgen_test_layout_attr_entry() {
    const UNINIT: ::std::mem::MaybeUninit<attr_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<attr_entry>(),
        24usize,
        concat!("Size of: ", stringify!(attr_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(attr_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry),
            "::",
            stringify!(ae_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ae_u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry),
            "::",
            stringify!(ae_u)
        )
    );
}
pub type attrentry_T = attr_entry;
pub type mbstate_t = __darwin_mbstate_t;
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int, arg3: *mut FILE)
        -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const ::std::os::raw::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t, arg3: *mut mbstate_t)
        -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut wchar_t, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn btowc_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_l(
        arg1: *mut wchar_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: locale_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn fputws_l(arg1: *const wchar_t, arg2: *mut FILE, arg3: locale_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn getwchar_l(arg1: locale_t) -> wint_t;
}
extern "C" {
    pub fn mbrlen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit_l(arg1: *const mbstate_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn putwchar_l(arg1: wchar_t, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn swprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc_l(arg1: wint_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn vfwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime_l(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstol_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswidth_l(arg1: *const wchar_t, arg2: usize, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob_l(arg1: wint_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth_l(arg1: wchar_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> u128;
}
extern "C" {
    pub fn wcstoll_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn fgetwln_l(arg1: *mut FILE, arg2: *mut usize, arg3: locale_t) -> *mut wchar_t;
}
pub type __iconv_bool = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __tag_iconv_t {
    _unused: [u8; 0],
}
pub type iconv_t = *mut __tag_iconv_t;
extern "C" {
    pub static mut _libiconv_version: ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconv_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> iconv_t;
}
extern "C" {
    pub fn iconv(
        arg1: iconv_t,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut usize,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn iconv_close(arg1: iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iconv_get_list(
        arg1: *mut *mut *mut ::std::os::raw::c_char,
        arg2: *mut usize,
        arg3: __iconv_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iconv_free_list(arg1: *mut *mut ::std::os::raw::c_char, arg2: usize);
}
extern "C" {
    pub fn __iconv(
        arg1: iconv_t,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut usize,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut usize,
        arg6: __uint32_t,
        arg7: *mut usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_allocation_t {
    pub spaceholder: [*mut ::std::os::raw::c_void; 64usize],
}
#[test]
fn bindgen_test_layout_iconv_allocation_t() {
    const UNINIT: ::std::mem::MaybeUninit<iconv_allocation_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconv_allocation_t>(),
        512usize,
        concat!("Size of: ", stringify!(iconv_allocation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<iconv_allocation_t>(),
        8usize,
        concat!("Alignment of ", stringify!(iconv_allocation_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_allocation_t),
            "::",
            stringify!(spaceholder)
        )
    );
}
extern "C" {
    pub fn iconv_open_into(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut iconv_allocation_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libiconv_set_relocation_prefix(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    );
}
pub type iconv_unicode_char_hook = ::std::option::Option<
    unsafe extern "C" fn(mbr: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void),
>;
pub type iconv_wide_char_hook =
    ::std::option::Option<unsafe extern "C" fn(wc: wchar_t, data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_hooks {
    pub uc_hook: iconv_unicode_char_hook,
    pub wc_hook: iconv_wide_char_hook,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_iconv_hooks() {
    const UNINIT: ::std::mem::MaybeUninit<iconv_hooks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconv_hooks>(),
        24usize,
        concat!("Size of: ", stringify!(iconv_hooks))
    );
    assert_eq!(
        ::std::mem::align_of::<iconv_hooks>(),
        8usize,
        concat!("Alignment of ", stringify!(iconv_hooks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_hook) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_hooks),
            "::",
            stringify!(uc_hook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_hook) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_hooks),
            "::",
            stringify!(wc_hook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_hooks),
            "::",
            stringify!(data)
        )
    );
}
pub type iconv_unicode_mb_to_uc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_uint,
                arg2: usize,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_unicode_uc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_uint,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: usize,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_mb_to_wc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const wchar_t,
                arg2: usize,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_wc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: wchar_t,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: usize,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_fallbacks {
    pub mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback,
    pub uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback,
    pub mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback,
    pub wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_iconv_fallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<iconv_fallbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconv_fallbacks>(),
        40usize,
        concat!("Size of: ", stringify!(iconv_fallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<iconv_fallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(iconv_fallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mb_to_uc_fallback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_fallbacks),
            "::",
            stringify!(mb_to_uc_fallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_to_mb_fallback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_fallbacks),
            "::",
            stringify!(uc_to_mb_fallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mb_to_wc_fallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_fallbacks),
            "::",
            stringify!(mb_to_wc_fallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_to_mb_fallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_fallbacks),
            "::",
            stringify!(wc_to_mb_fallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iconv_fallbacks),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn iconvlist(
        do_one: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_uint,
                arg2: *const *const ::std::os::raw::c_char,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg1: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn iconv_canonicalize(arg1: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn iconvctl(
        arg1: iconv_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct typebuf_T {
    pub tb_buf: *mut char_u,
    pub tb_noremap: *mut char_u,
    pub tb_buflen: ::std::os::raw::c_int,
    pub tb_off: ::std::os::raw::c_int,
    pub tb_len: ::std::os::raw::c_int,
    pub tb_maplen: ::std::os::raw::c_int,
    pub tb_silent: ::std::os::raw::c_int,
    pub tb_no_abbr_cnt: ::std::os::raw::c_int,
    pub tb_change_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_typebuf_T() {
    const UNINIT: ::std::mem::MaybeUninit<typebuf_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<typebuf_T>(),
        48usize,
        concat!("Size of: ", stringify!(typebuf_T))
    );
    assert_eq!(
        ::std::mem::align_of::<typebuf_T>(),
        8usize,
        concat!("Alignment of ", stringify!(typebuf_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_noremap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_noremap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_buflen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_buflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_off) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_maplen) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_maplen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_silent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_no_abbr_cnt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_no_abbr_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tb_change_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_change_cnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tasave_T {
    pub save_typebuf: typebuf_T,
    pub typebuf_valid: ::std::os::raw::c_int,
    pub old_char: ::std::os::raw::c_int,
    pub old_mod_mask: ::std::os::raw::c_int,
    pub save_readbuf1: buffheader_T,
    pub save_readbuf2: buffheader_T,
    pub save_inputbuf: *mut char_u,
}
#[test]
fn bindgen_test_layout_tasave_T() {
    const UNINIT: ::std::mem::MaybeUninit<tasave_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tasave_T>(),
        136usize,
        concat!("Size of: ", stringify!(tasave_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tasave_T>(),
        8usize,
        concat!("Alignment of ", stringify!(tasave_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_typebuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_typebuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typebuf_valid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(typebuf_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_char) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(old_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_mod_mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(old_mod_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_readbuf1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_readbuf1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_readbuf2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_readbuf2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_inputbuf) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_inputbuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vimconv_T {
    pub vc_type: ::std::os::raw::c_int,
    pub vc_factor: ::std::os::raw::c_int,
    pub vc_fd: iconv_t,
    pub vc_fail: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vimconv_T() {
    const UNINIT: ::std::mem::MaybeUninit<vimconv_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vimconv_T>(),
        24usize,
        concat!("Size of: ", stringify!(vimconv_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vimconv_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vimconv_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_factor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc_fail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_fail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vir_T {
    pub vir_line: *mut char_u,
    pub vir_fd: *mut FILE,
    pub vir_conv: vimconv_T,
    pub vir_version: ::std::os::raw::c_int,
    pub vir_barlines: garray_T,
}
#[test]
fn bindgen_test_layout_vir_T() {
    const UNINIT: ::std::mem::MaybeUninit<vir_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vir_T>(),
        72usize,
        concat!("Size of: ", stringify!(vir_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vir_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vir_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_conv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_conv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_barlines) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_barlines)
        )
    );
}
pub type mapblock_T = mapblock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mapblock {
    pub m_next: *mut mapblock_T,
    pub m_keys: *mut char_u,
    pub m_orig_keys: *mut char_u,
    pub m_str: *mut char_u,
    pub m_orig_str: *mut char_u,
    pub m_keylen: ::std::os::raw::c_int,
    pub m_mode: ::std::os::raw::c_int,
    pub m_noremap: ::std::os::raw::c_int,
    pub m_silent: ::std::os::raw::c_char,
    pub m_nowait: ::std::os::raw::c_char,
    pub m_expr: ::std::os::raw::c_char,
    pub m_script_ctx: sctx_T,
}
#[test]
fn bindgen_test_layout_mapblock() {
    const UNINIT: ::std::mem::MaybeUninit<mapblock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mapblock>(),
        80usize,
        concat!("Size of: ", stringify!(mapblock))
    );
    assert_eq!(
        ::std::mem::align_of::<mapblock>(),
        8usize,
        concat!("Alignment of ", stringify!(mapblock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_keys) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_orig_keys) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_orig_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_str) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_orig_str) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_orig_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_keylen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_keylen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_mode) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_noremap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_noremap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_silent) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_nowait) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_nowait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_expr) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_expr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_script_ctx) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_script_ctx)
        )
    );
}
pub type InputMapCallback = ::std::option::Option<unsafe extern "C" fn(mapping: *const mapblock_T)>;
pub type InputUnmapCallback = ::std::option::Option<
    unsafe extern "C" fn(mode: ::std::os::raw::c_int, orig_lhs: *const char_u),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stl_hlrec {
    pub start: *mut char_u,
    pub userhl: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_stl_hlrec() {
    const UNINIT: ::std::mem::MaybeUninit<stl_hlrec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stl_hlrec>(),
        16usize,
        concat!("Size of: ", stringify!(stl_hlrec))
    );
    assert_eq!(
        ::std::mem::align_of::<stl_hlrec>(),
        8usize,
        concat!("Alignment of ", stringify!(stl_hlrec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stl_hlrec),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userhl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stl_hlrec),
            "::",
            stringify!(userhl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashitem_S {
    pub hi_hash: long_u,
    pub hi_key: *mut char_u,
}
#[test]
fn bindgen_test_layout_hashitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<hashitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashitem_S>(),
        16usize,
        concat!("Size of: ", stringify!(hashitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<hashitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(hashitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi_hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashitem_S),
            "::",
            stringify!(hi_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashitem_S),
            "::",
            stringify!(hi_key)
        )
    );
}
pub type hashitem_T = hashitem_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashtable_S {
    pub ht_mask: long_u,
    pub ht_used: long_u,
    pub ht_filled: long_u,
    pub ht_locked: ::std::os::raw::c_int,
    pub ht_error: ::std::os::raw::c_int,
    pub ht_array: *mut hashitem_T,
    pub ht_smallarray: [hashitem_T; 16usize],
}
#[test]
fn bindgen_test_layout_hashtable_S() {
    const UNINIT: ::std::mem::MaybeUninit<hashtable_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hashtable_S>(),
        296usize,
        concat!("Size of: ", stringify!(hashtable_S))
    );
    assert_eq!(
        ::std::mem::align_of::<hashtable_S>(),
        8usize,
        concat!("Alignment of ", stringify!(hashtable_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_used) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_filled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_filled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_locked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_error) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_array) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_smallarray) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_smallarray)
        )
    );
}
pub type hashtab_T = hashtable_S;
pub type hash_T = long_u;
pub type varnumber_T = i64;
pub type uvarnumber_T = u64;
pub type float_T = f64;
pub type list_T = listvar_S;
pub type dict_T = dictvar_S;
pub type partial_T = partial_S;
pub type blob_T = blobvar_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callback_T {
    pub cb_name: *mut char_u,
    pub cb_partial: *mut partial_T,
    pub cb_free_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_callback_T() {
    const UNINIT: ::std::mem::MaybeUninit<callback_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<callback_T>(),
        24usize,
        concat!("Size of: ", stringify!(callback_T))
    );
    assert_eq!(
        ::std::mem::align_of::<callback_T>(),
        8usize,
        concat!("Alignment of ", stringify!(callback_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_partial) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_free_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_free_name)
        )
    );
}
pub type job_T = jobvar_S;
pub type readq_T = readq_S;
pub type writeq_T = writeq_S;
pub type jsonq_T = jsonq_S;
pub type cbq_T = cbq_S;
pub type channel_T = channel_S;
pub const vartype_T_VAR_UNKNOWN: vartype_T = 0;
pub const vartype_T_VAR_NUMBER: vartype_T = 1;
pub const vartype_T_VAR_STRING: vartype_T = 2;
pub const vartype_T_VAR_FUNC: vartype_T = 3;
pub const vartype_T_VAR_PARTIAL: vartype_T = 4;
pub const vartype_T_VAR_LIST: vartype_T = 5;
pub const vartype_T_VAR_DICT: vartype_T = 6;
pub const vartype_T_VAR_FLOAT: vartype_T = 7;
pub const vartype_T_VAR_SPECIAL: vartype_T = 8;
pub const vartype_T_VAR_JOB: vartype_T = 9;
pub const vartype_T_VAR_CHANNEL: vartype_T = 10;
pub const vartype_T_VAR_BLOB: vartype_T = 11;
pub type vartype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct typval_T {
    pub v_type: vartype_T,
    pub v_lock: ::std::os::raw::c_char,
    pub vval: typval_T__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typval_T__bindgen_ty_1 {
    pub v_number: varnumber_T,
    pub v_float: float_T,
    pub v_string: *mut char_u,
    pub v_list: *mut list_T,
    pub v_dict: *mut dict_T,
    pub v_partial: *mut partial_T,
    pub v_job: *mut job_T,
    pub v_channel: *mut channel_T,
    pub v_blob: *mut blob_T,
}
#[test]
fn bindgen_test_layout_typval_T__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<typval_T__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<typval_T__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(typval_T__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<typval_T__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(typval_T__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_float) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_dict) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_partial) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_job) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_job)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_blob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_blob)
        )
    );
}
#[test]
fn bindgen_test_layout_typval_T() {
    const UNINIT: ::std::mem::MaybeUninit<typval_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<typval_T>(),
        16usize,
        concat!("Size of: ", stringify!(typval_T))
    );
    assert_eq!(
        ::std::mem::align_of::<typval_T>(),
        8usize,
        concat!("Alignment of ", stringify!(typval_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(v_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_lock) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(v_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(vval)
        )
    );
}
pub type listitem_T = listitem_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct listitem_S {
    pub li_next: *mut listitem_T,
    pub li_prev: *mut listitem_T,
    pub li_tv: typval_T,
}
#[test]
fn bindgen_test_layout_listitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<listitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listitem_S>(),
        32usize,
        concat!("Size of: ", stringify!(listitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).li_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).li_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).li_tv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_tv)
        )
    );
}
pub type listwatch_T = listwatch_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listwatch_S {
    pub lw_item: *mut listitem_T,
    pub lw_next: *mut listwatch_T,
}
#[test]
fn bindgen_test_layout_listwatch_S() {
    const UNINIT: ::std::mem::MaybeUninit<listwatch_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listwatch_S>(),
        16usize,
        concat!("Size of: ", stringify!(listwatch_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listwatch_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listwatch_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lw_item) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listwatch_S),
            "::",
            stringify!(lw_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lw_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listwatch_S),
            "::",
            stringify!(lw_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listvar_S {
    pub lv_first: *mut listitem_T,
    pub lv_last: *mut listitem_T,
    pub lv_watch: *mut listwatch_T,
    pub lv_idx_item: *mut listitem_T,
    pub lv_copylist: *mut list_T,
    pub lv_used_next: *mut list_T,
    pub lv_used_prev: *mut list_T,
    pub lv_refcount: ::std::os::raw::c_int,
    pub lv_len: ::std::os::raw::c_int,
    pub lv_idx: ::std::os::raw::c_int,
    pub lv_copyID: ::std::os::raw::c_int,
    pub lv_lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_listvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<listvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listvar_S>(),
        80usize,
        concat!("Size of: ", stringify!(listvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_watch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_watch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_idx_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_idx_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_copylist) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_copylist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_used_next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_used_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_used_prev) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_used_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_refcount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_len) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_idx) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_copyID) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lv_lock) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_lock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct staticList10_T {
    pub sl_list: list_T,
    pub sl_items: [listitem_T; 10usize],
}
#[test]
fn bindgen_test_layout_staticList10_T() {
    const UNINIT: ::std::mem::MaybeUninit<staticList10_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<staticList10_T>(),
        400usize,
        concat!("Size of: ", stringify!(staticList10_T))
    );
    assert_eq!(
        ::std::mem::align_of::<staticList10_T>(),
        8usize,
        concat!("Alignment of ", stringify!(staticList10_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(staticList10_T),
            "::",
            stringify!(sl_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl_items) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(staticList10_T),
            "::",
            stringify!(sl_items)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dictitem_S {
    pub di_tv: typval_T,
    pub di_flags: char_u,
    pub di_key: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_dictitem_S() {
    const UNINIT: ::std::mem::MaybeUninit<dictitem_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dictitem_S>(),
        24usize,
        concat!("Size of: ", stringify!(dictitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictitem_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_tv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_key) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_key)
        )
    );
}
pub type dictitem_T = dictitem_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dictitem16_S {
    pub di_tv: typval_T,
    pub di_flags: char_u,
    pub di_key: [char_u; 17usize],
}
#[test]
fn bindgen_test_layout_dictitem16_S() {
    const UNINIT: ::std::mem::MaybeUninit<dictitem16_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dictitem16_S>(),
        40usize,
        concat!("Size of: ", stringify!(dictitem16_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictitem16_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictitem16_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_tv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).di_key) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_key)
        )
    );
}
pub type dictitem16_T = dictitem16_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dictvar_S {
    pub dv_lock: ::std::os::raw::c_char,
    pub dv_scope: ::std::os::raw::c_char,
    pub dv_refcount: ::std::os::raw::c_int,
    pub dv_copyID: ::std::os::raw::c_int,
    pub dv_hashtab: hashtab_T,
    pub dv_copydict: *mut dict_T,
    pub dv_used_next: *mut dict_T,
    pub dv_used_prev: *mut dict_T,
}
#[test]
fn bindgen_test_layout_dictvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<dictvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dictvar_S>(),
        336usize,
        concat!("Size of: ", stringify!(dictvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_scope) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_scope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_refcount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_copyID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_hashtab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_hashtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_copydict) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_copydict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_used_next) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_used_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dv_used_prev) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_used_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blobvar_S {
    pub bv_ga: garray_T,
    pub bv_refcount: ::std::os::raw::c_int,
    pub bv_lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_blobvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<blobvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<blobvar_S>(),
        32usize,
        concat!("Size of: ", stringify!(blobvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<blobvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(blobvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_ga) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_lock) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_lock)
        )
    );
}
pub type funccall_T = funccall_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ufunc_T {
    pub uf_varargs: ::std::os::raw::c_int,
    pub uf_flags: ::std::os::raw::c_int,
    pub uf_calls: ::std::os::raw::c_int,
    pub uf_cleared: ::std::os::raw::c_int,
    pub uf_args: garray_T,
    pub uf_def_args: garray_T,
    pub uf_lines: garray_T,
    pub uf_profiling: ::std::os::raw::c_int,
    pub uf_prof_initialized: ::std::os::raw::c_int,
    pub uf_tm_count: ::std::os::raw::c_int,
    pub uf_tm_total: proftime_T,
    pub uf_tm_self: proftime_T,
    pub uf_tm_children: proftime_T,
    pub uf_tml_count: *mut ::std::os::raw::c_int,
    pub uf_tml_total: *mut proftime_T,
    pub uf_tml_self: *mut proftime_T,
    pub uf_tml_start: proftime_T,
    pub uf_tml_children: proftime_T,
    pub uf_tml_wait: proftime_T,
    pub uf_tml_idx: ::std::os::raw::c_int,
    pub uf_tml_execed: ::std::os::raw::c_int,
    pub uf_script_ctx: sctx_T,
    pub uf_refcount: ::std::os::raw::c_int,
    pub uf_scoped: *mut funccall_T,
    pub uf_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_ufunc_T() {
    const UNINIT: ::std::mem::MaybeUninit<ufunc_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ufunc_T>(),
        280usize,
        concat!("Size of: ", stringify!(ufunc_T))
    );
    assert_eq!(
        ::std::mem::align_of::<ufunc_T>(),
        8usize,
        concat!("Alignment of ", stringify!(ufunc_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_varargs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_varargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_calls) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_calls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_cleared) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_cleared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_def_args) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_def_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_lines) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_profiling) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_profiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_prof_initialized) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_prof_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_count) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_total) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_self) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_self)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tm_children) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tm_children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_count) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_total) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_self) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_self)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_start) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_children) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_wait) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_idx) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_tml_execed) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_tml_execed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_script_ctx) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_script_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_refcount) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_scoped) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_scoped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uf_name) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct funccall_S {
    pub func: *mut ufunc_T,
    pub linenr: ::std::os::raw::c_int,
    pub returned: ::std::os::raw::c_int,
    pub fixvar: [funccall_S__bindgen_ty_1; 12usize],
    pub l_vars: dict_T,
    pub l_vars_var: dictitem_T,
    pub l_avars: dict_T,
    pub l_avars_var: dictitem_T,
    pub l_varlist: list_T,
    pub l_listitems: [listitem_T; 20usize],
    pub rettv: *mut typval_T,
    pub breakpoint: linenr_T,
    pub dbg_tick: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub prof_child: proftime_T,
    pub caller: *mut funccall_T,
    pub fc_refcount: ::std::os::raw::c_int,
    pub fc_copyID: ::std::os::raw::c_int,
    pub fc_funcs: garray_T,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct funccall_S__bindgen_ty_1 {
    pub var: dictitem_T,
    pub room: [char_u; 20usize],
}
#[test]
fn bindgen_test_layout_funccall_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<funccall_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funccall_S__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(funccall_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<funccall_S__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(funccall_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S__bindgen_ty_1),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).room) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S__bindgen_ty_1),
            "::",
            stringify!(room)
        )
    );
}
#[test]
fn bindgen_test_layout_funccall_S() {
    const UNINIT: ::std::mem::MaybeUninit<funccall_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funccall_S>(),
        2112usize,
        concat!("Size of: ", stringify!(funccall_S))
    );
    assert_eq!(
        ::std::mem::align_of::<funccall_S>(),
        8usize,
        concat!("Alignment of ", stringify!(funccall_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linenr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(linenr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returned) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(returned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixvar) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fixvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_vars) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_vars_var) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_vars_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_avars) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_avars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_avars_var) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_avars_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_varlist) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_varlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_listitems) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_listitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rettv) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(rettv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breakpoint) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(breakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbg_tick) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(dbg_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prof_child) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(prof_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).caller) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(caller)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fc_refcount) as usize - ptr as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fc_copyID) as usize - ptr as usize },
        2084usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fc_funcs) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_funcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct funcdict_T {
    pub fd_dict: *mut dict_T,
    pub fd_newkey: *mut char_u,
    pub fd_di: *mut dictitem_T,
}
#[test]
fn bindgen_test_layout_funcdict_T() {
    const UNINIT: ::std::mem::MaybeUninit<funcdict_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funcdict_T>(),
        24usize,
        concat!("Size of: ", stringify!(funcdict_T))
    );
    assert_eq!(
        ::std::mem::align_of::<funcdict_T>(),
        8usize,
        concat!("Alignment of ", stringify!(funcdict_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_dict) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_newkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_newkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd_di) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_di)
        )
    );
}
pub type funccal_entry_T = funccal_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct funccal_entry {
    pub top_funccal: *mut ::std::os::raw::c_void,
    pub next: *mut funccal_entry_T,
}
#[test]
fn bindgen_test_layout_funccal_entry() {
    const UNINIT: ::std::mem::MaybeUninit<funccal_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<funccal_entry>(),
        16usize,
        concat!("Size of: ", stringify!(funccal_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<funccal_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(funccal_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_funccal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccal_entry),
            "::",
            stringify!(top_funccal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funccal_entry),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partial_S {
    pub pt_refcount: ::std::os::raw::c_int,
    pub pt_name: *mut char_u,
    pub pt_func: *mut ufunc_T,
    pub pt_auto: ::std::os::raw::c_int,
    pub pt_argc: ::std::os::raw::c_int,
    pub pt_argv: *mut typval_T,
    pub pt_dict: *mut dict_T,
}
#[test]
fn bindgen_test_layout_partial_S() {
    const UNINIT: ::std::mem::MaybeUninit<partial_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<partial_S>(),
        48usize,
        concat!("Size of: ", stringify!(partial_S))
    );
    assert_eq!(
        ::std::mem::align_of::<partial_S>(),
        8usize,
        concat!("Alignment of ", stringify!(partial_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_auto) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_auto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_argc) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_argv) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_dict) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_dict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttyinfo_T {
    pub backspace: ::std::os::raw::c_int,
    pub enter: ::std::os::raw::c_int,
    pub interrupt: ::std::os::raw::c_int,
    pub nl_does_cr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ttyinfo_T() {
    const UNINIT: ::std::mem::MaybeUninit<ttyinfo_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ttyinfo_T>(),
        16usize,
        concat!("Size of: ", stringify!(ttyinfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<ttyinfo_T>(),
        4usize,
        concat!("Alignment of ", stringify!(ttyinfo_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backspace) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(backspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(interrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nl_does_cr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(nl_does_cr)
        )
    );
}
pub const jobstatus_T_JOB_FAILED: jobstatus_T = 0;
pub const jobstatus_T_JOB_STARTED: jobstatus_T = 1;
pub const jobstatus_T_JOB_ENDED: jobstatus_T = 2;
pub const jobstatus_T_JOB_FINISHED: jobstatus_T = 3;
pub type jobstatus_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobvar_S {
    pub jv_next: *mut job_T,
    pub jv_prev: *mut job_T,
    pub jv_pid: pid_t,
    pub jv_tty_in: *mut char_u,
    pub jv_tty_out: *mut char_u,
    pub jv_status: jobstatus_T,
    pub jv_stoponexit: *mut char_u,
    pub jv_termsig: *mut char_u,
    pub jv_exitval: ::std::os::raw::c_int,
    pub jv_exit_cb: callback_T,
    pub jv_in_buf: *mut buf_T,
    pub jv_refcount: ::std::os::raw::c_int,
    pub jv_copyID: ::std::os::raw::c_int,
    pub jv_channel: *mut channel_T,
    pub jv_argv: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_jobvar_S() {
    const UNINIT: ::std::mem::MaybeUninit<jobvar_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jobvar_S>(),
        128usize,
        concat!("Size of: ", stringify!(jobvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<jobvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(jobvar_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_tty_in) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_tty_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_tty_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_tty_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_status) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_stoponexit) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_stoponexit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_termsig) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_termsig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_exitval) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_exitval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_exit_cb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_exit_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_in_buf) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_in_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_refcount) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_copyID) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_copyID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_channel) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jv_argv) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_argv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readq_S {
    pub rq_buffer: *mut char_u,
    pub rq_buflen: long_u,
    pub rq_next: *mut readq_T,
    pub rq_prev: *mut readq_T,
}
#[test]
fn bindgen_test_layout_readq_S() {
    const UNINIT: ::std::mem::MaybeUninit<readq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<readq_S>(),
        32usize,
        concat!("Size of: ", stringify!(readq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<readq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(readq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_buflen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_buflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct writeq_S {
    pub wq_ga: garray_T,
    pub wq_next: *mut writeq_T,
    pub wq_prev: *mut writeq_T,
}
#[test]
fn bindgen_test_layout_writeq_S() {
    const UNINIT: ::std::mem::MaybeUninit<writeq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<writeq_S>(),
        40usize,
        concat!("Size of: ", stringify!(writeq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<writeq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(writeq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_ga) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jsonq_S {
    pub jq_value: *mut typval_T,
    pub jq_next: *mut jsonq_T,
    pub jq_prev: *mut jsonq_T,
    pub jq_no_callback: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jsonq_S() {
    const UNINIT: ::std::mem::MaybeUninit<jsonq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jsonq_S>(),
        32usize,
        concat!("Size of: ", stringify!(jsonq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<jsonq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(jsonq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jq_no_callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_no_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cbq_S {
    pub cq_callback: callback_T,
    pub cq_seq_nr: ::std::os::raw::c_int,
    pub cq_next: *mut cbq_T,
    pub cq_prev: *mut cbq_T,
}
#[test]
fn bindgen_test_layout_cbq_S() {
    const UNINIT: ::std::mem::MaybeUninit<cbq_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cbq_S>(),
        48usize,
        concat!("Size of: ", stringify!(cbq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<cbq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(cbq_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_seq_nr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_seq_nr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_prev)
        )
    );
}
pub const ch_mode_T_MODE_NL: ch_mode_T = 0;
pub const ch_mode_T_MODE_RAW: ch_mode_T = 1;
pub const ch_mode_T_MODE_JSON: ch_mode_T = 2;
pub const ch_mode_T_MODE_JS: ch_mode_T = 3;
pub type ch_mode_T = ::std::os::raw::c_uint;
pub const job_io_T_JIO_PIPE: job_io_T = 0;
pub const job_io_T_JIO_NULL: job_io_T = 1;
pub const job_io_T_JIO_FILE: job_io_T = 2;
pub const job_io_T_JIO_BUFFER: job_io_T = 3;
pub const job_io_T_JIO_OUT: job_io_T = 4;
pub type job_io_T = ::std::os::raw::c_uint;
pub const ch_part_T_PART_SOCK: ch_part_T = 0;
pub const ch_part_T_PART_OUT: ch_part_T = 1;
pub const ch_part_T_PART_ERR: ch_part_T = 2;
pub const ch_part_T_PART_IN: ch_part_T = 3;
pub const ch_part_T_PART_COUNT: ch_part_T = 4;
pub type ch_part_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chanpart_T {
    pub ch_fd: sock_T,
    pub ch_mode: ch_mode_T,
    pub ch_io: job_io_T,
    pub ch_timeout: ::std::os::raw::c_int,
    pub ch_head: readq_T,
    pub ch_json_head: jsonq_T,
    pub ch_block_id: ::std::os::raw::c_int,
    pub ch_wait_len: usize,
    pub ch_deadline: timeval,
    pub ch_block_write: ::std::os::raw::c_int,
    pub ch_nonblocking: ::std::os::raw::c_int,
    pub ch_writeque: writeq_T,
    pub ch_cb_head: cbq_T,
    pub ch_callback: callback_T,
    pub ch_bufref: bufref_T,
    pub ch_nomodifiable: ::std::os::raw::c_int,
    pub ch_nomod_error: ::std::os::raw::c_int,
    pub ch_buf_append: ::std::os::raw::c_int,
    pub ch_buf_top: linenr_T,
    pub ch_buf_bot: linenr_T,
}
#[test]
fn bindgen_test_layout_chanpart_T() {
    const UNINIT: ::std::mem::MaybeUninit<chanpart_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<chanpart_T>(),
        280usize,
        concat!("Size of: ", stringify!(chanpart_T))
    );
    assert_eq!(
        ::std::mem::align_of::<chanpart_T>(),
        8usize,
        concat!("Alignment of ", stringify!(chanpart_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_io) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_timeout) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_head) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_json_head) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_json_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_block_id) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_block_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_wait_len) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_wait_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_deadline) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_deadline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_block_write) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_block_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nonblocking) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nonblocking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_writeque) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_writeque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_cb_head) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_cb_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_callback) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_bufref) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_bufref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nomodifiable) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nomodifiable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nomod_error) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nomod_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_buf_append) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_buf_top) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_buf_bot) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_bot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_S {
    pub ch_next: *mut channel_T,
    pub ch_prev: *mut channel_T,
    pub ch_id: ::std::os::raw::c_int,
    pub ch_last_msg_id: ::std::os::raw::c_int,
    pub ch_part: [chanpart_T; 4usize],
    pub ch_write_text_mode: ::std::os::raw::c_int,
    pub ch_hostname: *mut ::std::os::raw::c_char,
    pub ch_port: ::std::os::raw::c_int,
    pub ch_to_be_closed: ::std::os::raw::c_int,
    pub ch_to_be_freed: ::std::os::raw::c_int,
    pub ch_error: ::std::os::raw::c_int,
    pub ch_nb_close_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub ch_callback: callback_T,
    pub ch_close_cb: callback_T,
    pub ch_drop_never: ::std::os::raw::c_int,
    pub ch_keep_open: ::std::os::raw::c_int,
    pub ch_nonblock: ::std::os::raw::c_int,
    pub ch_job: *mut job_T,
    pub ch_job_killed: ::std::os::raw::c_int,
    pub ch_anonymous_pipe: ::std::os::raw::c_int,
    pub ch_killing: ::std::os::raw::c_int,
    pub ch_refcount: ::std::os::raw::c_int,
    pub ch_copyID: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_channel_S() {
    const UNINIT: ::std::mem::MaybeUninit<channel_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<channel_S>(),
        1280usize,
        concat!("Size of: ", stringify!(channel_S))
    );
    assert_eq!(
        ::std::mem::align_of::<channel_S>(),
        8usize,
        concat!("Alignment of ", stringify!(channel_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_last_msg_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_last_msg_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_part) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_write_text_mode) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_write_text_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_hostname) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_hostname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_port) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_to_be_closed) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_to_be_closed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_to_be_freed) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_to_be_freed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_error) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nb_close_cb) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_nb_close_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_callback) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_close_cb) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_close_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_drop_never) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_drop_never)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_keep_open) as usize - ptr as usize },
        1236usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_keep_open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_nonblock) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_nonblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_job) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_job)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_job_killed) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_job_killed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_anonymous_pipe) as usize - ptr as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_anonymous_pipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_killing) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_killing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_refcount) as usize - ptr as usize },
        1268usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_copyID) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_copyID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobopt_T {
    pub jo_set: ::std::os::raw::c_int,
    pub jo_set2: ::std::os::raw::c_int,
    pub jo_mode: ch_mode_T,
    pub jo_in_mode: ch_mode_T,
    pub jo_out_mode: ch_mode_T,
    pub jo_err_mode: ch_mode_T,
    pub jo_noblock: ::std::os::raw::c_int,
    pub jo_io: [job_io_T; 4usize],
    pub jo_io_name_buf: [[char_u; 65usize]; 4usize],
    pub jo_io_name: [*mut char_u; 4usize],
    pub jo_io_buf: [::std::os::raw::c_int; 4usize],
    pub jo_pty: ::std::os::raw::c_int,
    pub jo_modifiable: [::std::os::raw::c_int; 4usize],
    pub jo_message: [::std::os::raw::c_int; 4usize],
    pub jo_channel: *mut channel_T,
    pub jo_in_top: linenr_T,
    pub jo_in_bot: linenr_T,
    pub jo_callback: callback_T,
    pub jo_out_cb: callback_T,
    pub jo_err_cb: callback_T,
    pub jo_close_cb: callback_T,
    pub jo_exit_cb: callback_T,
    pub jo_drop_never: ::std::os::raw::c_int,
    pub jo_waittime: ::std::os::raw::c_int,
    pub jo_timeout: ::std::os::raw::c_int,
    pub jo_out_timeout: ::std::os::raw::c_int,
    pub jo_err_timeout: ::std::os::raw::c_int,
    pub jo_block_write: ::std::os::raw::c_int,
    pub jo_part: ::std::os::raw::c_int,
    pub jo_id: ::std::os::raw::c_int,
    pub jo_soe_buf: [char_u; 65usize],
    pub jo_stoponexit: *mut char_u,
    pub jo_env: *mut dict_T,
    pub jo_cwd_buf: [char_u; 65usize],
    pub jo_cwd: *mut char_u,
    pub jo_term_rows: ::std::os::raw::c_int,
    pub jo_term_cols: ::std::os::raw::c_int,
    pub jo_vertical: ::std::os::raw::c_int,
    pub jo_curwin: ::std::os::raw::c_int,
    pub jo_hidden: ::std::os::raw::c_int,
    pub jo_term_norestore: ::std::os::raw::c_int,
    pub jo_term_name: *mut char_u,
    pub jo_term_opencmd: *mut char_u,
    pub jo_term_finish: ::std::os::raw::c_int,
    pub jo_eof_chars: *mut char_u,
    pub jo_term_kill: *mut char_u,
    pub jo_tty_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jobopt_T() {
    const UNINIT: ::std::mem::MaybeUninit<jobopt_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jobopt_T>(),
        808usize,
        concat!("Size of: ", stringify!(jobopt_T))
    );
    assert_eq!(
        ::std::mem::align_of::<jobopt_T>(),
        8usize,
        concat!("Alignment of ", stringify!(jobopt_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_set2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_set2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_in_mode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_out_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_err_mode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_noblock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_noblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io_name_buf) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_name_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io_name) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_io_buf) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_pty) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_pty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_modifiable) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_modifiable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_message) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_channel) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_in_top) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_in_bot) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_callback) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_out_cb) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_err_cb) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_close_cb) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_close_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_exit_cb) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_exit_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_drop_never) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_drop_never)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_waittime) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_waittime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_timeout) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_out_timeout) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_err_timeout) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_block_write) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_block_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_part) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_id) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_soe_buf) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_soe_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_stoponexit) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_stoponexit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_env) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_env)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_cwd_buf) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_cwd_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_cwd) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_cwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_rows) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_cols) as usize - ptr as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_vertical) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_curwin) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_hidden) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_hidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_norestore) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_norestore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_name) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_opencmd) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_opencmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_finish) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_finish)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_eof_chars) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_eof_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_term_kill) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jo_tty_type) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_tty_type)
        )
    );
}
pub type listener_T = listener_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listener_S {
    pub lr_next: *mut listener_T,
    pub lr_id: ::std::os::raw::c_int,
    pub lr_callback: callback_T,
}
#[test]
fn bindgen_test_layout_listener_S() {
    const UNINIT: ::std::mem::MaybeUninit<listener_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<listener_S>(),
        40usize,
        concat!("Size of: ", stringify!(listener_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listener_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listener_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_callback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_stack_S {
    pub ht: *mut hashtab_T,
    pub prev: *mut ht_stack_S,
}
#[test]
fn bindgen_test_layout_ht_stack_S() {
    const UNINIT: ::std::mem::MaybeUninit<ht_stack_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ht_stack_S>(),
        16usize,
        concat!("Size of: ", stringify!(ht_stack_S))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_stack_S>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_stack_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_stack_S),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_stack_S),
            "::",
            stringify!(prev)
        )
    );
}
pub type ht_stack_T = ht_stack_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_stack_S {
    pub list: *mut list_T,
    pub prev: *mut list_stack_S,
}
#[test]
fn bindgen_test_layout_list_stack_S() {
    const UNINIT: ::std::mem::MaybeUninit<list_stack_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<list_stack_S>(),
        16usize,
        concat!("Size of: ", stringify!(list_stack_S))
    );
    assert_eq!(
        ::std::mem::align_of::<list_stack_S>(),
        8usize,
        concat!("Alignment of ", stringify!(list_stack_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_stack_S),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_stack_S),
            "::",
            stringify!(prev)
        )
    );
}
pub type list_stack_T = list_stack_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dict_iterator_T {
    pub dit_todo: long_u,
    pub dit_hi: *mut hashitem_T,
}
#[test]
fn bindgen_test_layout_dict_iterator_T() {
    const UNINIT: ::std::mem::MaybeUninit<dict_iterator_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dict_iterator_T>(),
        16usize,
        concat!("Size of: ", stringify!(dict_iterator_T))
    );
    assert_eq!(
        ::std::mem::align_of::<dict_iterator_T>(),
        8usize,
        concat!("Alignment of ", stringify!(dict_iterator_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dit_todo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dict_iterator_T),
            "::",
            stringify!(dit_todo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dit_hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dict_iterator_T),
            "::",
            stringify!(dit_hi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qf_info_S {
    _unused: [u8; 0],
}
pub type qf_info_T = qf_info_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syn_time_T {
    pub total: proftime_T,
    pub slowest: proftime_T,
    pub count: ::std::os::raw::c_long,
    pub match_: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_syn_time_T() {
    const UNINIT: ::std::mem::MaybeUninit<syn_time_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<syn_time_T>(),
        48usize,
        concat!("Size of: ", stringify!(syn_time_T))
    );
    assert_eq!(
        ::std::mem::align_of::<syn_time_T>(),
        8usize,
        concat!("Alignment of ", stringify!(syn_time_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slowest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(slowest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(syn_time_T),
            "::",
            stringify!(match_)
        )
    );
}
pub type timer_T = timer_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_S {
    pub tr_id: ::std::os::raw::c_long,
    pub tr_next: *mut timer_T,
    pub tr_prev: *mut timer_T,
    pub tr_due: proftime_T,
    pub tr_firing: ::std::os::raw::c_char,
    pub tr_paused: ::std::os::raw::c_char,
    pub tr_repeat: ::std::os::raw::c_int,
    pub tr_interval: ::std::os::raw::c_long,
    pub tr_callback: callback_T,
    pub tr_emsg_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timer_S() {
    const UNINIT: ::std::mem::MaybeUninit<timer_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timer_S>(),
        88usize,
        concat!("Size of: ", stringify!(timer_S))
    );
    assert_eq!(
        ::std::mem::align_of::<timer_S>(),
        8usize,
        concat!("Alignment of ", stringify!(timer_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_due) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_due)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_firing) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_firing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_paused) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_paused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_repeat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_interval) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_callback) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_emsg_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_emsg_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct synblock_T {
    pub dummy: ::std::os::raw::c_int,
    pub b_syn_chartab: [char_u; 32usize],
    pub b_syn_isk: *mut char_u,
}
#[test]
fn bindgen_test_layout_synblock_T() {
    const UNINIT: ::std::mem::MaybeUninit<synblock_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<synblock_T>(),
        48usize,
        concat!("Size of: ", stringify!(synblock_T))
    );
    assert_eq!(
        ::std::mem::align_of::<synblock_T>(),
        8usize,
        concat!("Alignment of ", stringify!(synblock_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_syn_chartab) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(b_syn_chartab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_syn_isk) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(b_syn_isk)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_buffer {
    pub b_ml: memline_T,
    pub b_next: *mut buf_T,
    pub b_prev: *mut buf_T,
    pub b_nwindows: ::std::os::raw::c_int,
    pub b_flags: ::std::os::raw::c_int,
    pub b_locked: ::std::os::raw::c_int,
    pub b_ffname: *mut char_u,
    pub b_sfname: *mut char_u,
    pub b_fname: *mut char_u,
    pub b_dev_valid: ::std::os::raw::c_int,
    pub b_dev: dev_t,
    pub b_ino: ino_t,
    pub b_fnum: ::std::os::raw::c_int,
    pub b_key: [char_u; 9usize],
    pub b_changed: ::std::os::raw::c_int,
    pub b_ct_di: dictitem16_T,
    pub b_last_changedtick: varnumber_T,
    pub b_saving: ::std::os::raw::c_int,
    pub b_mod_set: ::std::os::raw::c_int,
    pub b_mod_top: linenr_T,
    pub b_mod_bot: linenr_T,
    pub b_mod_xlines: ::std::os::raw::c_long,
    pub b_wininfo: *mut wininfo_T,
    pub b_mtime: ::std::os::raw::c_long,
    pub b_mtime_read: ::std::os::raw::c_long,
    pub b_orig_size: off_T,
    pub b_orig_mode: ::std::os::raw::c_int,
    pub b_last_used: time_T,
    pub b_namedm: [pos_T; 26usize],
    pub b_visual: visualinfo_T,
    pub b_visual_mode_eval: ::std::os::raw::c_int,
    pub b_last_cursor: pos_T,
    pub b_last_insert: pos_T,
    pub b_last_change: pos_T,
    pub b_changelist: [pos_T; 100usize],
    pub b_changelistlen: ::std::os::raw::c_int,
    pub b_new_change: ::std::os::raw::c_int,
    pub b_chartab: [char_u; 32usize],
    pub b_maphash: [*mut mapblock_T; 256usize],
    pub b_first_abbr: *mut mapblock_T,
    pub b_ucmds: garray_T,
    pub b_op_start: pos_T,
    pub b_op_start_orig: pos_T,
    pub b_op_end: pos_T,
    pub b_marks_read: ::std::os::raw::c_int,
    pub b_u_oldhead: *mut u_header_T,
    pub b_u_newhead: *mut u_header_T,
    pub b_u_curhead: *mut u_header_T,
    pub b_u_numhead: ::std::os::raw::c_int,
    pub b_u_synced: ::std::os::raw::c_int,
    pub b_u_seq_last: ::std::os::raw::c_long,
    pub b_u_save_nr_last: ::std::os::raw::c_long,
    pub b_u_seq_cur: ::std::os::raw::c_long,
    pub b_u_time_cur: time_T,
    pub b_u_save_nr_cur: ::std::os::raw::c_long,
    pub b_u_line_ptr: undoline_T,
    pub b_u_line_lnum: linenr_T,
    pub b_u_line_colnr: colnr_T,
    pub b_p_iminsert: ::std::os::raw::c_long,
    pub b_p_imsearch: ::std::os::raw::c_long,
    pub b_kmap_state: ::std::os::raw::c_short,
    pub b_kmap_ga: garray_T,
    pub b_p_initialized: ::std::os::raw::c_int,
    pub b_p_script_ctx: [sctx_T; 64usize],
    pub b_p_ai: ::std::os::raw::c_int,
    pub b_p_ai_nopaste: ::std::os::raw::c_int,
    pub b_p_bkc: *mut char_u,
    pub b_bkc_flags: ::std::os::raw::c_uint,
    pub b_p_ci: ::std::os::raw::c_int,
    pub b_p_bin: ::std::os::raw::c_int,
    pub b_p_bomb: ::std::os::raw::c_int,
    pub b_p_bh: *mut char_u,
    pub b_p_bt: *mut char_u,
    pub b_has_qf_entry: ::std::os::raw::c_int,
    pub b_p_bl: ::std::os::raw::c_int,
    pub b_p_com: *mut char_u,
    pub b_p_cms: *mut char_u,
    pub b_p_tfu: *mut char_u,
    pub b_p_eol: ::std::os::raw::c_int,
    pub b_p_fixeol: ::std::os::raw::c_int,
    pub b_p_et: ::std::os::raw::c_int,
    pub b_p_et_nobin: ::std::os::raw::c_int,
    pub b_p_et_nopaste: ::std::os::raw::c_int,
    pub b_p_fenc: *mut char_u,
    pub b_p_ff: *mut char_u,
    pub b_p_ft: *mut char_u,
    pub b_p_fo: *mut char_u,
    pub b_p_flp: *mut char_u,
    pub b_p_inf: ::std::os::raw::c_int,
    pub b_p_isk: *mut char_u,
    pub b_p_def: *mut char_u,
    pub b_p_inc: *mut char_u,
    pub b_p_inex: *mut char_u,
    pub b_p_inex_flags: long_u,
    pub b_p_inde: *mut char_u,
    pub b_p_inde_flags: long_u,
    pub b_p_indk: *mut char_u,
    pub b_p_fp: *mut char_u,
    pub b_p_fex: *mut char_u,
    pub b_p_fex_flags: long_u,
    pub b_p_kp: *mut char_u,
    pub b_p_menc: *mut char_u,
    pub b_p_mps: *mut char_u,
    pub b_p_ml: ::std::os::raw::c_int,
    pub b_p_ml_nobin: ::std::os::raw::c_int,
    pub b_p_ma: ::std::os::raw::c_int,
    pub b_p_nf: *mut char_u,
    pub b_p_pi: ::std::os::raw::c_int,
    pub b_p_qe: *mut char_u,
    pub b_p_ro: ::std::os::raw::c_int,
    pub b_p_sw: ::std::os::raw::c_long,
    pub b_p_sn: ::std::os::raw::c_int,
    pub b_p_sts: ::std::os::raw::c_long,
    pub b_p_sts_nopaste: ::std::os::raw::c_long,
    pub b_p_sua: *mut char_u,
    pub b_p_swf: ::std::os::raw::c_int,
    pub b_p_ts: ::std::os::raw::c_long,
    pub b_p_tx: ::std::os::raw::c_int,
    pub b_p_tw: ::std::os::raw::c_long,
    pub b_p_tw_nobin: ::std::os::raw::c_long,
    pub b_p_tw_nopaste: ::std::os::raw::c_long,
    pub b_p_wm: ::std::os::raw::c_long,
    pub b_p_wm_nobin: ::std::os::raw::c_long,
    pub b_p_wm_nopaste: ::std::os::raw::c_long,
    pub b_p_vsts: *mut char_u,
    pub b_p_vsts_array: *mut ::std::os::raw::c_int,
    pub b_p_vsts_nopaste: *mut char_u,
    pub b_p_vts: *mut char_u,
    pub b_p_vts_array: *mut ::std::os::raw::c_int,
    pub b_p_keymap: *mut char_u,
    pub b_p_gp: *mut char_u,
    pub b_p_mp: *mut char_u,
    pub b_p_efm: *mut char_u,
    pub b_p_ep: *mut char_u,
    pub b_p_path: *mut char_u,
    pub b_p_ar: ::std::os::raw::c_int,
    pub b_p_tags: *mut char_u,
    pub b_p_tc: *mut char_u,
    pub b_tc_flags: ::std::os::raw::c_uint,
    pub b_p_ul: ::std::os::raw::c_long,
    pub b_p_udf: ::std::os::raw::c_int,
    pub b_no_eol_lnum: linenr_T,
    pub b_start_eol: ::std::os::raw::c_int,
    pub b_start_ffc: ::std::os::raw::c_int,
    pub b_start_fenc: *mut char_u,
    pub b_bad_char: ::std::os::raw::c_int,
    pub b_start_bomb: ::std::os::raw::c_int,
    pub b_bufvar: dictitem_T,
    pub b_vars: *mut dict_T,
    pub b_listener: *mut listener_T,
    pub b_recorded_changes: *mut list_T,
    pub b_may_swap: ::std::os::raw::c_int,
    pub b_did_warn: ::std::os::raw::c_int,
    pub b_help: ::std::os::raw::c_int,
    pub b_shortname: ::std::os::raw::c_int,
    pub b_prompt_text: *mut char_u,
    pub b_prompt_callback: callback_T,
    pub b_prompt_interrupt: callback_T,
    pub b_prompt_insert: ::std::os::raw::c_int,
    pub b_signlist: *mut signlist_T,
    pub b_write_to_channel: ::std::os::raw::c_int,
    pub b_mapped_ctrl_c: ::std::os::raw::c_int,
    pub b_diff_failed: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_file_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<file_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<file_buffer>(),
        7064usize,
        concat!("Size of: ", stringify!(file_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<file_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(file_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ml) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_next) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prev) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_nwindows) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_nwindows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_flags) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_locked) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ffname) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ffname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_sfname) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_sfname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_fname) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_dev_valid) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_dev_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_dev) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ino) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_fnum) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_key) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_changed) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ct_di) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ct_di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_changedtick) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_changedtick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_saving) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_saving)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_set) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_top) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_bot) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mod_xlines) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_xlines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_wininfo) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_wininfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mtime) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mtime_read) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mtime_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_orig_size) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_orig_mode) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_orig_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_used) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_namedm) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_namedm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_visual) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_visual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_visual_mode_eval) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_visual_mode_eval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_cursor) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_insert) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_last_change) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_changelist) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changelist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_changelistlen) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changelistlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_new_change) as usize - ptr as usize },
        2452usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_new_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_chartab) as usize - ptr as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_chartab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_maphash) as usize - ptr as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_maphash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_first_abbr) as usize - ptr as usize },
        4536usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_first_abbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_ucmds) as usize - ptr as usize },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ucmds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_op_start) as usize - ptr as usize },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_op_start_orig) as usize - ptr as usize },
        4584usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_start_orig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_op_end) as usize - ptr as usize },
        4600usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_marks_read) as usize - ptr as usize },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_marks_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_oldhead) as usize - ptr as usize },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_oldhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_newhead) as usize - ptr as usize },
        4632usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_newhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_curhead) as usize - ptr as usize },
        4640usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_curhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_numhead) as usize - ptr as usize },
        4648usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_numhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_synced) as usize - ptr as usize },
        4652usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_synced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_seq_last) as usize - ptr as usize },
        4656usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_seq_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_save_nr_last) as usize - ptr as usize },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_save_nr_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_seq_cur) as usize - ptr as usize },
        4672usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_seq_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_time_cur) as usize - ptr as usize },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_time_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_save_nr_cur) as usize - ptr as usize },
        4688usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_save_nr_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_line_ptr) as usize - ptr as usize },
        4696usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_line_lnum) as usize - ptr as usize },
        4712usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_u_line_colnr) as usize - ptr as usize },
        4720usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_colnr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_iminsert) as usize - ptr as usize },
        4728usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_iminsert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_imsearch) as usize - ptr as usize },
        4736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_imsearch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_kmap_state) as usize - ptr as usize },
        4744usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_kmap_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_kmap_ga) as usize - ptr as usize },
        4752usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_kmap_ga)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_initialized) as usize - ptr as usize },
        4776usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_script_ctx) as usize - ptr as usize },
        4784usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_script_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ai) as usize - ptr as usize },
        6320usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ai)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ai_nopaste) as usize - ptr as usize },
        6324usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ai_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bkc) as usize - ptr as usize },
        6328usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bkc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_bkc_flags) as usize - ptr as usize },
        6336usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bkc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ci) as usize - ptr as usize },
        6340usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ci)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bin) as usize - ptr as usize },
        6344usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bomb) as usize - ptr as usize },
        6348usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bomb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bh) as usize - ptr as usize },
        6352usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bt) as usize - ptr as usize },
        6360usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_has_qf_entry) as usize - ptr as usize },
        6368usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_has_qf_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_bl) as usize - ptr as usize },
        6372usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_com) as usize - ptr as usize },
        6376usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_com)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_cms) as usize - ptr as usize },
        6384usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_cms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tfu) as usize - ptr as usize },
        6392usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tfu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_eol) as usize - ptr as usize },
        6400usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_eol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fixeol) as usize - ptr as usize },
        6404usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fixeol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_et) as usize - ptr as usize },
        6408usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_et_nobin) as usize - ptr as usize },
        6412usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_et_nopaste) as usize - ptr as usize },
        6416usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fenc) as usize - ptr as usize },
        6424usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fenc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ff) as usize - ptr as usize },
        6432usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ft) as usize - ptr as usize },
        6440usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fo) as usize - ptr as usize },
        6448usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_flp) as usize - ptr as usize },
        6456usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_flp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inf) as usize - ptr as usize },
        6464usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_isk) as usize - ptr as usize },
        6472usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_isk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_def) as usize - ptr as usize },
        6480usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inc) as usize - ptr as usize },
        6488usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inex) as usize - ptr as usize },
        6496usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inex_flags) as usize - ptr as usize },
        6504usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inex_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inde) as usize - ptr as usize },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inde)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_inde_flags) as usize - ptr as usize },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inde_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_indk) as usize - ptr as usize },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_indk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fp) as usize - ptr as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fex) as usize - ptr as usize },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_fex_flags) as usize - ptr as usize },
        6552usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fex_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_kp) as usize - ptr as usize },
        6560usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_kp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_menc) as usize - ptr as usize },
        6568usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_menc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_mps) as usize - ptr as usize },
        6576usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_mps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ml) as usize - ptr as usize },
        6584usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ml_nobin) as usize - ptr as usize },
        6588usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ml_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ma) as usize - ptr as usize },
        6592usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_nf) as usize - ptr as usize },
        6600usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_nf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_pi) as usize - ptr as usize },
        6608usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_qe) as usize - ptr as usize },
        6616usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_qe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ro) as usize - ptr as usize },
        6624usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sw) as usize - ptr as usize },
        6632usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sn) as usize - ptr as usize },
        6640usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sts) as usize - ptr as usize },
        6648usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sts_nopaste) as usize - ptr as usize },
        6656usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sts_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_sua) as usize - ptr as usize },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sua)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_swf) as usize - ptr as usize },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_swf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ts) as usize - ptr as usize },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tx) as usize - ptr as usize },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tw) as usize - ptr as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tw_nobin) as usize - ptr as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tw_nopaste) as usize - ptr as usize },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_wm) as usize - ptr as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_wm_nobin) as usize - ptr as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm_nobin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_wm_nopaste) as usize - ptr as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vsts) as usize - ptr as usize },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vsts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vsts_array) as usize - ptr as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vsts_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vsts_nopaste) as usize - ptr as usize },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vsts_nopaste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vts) as usize - ptr as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_vts_array) as usize - ptr as usize },
        6776usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_vts_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_keymap) as usize - ptr as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_keymap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_gp) as usize - ptr as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_mp) as usize - ptr as usize },
        6800usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_mp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_efm) as usize - ptr as usize },
        6808usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_efm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ep) as usize - ptr as usize },
        6816usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_path) as usize - ptr as usize },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ar) as usize - ptr as usize },
        6832usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tags) as usize - ptr as usize },
        6840usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_tc) as usize - ptr as usize },
        6848usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_tc_flags) as usize - ptr as usize },
        6856usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_tc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_ul) as usize - ptr as usize },
        6864usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_p_udf) as usize - ptr as usize },
        6872usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_udf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_no_eol_lnum) as usize - ptr as usize },
        6880usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_no_eol_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_eol) as usize - ptr as usize },
        6888usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_eol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_ffc) as usize - ptr as usize },
        6892usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_ffc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_fenc) as usize - ptr as usize },
        6896usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_fenc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_bad_char) as usize - ptr as usize },
        6904usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bad_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_start_bomb) as usize - ptr as usize },
        6908usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_bomb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_bufvar) as usize - ptr as usize },
        6912usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bufvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_vars) as usize - ptr as usize },
        6936usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_listener) as usize - ptr as usize },
        6944usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_listener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_recorded_changes) as usize - ptr as usize },
        6952usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_recorded_changes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_may_swap) as usize - ptr as usize },
        6960usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_may_swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_did_warn) as usize - ptr as usize },
        6964usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_did_warn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_help) as usize - ptr as usize },
        6968usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_help)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_shortname) as usize - ptr as usize },
        6972usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_shortname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_text) as usize - ptr as usize },
        6976usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_callback) as usize - ptr as usize },
        6984usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_interrupt) as usize - ptr as usize },
        7008usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_interrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_prompt_insert) as usize - ptr as usize },
        7032usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prompt_insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_signlist) as usize - ptr as usize },
        7040usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_signlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_write_to_channel) as usize - ptr as usize },
        7048usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_write_to_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_mapped_ctrl_c) as usize - ptr as usize },
        7052usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mapped_ctrl_c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b_diff_failed) as usize - ptr as usize },
        7056usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_diff_failed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufferUpdate_T {
    pub buf: *mut buf_T,
    pub lnum: linenr_T,
    pub lnume: linenr_T,
    pub xtra: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_bufferUpdate_T() {
    const UNINIT: ::std::mem::MaybeUninit<bufferUpdate_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bufferUpdate_T>(),
        32usize,
        concat!("Size of: ", stringify!(bufferUpdate_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bufferUpdate_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bufferUpdate_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnume) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(lnume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xtra) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(xtra)
        )
    );
}
pub const writeFailureReason_T_FILE_CHANGED: writeFailureReason_T = 0;
pub type writeFailureReason_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct optionSet_T {
    pub fullname: *mut char_u,
    pub shortname: *mut char_u,
    pub type_: ::std::os::raw::c_int,
    pub numval: ::std::os::raw::c_long,
    pub stringval: *mut char_u,
    pub opt_flags: ::std::os::raw::c_int,
    pub hidden: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_optionSet_T() {
    const UNINIT: ::std::mem::MaybeUninit<optionSet_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<optionSet_T>(),
        48usize,
        concat!("Size of: ", stringify!(optionSet_T))
    );
    assert_eq!(
        ::std::mem::align_of::<optionSet_T>(),
        8usize,
        concat!("Alignment of ", stringify!(optionSet_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(fullname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(shortname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numval) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(numval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(stringval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(opt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(hidden)
        )
    );
}
pub type BufferUpdateCallback =
    ::std::option::Option<unsafe extern "C" fn(bufferUpdate: bufferUpdate_T)>;
pub type FileWriteFailureCallback = ::std::option::Option<
    unsafe extern "C" fn(failureReason: writeFailureReason_T, buf: *mut buf_T),
>;
pub type MessageCallback = ::std::option::Option<
    unsafe extern "C" fn(title: *mut char_u, msg: *mut char_u, priority: msgPriority_T),
>;
pub type DirectoryChangedCallback = ::std::option::Option<unsafe extern "C" fn(path: *mut char_u)>;
pub type QuitCallback =
    ::std::option::Option<unsafe extern "C" fn(buf: *mut buf_T, isForced: ::std::os::raw::c_int)>;
pub type OptionSetCallback =
    ::std::option::Option<unsafe extern "C" fn(optionSet: *mut optionSet_T)>;
pub type OutputCallback = ::std::option::Option<
    unsafe extern "C" fn(cmd: *mut char_u, output: *mut char_u, isSilent: ::std::os::raw::c_int),
>;
pub type ToggleCommentsCallback = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut buf_T,
        startLine: linenr_T,
        endLine: linenr_T,
        outCount: *mut linenr_T,
        outLines: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type diff_T = diffblock_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diffblock_S {
    pub df_next: *mut diff_T,
    pub df_lnum: [linenr_T; 8usize],
    pub df_count: [linenr_T; 8usize],
}
#[test]
fn bindgen_test_layout_diffblock_S() {
    const UNINIT: ::std::mem::MaybeUninit<diffblock_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<diffblock_S>(),
        136usize,
        concat!("Size of: ", stringify!(diffblock_S))
    );
    assert_eq!(
        ::std::mem::align_of::<diffblock_S>(),
        8usize,
        concat!("Alignment of ", stringify!(diffblock_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).df_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).df_lnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).df_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_count)
        )
    );
}
pub type tabpage_T = tabpage_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tabpage_S {
    pub tp_next: *mut tabpage_T,
    pub tp_topframe: *mut frame_T,
    pub tp_curwin: *mut win_T,
    pub tp_prevwin: *mut win_T,
    pub tp_firstwin: *mut win_T,
    pub tp_lastwin: *mut win_T,
    pub tp_old_Rows: ::std::os::raw::c_long,
    pub tp_old_Columns: ::std::os::raw::c_long,
    pub tp_ch_used: ::std::os::raw::c_long,
    pub tp_localdir: *mut char_u,
    pub tp_first_diff: *mut diff_T,
    pub tp_diffbuf: [*mut buf_T; 8usize],
    pub tp_diff_invalid: ::std::os::raw::c_int,
    pub tp_diff_update: ::std::os::raw::c_int,
    pub tp_snapshot: [*mut frame_T; 2usize],
    pub tp_winvar: dictitem_T,
    pub tp_vars: *mut dict_T,
}
#[test]
fn bindgen_test_layout_tabpage_S() {
    const UNINIT: ::std::mem::MaybeUninit<tabpage_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tabpage_S>(),
        208usize,
        concat!("Size of: ", stringify!(tabpage_S))
    );
    assert_eq!(
        ::std::mem::align_of::<tabpage_S>(),
        8usize,
        concat!("Alignment of ", stringify!(tabpage_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_topframe) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_topframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_curwin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_prevwin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_prevwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_firstwin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_firstwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_lastwin) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_lastwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_old_Rows) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_old_Rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_old_Columns) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_old_Columns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_ch_used) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_ch_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_localdir) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_localdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_first_diff) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_first_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_diffbuf) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diffbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_diff_invalid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diff_invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_diff_update) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diff_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_snapshot) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_snapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_winvar) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_winvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp_vars) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_vars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_line {
    pub wl_lnum: linenr_T,
    pub wl_size: short_u,
    pub wl_valid: ::std::os::raw::c_char,
    pub wl_folded: ::std::os::raw::c_char,
    pub wl_lastlnum: linenr_T,
}
#[test]
fn bindgen_test_layout_w_line() {
    const UNINIT: ::std::mem::MaybeUninit<w_line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<w_line>(),
        24usize,
        concat!("Size of: ", stringify!(w_line))
    );
    assert_eq!(
        ::std::mem::align_of::<w_line>(),
        8usize,
        concat!("Alignment of ", stringify!(w_line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_valid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_folded) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_folded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wl_lastlnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_lastlnum)
        )
    );
}
pub type wline_T = w_line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct frame_S {
    pub fr_layout: ::std::os::raw::c_char,
    pub fr_width: ::std::os::raw::c_int,
    pub fr_newwidth: ::std::os::raw::c_int,
    pub fr_height: ::std::os::raw::c_int,
    pub fr_newheight: ::std::os::raw::c_int,
    pub fr_parent: *mut frame_T,
    pub fr_next: *mut frame_T,
    pub fr_prev: *mut frame_T,
    pub fr_child: *mut frame_T,
    pub fr_win: *mut win_T,
}
#[test]
fn bindgen_test_layout_frame_S() {
    const UNINIT: ::std::mem::MaybeUninit<frame_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<frame_S>(),
        64usize,
        concat!("Size of: ", stringify!(frame_S))
    );
    assert_eq!(
        ::std::mem::align_of::<frame_S>(),
        8usize,
        concat!("Alignment of ", stringify!(frame_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_layout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_newwidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_newwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_newheight) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_newheight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_parent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_child) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr_win) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_win)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct match_T {
    pub rm: regmmatch_T,
    pub buf: *mut buf_T,
    pub lnum: linenr_T,
    pub attr: ::std::os::raw::c_int,
    pub attr_cur: ::std::os::raw::c_int,
    pub first_lnum: linenr_T,
    pub startcol: colnr_T,
    pub endcol: colnr_T,
    pub is_addpos: ::std::os::raw::c_int,
    pub tm: proftime_T,
}
#[test]
fn bindgen_test_layout_match_T() {
    const UNINIT: ::std::mem::MaybeUninit<match_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<match_T>(),
        400usize,
        concat!("Size of: ", stringify!(match_T))
    );
    assert_eq!(
        ::std::mem::align_of::<match_T>(),
        8usize,
        concat!("Alignment of ", stringify!(match_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_cur) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(attr_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_lnum) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(first_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startcol) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(startcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endcol) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(endcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_addpos) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(is_addpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(tm)
        )
    );
}
#[doc = " Struct used for returning search highlight match positions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchHighlight_T {
    pub start: pos_T,
    pub end: pos_T,
}
#[test]
fn bindgen_test_layout_searchHighlight_T() {
    const UNINIT: ::std::mem::MaybeUninit<searchHighlight_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<searchHighlight_T>(),
        32usize,
        concat!("Size of: ", stringify!(searchHighlight_T))
    );
    assert_eq!(
        ::std::mem::align_of::<searchHighlight_T>(),
        8usize,
        concat!("Alignment of ", stringify!(searchHighlight_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(searchHighlight_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(searchHighlight_T),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llpos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_llpos_T() {
    const UNINIT: ::std::mem::MaybeUninit<llpos_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llpos_T>(),
        16usize,
        concat!("Size of: ", stringify!(llpos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<llpos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(llpos_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(len)
        )
    );
}
pub type posmatch_T = posmatch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posmatch {
    pub pos: [llpos_T; 8usize],
    pub cur: ::std::os::raw::c_int,
    pub toplnum: linenr_T,
    pub botlnum: linenr_T,
}
#[test]
fn bindgen_test_layout_posmatch() {
    const UNINIT: ::std::mem::MaybeUninit<posmatch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posmatch>(),
        152usize,
        concat!("Size of: ", stringify!(posmatch))
    );
    assert_eq!(
        ::std::mem::align_of::<posmatch>(),
        8usize,
        concat!("Alignment of ", stringify!(posmatch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toplnum) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(toplnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).botlnum) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(botlnum)
        )
    );
}
pub type matchitem_T = matchitem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct matchitem {
    pub next: *mut matchitem_T,
    pub id: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub pattern: *mut char_u,
    pub hlg_id: ::std::os::raw::c_int,
    pub match_: regmmatch_T,
    pub pos: posmatch_T,
    pub hl: match_T,
}
#[test]
fn bindgen_test_layout_matchitem() {
    const UNINIT: ::std::mem::MaybeUninit<matchitem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<matchitem>(),
        920usize,
        concat!("Size of: ", stringify!(matchitem))
    );
    assert_eq!(
        ::std::mem::align_of::<matchitem>(),
        8usize,
        concat!("Alignment of ", stringify!(matchitem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hlg_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(hlg_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).match_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hl) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(hl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pos_save_T {
    pub w_topline_save: ::std::os::raw::c_int,
    pub w_topline_corr: ::std::os::raw::c_int,
    pub w_cursor_save: pos_T,
    pub w_cursor_corr: pos_T,
}
#[test]
fn bindgen_test_layout_pos_save_T() {
    const UNINIT: ::std::mem::MaybeUninit<pos_save_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pos_save_T>(),
        40usize,
        concat!("Size of: ", stringify!(pos_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pos_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pos_save_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline_save) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_topline_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline_corr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_topline_corr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cursor_save) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_cursor_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cursor_corr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_cursor_corr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct window_S {
    pub w_id: ::std::os::raw::c_int,
    pub w_buffer: *mut buf_T,
    pub w_prev: *mut win_T,
    pub w_next: *mut win_T,
    pub w_closing: ::std::os::raw::c_int,
    pub w_frame: *mut frame_T,
    pub w_cursor: pos_T,
    pub w_curswant: colnr_T,
    pub w_set_curswant: ::std::os::raw::c_int,
    pub w_old_visual_mode: ::std::os::raw::c_char,
    pub w_old_cursor_lnum: linenr_T,
    pub w_old_cursor_fcol: colnr_T,
    pub w_old_cursor_lcol: colnr_T,
    pub w_old_visual_lnum: linenr_T,
    pub w_old_visual_col: colnr_T,
    pub w_old_curswant: colnr_T,
    pub w_topline: linenr_T,
    pub w_topline_was_set: ::std::os::raw::c_char,
    pub w_topfill: ::std::os::raw::c_int,
    pub w_old_topfill: ::std::os::raw::c_int,
    pub w_botfill: ::std::os::raw::c_int,
    pub w_old_botfill: ::std::os::raw::c_int,
    pub w_leftcol: colnr_T,
    pub w_skipcol: colnr_T,
    pub w_winrow: ::std::os::raw::c_int,
    pub w_height: ::std::os::raw::c_int,
    pub w_status_height: ::std::os::raw::c_int,
    pub w_wincol: ::std::os::raw::c_int,
    pub w_width: ::std::os::raw::c_int,
    pub w_vsep_width: ::std::os::raw::c_int,
    pub w_save_cursor: pos_save_T,
    pub w_valid: ::std::os::raw::c_int,
    pub w_valid_cursor: pos_T,
    pub w_valid_leftcol: colnr_T,
    pub w_cline_height: ::std::os::raw::c_int,
    pub w_cline_folded: ::std::os::raw::c_int,
    pub w_cline_row: ::std::os::raw::c_int,
    pub w_virtcol: colnr_T,
    pub w_wrow: ::std::os::raw::c_int,
    pub w_wcol: ::std::os::raw::c_int,
    pub w_botline: linenr_T,
    pub w_empty_rows: ::std::os::raw::c_int,
    pub w_filler_rows: ::std::os::raw::c_int,
    pub w_lines_valid: ::std::os::raw::c_int,
    pub w_lines: *mut wline_T,
    pub w_folds: garray_T,
    pub w_fold_manual: ::std::os::raw::c_char,
    pub w_foldinvalid: ::std::os::raw::c_char,
    pub w_nrwidth: ::std::os::raw::c_int,
    pub w_redr_type: ::std::os::raw::c_int,
    pub w_upd_rows: ::std::os::raw::c_int,
    pub w_redraw_top: linenr_T,
    pub w_redraw_bot: linenr_T,
    pub w_redr_status: ::std::os::raw::c_int,
    pub w_alt_fnum: ::std::os::raw::c_int,
    pub w_alist: *mut alist_T,
    pub w_arg_idx: ::std::os::raw::c_int,
    pub w_arg_idx_invalid: ::std::os::raw::c_int,
    pub w_localdir: *mut char_u,
    pub w_onebuf_opt: winopt_T,
    pub w_allbuf_opt: winopt_T,
    pub w_p_fde_flags: long_u,
    pub w_p_fdt_flags: long_u,
    pub w_p_brimin: ::std::os::raw::c_int,
    pub w_p_brishift: ::std::os::raw::c_int,
    pub w_p_brisbr: ::std::os::raw::c_int,
    pub w_p_siso: ::std::os::raw::c_long,
    pub w_p_so: ::std::os::raw::c_long,
    pub w_scbind_pos: ::std::os::raw::c_long,
    pub w_winvar: dictitem_T,
    pub w_vars: *mut dict_T,
    pub w_pcmark: pos_T,
    pub w_prev_pcmark: pos_T,
    pub w_jumplist: [xfmark_T; 100usize],
    pub w_jumplistlen: ::std::os::raw::c_int,
    pub w_jumplistidx: ::std::os::raw::c_int,
    pub w_changelistidx: ::std::os::raw::c_int,
    pub w_match_head: *mut matchitem_T,
    pub w_next_match_id: ::std::os::raw::c_int,
    pub w_tagstack: [taggy_T; 20usize],
    pub w_tagstackidx: ::std::os::raw::c_int,
    pub w_tagstacklen: ::std::os::raw::c_int,
    pub w_fraction: ::std::os::raw::c_int,
    pub w_prev_fraction_row: ::std::os::raw::c_int,
    pub w_nrwidth_line_count: linenr_T,
    pub w_nuw_cached: ::std::os::raw::c_long,
    pub w_nrwidth_width: ::std::os::raw::c_int,
    pub w_llist: *mut qf_info_T,
    pub w_llist_ref: *mut qf_info_T,
}
#[test]
fn bindgen_test_layout_window_S() {
    const UNINIT: ::std::mem::MaybeUninit<window_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<window_S>(),
        7560usize,
        concat!("Size of: ", stringify!(window_S))
    );
    assert_eq!(
        ::std::mem::align_of::<window_S>(),
        8usize,
        concat!("Alignment of ", stringify!(window_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_closing) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_closing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_frame) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cursor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_curswant) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_curswant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_set_curswant) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_set_curswant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_visual_mode) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_cursor_lnum) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_cursor_fcol) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_fcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_cursor_lcol) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_lcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_visual_lnum) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_visual_col) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_curswant) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_curswant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topline_was_set) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topline_was_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_topfill) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_topfill) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_topfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_botfill) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_botfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_old_botfill) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_botfill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_leftcol) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_leftcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_skipcol) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_skipcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_winrow) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_winrow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_height) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_status_height) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_status_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_wincol) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wincol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_width) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_vsep_width) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_vsep_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_save_cursor) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_save_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_valid) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_valid_cursor) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_valid_leftcol) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid_leftcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cline_height) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cline_folded) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_folded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_cline_row) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_virtcol) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_virtcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_wrow) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wrow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_wcol) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_botline) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_botline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_empty_rows) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_empty_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_filler_rows) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_filler_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_lines_valid) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_lines_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_lines) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_lines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_folds) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_folds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_fold_manual) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_fold_manual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_foldinvalid) as usize - ptr as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_foldinvalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nrwidth) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redr_type) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_upd_rows) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_upd_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redraw_top) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redraw_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redraw_bot) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redraw_bot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_redr_status) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redr_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_alt_fnum) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_alt_fnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_alist) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_alist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_arg_idx) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_arg_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_arg_idx_invalid) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_arg_idx_invalid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_localdir) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_localdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_onebuf_opt) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_onebuf_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_allbuf_opt) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_allbuf_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_fde_flags) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_fde_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_fdt_flags) as usize - ptr as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_fdt_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_brimin) as usize - ptr as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brimin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_brishift) as usize - ptr as usize },
        2412usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brishift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_brisbr) as usize - ptr as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brisbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_siso) as usize - ptr as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_siso)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_p_so) as usize - ptr as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_so)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_scbind_pos) as usize - ptr as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_scbind_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_winvar) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_winvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_vars) as usize - ptr as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_vars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_pcmark) as usize - ptr as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_pcmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_prev_pcmark) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev_pcmark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_jumplist) as usize - ptr as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_jumplistlen) as usize - ptr as usize },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplistlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_jumplistidx) as usize - ptr as usize },
        6516usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplistidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_changelistidx) as usize - ptr as usize },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_changelistidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_match_head) as usize - ptr as usize },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_match_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_next_match_id) as usize - ptr as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_next_match_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_tagstack) as usize - ptr as usize },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_tagstackidx) as usize - ptr as usize },
        7504usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstackidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_tagstacklen) as usize - ptr as usize },
        7508usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstacklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_fraction) as usize - ptr as usize },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_fraction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_prev_fraction_row) as usize - ptr as usize },
        7516usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev_fraction_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nrwidth_line_count) as usize - ptr as usize },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth_line_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nuw_cached) as usize - ptr as usize },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nuw_cached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_nrwidth_width) as usize - ptr as usize },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_llist) as usize - ptr as usize },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_llist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_llist_ref) as usize - ptr as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_llist_ref)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oparg_S {
    pub op_type: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub motion_type: ::std::os::raw::c_int,
    pub motion_force: ::std::os::raw::c_int,
    pub use_reg_one: ::std::os::raw::c_int,
    pub inclusive: ::std::os::raw::c_int,
    pub end_adjusted: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub cursor_start: pos_T,
    pub line_count: ::std::os::raw::c_long,
    pub empty: ::std::os::raw::c_int,
    pub is_VIsual: ::std::os::raw::c_int,
    pub block_mode: ::std::os::raw::c_int,
    pub start_vcol: colnr_T,
    pub end_vcol: colnr_T,
    pub prev_opcount: ::std::os::raw::c_long,
    pub prev_count0: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_oparg_S() {
    const UNINIT: ::std::mem::MaybeUninit<oparg_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oparg_S>(),
        128usize,
        concat!("Size of: ", stringify!(oparg_S))
    );
    assert_eq!(
        ::std::mem::align_of::<oparg_S>(),
        8usize,
        concat!("Alignment of ", stringify!(oparg_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(motion_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion_force) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(motion_force)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_reg_one) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(use_reg_one)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusive) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(inclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_adjusted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end_adjusted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor_start) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(cursor_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(line_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(empty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_VIsual) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(is_VIsual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_mode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(block_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_vcol) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(start_vcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_vcol) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end_vcol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_opcount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(prev_opcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_count0) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(prev_count0)
        )
    );
}
pub type oparg_T = oparg_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdarg_S {
    pub oap: *mut oparg_T,
    pub prechar: ::std::os::raw::c_int,
    pub cmdchar: ::std::os::raw::c_int,
    pub nchar: ::std::os::raw::c_int,
    pub ncharC1: ::std::os::raw::c_int,
    pub ncharC2: ::std::os::raw::c_int,
    pub extra_char: ::std::os::raw::c_int,
    pub opcount: ::std::os::raw::c_long,
    pub count0: ::std::os::raw::c_long,
    pub count1: ::std::os::raw::c_long,
    pub arg: ::std::os::raw::c_int,
    pub retval: ::std::os::raw::c_int,
    pub searchbuf: *mut char_u,
}
#[test]
fn bindgen_test_layout_cmdarg_S() {
    const UNINIT: ::std::mem::MaybeUninit<cmdarg_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmdarg_S>(),
        72usize,
        concat!("Size of: ", stringify!(cmdarg_S))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdarg_S>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdarg_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(oap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prechar) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(prechar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdchar) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(cmdchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nchar) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(nchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncharC1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(ncharC1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncharC2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(ncharC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_char) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(extra_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(opcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(count0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(count1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchbuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(searchbuf)
        )
    );
}
pub type cmdarg_T = cmdarg_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pendingOp_S {
    pub op_type: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pendingOp_S() {
    const UNINIT: ::std::mem::MaybeUninit<pendingOp_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pendingOp_S>(),
        16usize,
        concat!("Size of: ", stringify!(pendingOp_S))
    );
    assert_eq!(
        ::std::mem::align_of::<pendingOp_S>(),
        8usize,
        concat!("Alignment of ", stringify!(pendingOp_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(count)
        )
    );
}
pub type pendingOp_T = pendingOp_S;
pub type state_execute = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_int,
    ) -> executionStatus_T,
>;
pub type state_cleanup =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
pub type state_pending_operator = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        pendingOp: *mut pendingOp_T,
    ) -> ::std::os::raw::c_int,
>;
pub type sname = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm_T {
    pub context: *mut ::std::os::raw::c_void,
    pub mode: ::std::os::raw::c_int,
    pub subMode: subMode_T,
    pub execute_fn: state_execute,
    pub cleanup_fn: state_cleanup,
    pub pending_operator_fn: state_pending_operator,
    pub prev: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sm_T() {
    const UNINIT: ::std::mem::MaybeUninit<sm_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sm_T>(),
        48usize,
        concat!("Size of: ", stringify!(sm_T))
    );
    assert_eq!(
        ::std::mem::align_of::<sm_T>(),
        8usize,
        concat!("Alignment of ", stringify!(sm_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subMode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(subMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).execute_fn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(execute_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup_fn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(cleanup_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_operator_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(pending_operator_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(prev)
        )
    );
}
pub type vimmenu_T = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aco_save_T {
    pub save_curbuf: *mut buf_T,
    pub use_aucmd_win: ::std::os::raw::c_int,
    pub save_curwin: *mut win_T,
    pub new_curwin: *mut win_T,
    pub save_prevwin: *mut win_T,
    pub new_curbuf: bufref_T,
    pub globaldir: *mut char_u,
}
#[test]
fn bindgen_test_layout_aco_save_T() {
    const UNINIT: ::std::mem::MaybeUninit<aco_save_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<aco_save_T>(),
        64usize,
        concat!("Size of: ", stringify!(aco_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<aco_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(aco_save_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_curbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_curbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_aucmd_win) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(use_aucmd_win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_curwin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_curwin) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(new_curwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_prevwin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_prevwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_curbuf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(new_curbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globaldir) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(globaldir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option_table_T {
    pub name: *const ::std::os::raw::c_char,
    pub hasnum: ::std::os::raw::c_int,
    pub number: ::std::os::raw::c_long,
    pub string: *mut char_u,
    pub strlen: ::std::os::raw::c_int,
    pub present: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_option_table_T() {
    const UNINIT: ::std::mem::MaybeUninit<option_table_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<option_table_T>(),
        40usize,
        concat!("Size of: ", stringify!(option_table_T))
    );
    assert_eq!(
        ::std::mem::align_of::<option_table_T>(),
        8usize,
        concat!("Alignment of ", stringify!(option_table_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(hasnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strlen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(strlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).present) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(present)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prt_text_attr_T {
    pub fg_color: long_u,
    pub bg_color: long_u,
    pub bold: ::std::os::raw::c_int,
    pub italic: ::std::os::raw::c_int,
    pub underline: ::std::os::raw::c_int,
    pub undercurl: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_prt_text_attr_T() {
    const UNINIT: ::std::mem::MaybeUninit<prt_text_attr_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prt_text_attr_T>(),
        32usize,
        concat!("Size of: ", stringify!(prt_text_attr_T))
    );
    assert_eq!(
        ::std::mem::align_of::<prt_text_attr_T>(),
        8usize,
        concat!("Alignment of ", stringify!(prt_text_attr_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fg_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bold) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(bold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).italic) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(italic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).underline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(underline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undercurl) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(undercurl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prt_settings_T {
    pub n_collated_copies: ::std::os::raw::c_int,
    pub n_uncollated_copies: ::std::os::raw::c_int,
    pub duplex: ::std::os::raw::c_int,
    pub chars_per_line: ::std::os::raw::c_int,
    pub lines_per_page: ::std::os::raw::c_int,
    pub has_color: ::std::os::raw::c_int,
    pub number: prt_text_attr_T,
    pub user_abort: ::std::os::raw::c_int,
    pub jobname: *mut char_u,
}
#[test]
fn bindgen_test_layout_prt_settings_T() {
    const UNINIT: ::std::mem::MaybeUninit<prt_settings_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<prt_settings_T>(),
        72usize,
        concat!("Size of: ", stringify!(prt_settings_T))
    );
    assert_eq!(
        ::std::mem::align_of::<prt_settings_T>(),
        8usize,
        concat!("Alignment of ", stringify!(prt_settings_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_collated_copies) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(n_collated_copies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_uncollated_copies) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(n_uncollated_copies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duplex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(duplex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chars_per_line) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(chars_per_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lines_per_page) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(lines_per_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_color) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(has_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_abort) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(user_abort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobname) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(jobname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pumitem_T {
    pub pum_text: *mut char_u,
    pub pum_kind: *mut char_u,
    pub pum_extra: *mut char_u,
    pub pum_info: *mut char_u,
}
#[test]
fn bindgen_test_layout_pumitem_T() {
    const UNINIT: ::std::mem::MaybeUninit<pumitem_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pumitem_T>(),
        32usize,
        concat!("Size of: ", stringify!(pumitem_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pumitem_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pumitem_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_extra) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pum_info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagname_T {
    pub tn_tags: *mut char_u,
    pub tn_np: *mut char_u,
    pub tn_did_filefind_init: ::std::os::raw::c_int,
    pub tn_hf_idx: ::std::os::raw::c_int,
    pub tn_search_ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tagname_T() {
    const UNINIT: ::std::mem::MaybeUninit<tagname_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagname_T>(),
        32usize,
        concat!("Size of: ", stringify!(tagname_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tagname_T>(),
        8usize,
        concat!("Alignment of ", stringify!(tagname_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_tags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_np) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_np)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_did_filefind_init) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_did_filefind_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_hf_idx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_hf_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn_search_ctx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_search_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct context_sha256_T {
    pub total: [UINT32_T; 2usize],
    pub state: [UINT32_T; 8usize],
    pub buffer: [char_u; 64usize],
}
#[test]
fn bindgen_test_layout_context_sha256_T() {
    const UNINIT: ::std::mem::MaybeUninit<context_sha256_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<context_sha256_T>(),
        104usize,
        concat!("Size of: ", stringify!(context_sha256_T))
    );
    assert_eq!(
        ::std::mem::align_of::<context_sha256_T>(),
        4usize,
        concat!("Alignment of ", stringify!(context_sha256_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(buffer)
        )
    );
}
pub const exptype_T_TYPE_UNKNOWN: exptype_T = 0;
pub const exptype_T_TYPE_EQUAL: exptype_T = 1;
pub const exptype_T_TYPE_NEQUAL: exptype_T = 2;
pub const exptype_T_TYPE_GREATER: exptype_T = 3;
pub const exptype_T_TYPE_GEQUAL: exptype_T = 4;
pub const exptype_T_TYPE_SMALLER: exptype_T = 5;
pub const exptype_T_TYPE_SEQUAL: exptype_T = 6;
pub const exptype_T_TYPE_MATCH: exptype_T = 7;
pub const exptype_T_TYPE_NOMATCH: exptype_T = 8;
pub type exptype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_reader {
    pub js_buf: *mut char_u,
    pub js_end: *mut char_u,
    pub js_used: ::std::os::raw::c_int,
    pub js_fill:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut js_reader) -> ::std::os::raw::c_int>,
    pub js_cookie: *mut ::std::os::raw::c_void,
    pub js_cookie_arg: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_js_reader() {
    const UNINIT: ::std::mem::MaybeUninit<js_reader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<js_reader>(),
        48usize,
        concat!("Size of: ", stringify!(js_reader))
    );
    assert_eq!(
        ::std::mem::align_of::<js_reader>(),
        8usize,
        concat!("Alignment of ", stringify!(js_reader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_fill) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_cookie) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).js_cookie_arg) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_cookie_arg)
        )
    );
}
pub type js_read_T = js_reader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mparm_T {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub fname: *mut char_u,
    pub evim_mode: ::std::os::raw::c_int,
    pub use_vimrc: *mut char_u,
    pub clean: ::std::os::raw::c_int,
    pub n_commands: ::std::os::raw::c_int,
    pub commands: [*mut char_u; 10usize],
    pub cmds_tofree: [char_u; 10usize],
    pub n_pre_commands: ::std::os::raw::c_int,
    pub pre_commands: [*mut char_u; 10usize],
    pub edit_type: ::std::os::raw::c_int,
    pub tagname: *mut char_u,
    pub use_ef: *mut char_u,
    pub want_full_screen: ::std::os::raw::c_int,
    pub not_a_term: ::std::os::raw::c_int,
    pub tty_fail: ::std::os::raw::c_int,
    pub term: *mut char_u,
    pub no_swap_file: ::std::os::raw::c_int,
    pub use_debug_break_level: ::std::os::raw::c_int,
    pub window_count: ::std::os::raw::c_int,
    pub window_layout: ::std::os::raw::c_int,
    pub diff_mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mparm_T() {
    const UNINIT: ::std::mem::MaybeUninit<mparm_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mparm_T>(),
        296usize,
        concat!("Size of: ", stringify!(mparm_T))
    );
    assert_eq!(
        ::std::mem::align_of::<mparm_T>(),
        8usize,
        concat!("Alignment of ", stringify!(mparm_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evim_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(evim_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_vimrc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_vimrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clean) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(clean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_commands) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(n_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmds_tofree) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(cmds_tofree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_pre_commands) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(n_pre_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_commands) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(pre_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit_type) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(edit_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagname) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_ef) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_ef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).want_full_screen) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(want_full_screen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_a_term) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(not_a_term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tty_fail) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(tty_fail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_swap_file) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(no_swap_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_debug_break_level) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_debug_break_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_count) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(window_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_layout) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(window_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_mode) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(diff_mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lval_S {
    pub ll_name: *mut char_u,
    pub ll_exp_name: *mut char_u,
    pub ll_tv: *mut typval_T,
    pub ll_li: *mut listitem_T,
    pub ll_list: *mut list_T,
    pub ll_range: ::std::os::raw::c_int,
    pub ll_n1: ::std::os::raw::c_long,
    pub ll_n2: ::std::os::raw::c_long,
    pub ll_empty2: ::std::os::raw::c_int,
    pub ll_dict: *mut dict_T,
    pub ll_di: *mut dictitem_T,
    pub ll_newkey: *mut char_u,
    pub ll_blob: *mut blob_T,
}
#[test]
fn bindgen_test_layout_lval_S() {
    const UNINIT: ::std::mem::MaybeUninit<lval_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lval_S>(),
        104usize,
        concat!("Size of: ", stringify!(lval_S))
    );
    assert_eq!(
        ::std::mem::align_of::<lval_S>(),
        8usize,
        concat!("Alignment of ", stringify!(lval_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_exp_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_exp_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_tv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_li) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_li)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_range) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_n1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_n1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_n2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_n2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_empty2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_empty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_dict) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_di) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_di)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_newkey) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_newkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_blob) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_blob)
        )
    );
}
pub type lval_T = lval_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct save_state_T {
    pub save_msg_scroll: ::std::os::raw::c_int,
    pub save_restart_edit: ::std::os::raw::c_int,
    pub save_msg_didout: ::std::os::raw::c_int,
    pub save_State: ::std::os::raw::c_int,
    pub save_insertmode: ::std::os::raw::c_int,
    pub save_finish_op: ::std::os::raw::c_int,
    pub save_opcount: ::std::os::raw::c_int,
    pub save_reg_executing: ::std::os::raw::c_int,
    pub tabuf: tasave_T,
}
#[test]
fn bindgen_test_layout_save_state_T() {
    const UNINIT: ::std::mem::MaybeUninit<save_state_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<save_state_T>(),
        168usize,
        concat!("Size of: ", stringify!(save_state_T))
    );
    assert_eq!(
        ::std::mem::align_of::<save_state_T>(),
        8usize,
        concat!("Alignment of ", stringify!(save_state_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_msg_scroll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_msg_scroll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_restart_edit) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_restart_edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_msg_didout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_msg_didout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_State) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_State)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_insertmode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_insertmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_finish_op) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_finish_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_opcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_opcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_reg_executing) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_reg_executing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tabuf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(tabuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vimvars_save_T {
    pub vv_prevcount: varnumber_T,
    pub vv_count: varnumber_T,
    pub vv_count1: varnumber_T,
}
#[test]
fn bindgen_test_layout_vimvars_save_T() {
    const UNINIT: ::std::mem::MaybeUninit<vimvars_save_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vimvars_save_T>(),
        24usize,
        concat!("Size of: ", stringify!(vimvars_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vimvars_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vimvars_save_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vv_prevcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_prevcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vv_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vv_count1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_count1)
        )
    );
}
pub const cdscope_T_CDSCOPE_GLOBAL: cdscope_T = 0;
pub const cdscope_T_CDSCOPE_TABPAGE: cdscope_T = 1;
pub const cdscope_T_CDSCOPE_WINDOW: cdscope_T = 2;
pub type cdscope_T = ::std::os::raw::c_uint;
pub const alloc_id_T_aid_none: alloc_id_T = 0;
pub const alloc_id_T_aid_qf_dirname_start: alloc_id_T = 1;
pub const alloc_id_T_aid_qf_dirname_now: alloc_id_T = 2;
pub const alloc_id_T_aid_qf_namebuf: alloc_id_T = 3;
pub const alloc_id_T_aid_qf_module: alloc_id_T = 4;
pub const alloc_id_T_aid_qf_errmsg: alloc_id_T = 5;
pub const alloc_id_T_aid_qf_pattern: alloc_id_T = 6;
pub const alloc_id_T_aid_tagstack_items: alloc_id_T = 7;
pub const alloc_id_T_aid_tagstack_from: alloc_id_T = 8;
pub const alloc_id_T_aid_tagstack_details: alloc_id_T = 9;
pub const alloc_id_T_aid_sign_getdefined: alloc_id_T = 10;
pub const alloc_id_T_aid_sign_getplaced: alloc_id_T = 11;
pub const alloc_id_T_aid_sign_define_by_name: alloc_id_T = 12;
pub const alloc_id_T_aid_sign_getlist: alloc_id_T = 13;
pub const alloc_id_T_aid_sign_getplaced_dict: alloc_id_T = 14;
pub const alloc_id_T_aid_sign_getplaced_list: alloc_id_T = 15;
pub const alloc_id_T_aid_insert_sign: alloc_id_T = 16;
pub const alloc_id_T_aid_sign_getinfo: alloc_id_T = 17;
pub const alloc_id_T_aid_last: alloc_id_T = 18;
pub type alloc_id_T = ::std::os::raw::c_uint;
pub type VimClipboard = ::std::os::raw::c_int;
pub type stat_T = stat;
pub const assert_type_T_ASSERT_EQUAL: assert_type_T = 0;
pub const assert_type_T_ASSERT_NOTEQUAL: assert_type_T = 1;
pub const assert_type_T_ASSERT_MATCH: assert_type_T = 2;
pub const assert_type_T_ASSERT_NOTMATCH: assert_type_T = 3;
pub const assert_type_T_ASSERT_OTHER: assert_type_T = 4;
pub type assert_type_T = ::std::os::raw::c_uint;
pub const paste_mode_T_PASTE_INSERT: paste_mode_T = 0;
pub const paste_mode_T_PASTE_CMDLINE: paste_mode_T = 1;
pub const paste_mode_T_PASTE_EX: paste_mode_T = 2;
pub const paste_mode_T_PASTE_ONE_CHAR: paste_mode_T = 3;
pub type paste_mode_T = ::std::os::raw::c_uint;
pub const flush_buffers_T_FLUSH_MINIMAL: flush_buffers_T = 0;
pub const flush_buffers_T_FLUSH_TYPEAHEAD: flush_buffers_T = 1;
pub const flush_buffers_T_FLUSH_INPUT: flush_buffers_T = 2;
pub type flush_buffers_T = ::std::os::raw::c_uint;
pub const cmd_addr_T_ADDR_LINES: cmd_addr_T = 0;
pub const cmd_addr_T_ADDR_WINDOWS: cmd_addr_T = 1;
pub const cmd_addr_T_ADDR_ARGUMENTS: cmd_addr_T = 2;
pub const cmd_addr_T_ADDR_LOADED_BUFFERS: cmd_addr_T = 3;
pub const cmd_addr_T_ADDR_BUFFERS: cmd_addr_T = 4;
pub const cmd_addr_T_ADDR_TABS: cmd_addr_T = 5;
pub const cmd_addr_T_ADDR_TABS_RELATIVE: cmd_addr_T = 6;
pub const cmd_addr_T_ADDR_QUICKFIX_VALID: cmd_addr_T = 7;
pub const cmd_addr_T_ADDR_QUICKFIX: cmd_addr_T = 8;
pub const cmd_addr_T_ADDR_UNSIGNED: cmd_addr_T = 9;
pub const cmd_addr_T_ADDR_OTHER: cmd_addr_T = 10;
pub const cmd_addr_T_ADDR_NONE: cmd_addr_T = 11;
pub type cmd_addr_T = ::std::os::raw::c_uint;
pub type exarg_T = exarg;
pub const CMD_index_CMD_append: CMD_index = 0;
pub const CMD_index_CMD_abbreviate: CMD_index = 1;
pub const CMD_index_CMD_abclear: CMD_index = 2;
pub const CMD_index_CMD_aboveleft: CMD_index = 3;
pub const CMD_index_CMD_all: CMD_index = 4;
pub const CMD_index_CMD_amenu: CMD_index = 5;
pub const CMD_index_CMD_anoremenu: CMD_index = 6;
pub const CMD_index_CMD_args: CMD_index = 7;
pub const CMD_index_CMD_argadd: CMD_index = 8;
pub const CMD_index_CMD_argdelete: CMD_index = 9;
pub const CMD_index_CMD_argdo: CMD_index = 10;
pub const CMD_index_CMD_argedit: CMD_index = 11;
pub const CMD_index_CMD_argglobal: CMD_index = 12;
pub const CMD_index_CMD_arglocal: CMD_index = 13;
pub const CMD_index_CMD_argument: CMD_index = 14;
pub const CMD_index_CMD_ascii: CMD_index = 15;
pub const CMD_index_CMD_autocmd: CMD_index = 16;
pub const CMD_index_CMD_augroup: CMD_index = 17;
pub const CMD_index_CMD_aunmenu: CMD_index = 18;
pub const CMD_index_CMD_buffer: CMD_index = 19;
pub const CMD_index_CMD_bNext: CMD_index = 20;
pub const CMD_index_CMD_ball: CMD_index = 21;
pub const CMD_index_CMD_badd: CMD_index = 22;
pub const CMD_index_CMD_bdelete: CMD_index = 23;
pub const CMD_index_CMD_behave: CMD_index = 24;
pub const CMD_index_CMD_belowright: CMD_index = 25;
pub const CMD_index_CMD_bfirst: CMD_index = 26;
pub const CMD_index_CMD_blast: CMD_index = 27;
pub const CMD_index_CMD_bmodified: CMD_index = 28;
pub const CMD_index_CMD_bnext: CMD_index = 29;
pub const CMD_index_CMD_botright: CMD_index = 30;
pub const CMD_index_CMD_bprevious: CMD_index = 31;
pub const CMD_index_CMD_brewind: CMD_index = 32;
pub const CMD_index_CMD_break: CMD_index = 33;
pub const CMD_index_CMD_breakadd: CMD_index = 34;
pub const CMD_index_CMD_breakdel: CMD_index = 35;
pub const CMD_index_CMD_breaklist: CMD_index = 36;
pub const CMD_index_CMD_browse: CMD_index = 37;
pub const CMD_index_CMD_buffers: CMD_index = 38;
pub const CMD_index_CMD_bufdo: CMD_index = 39;
pub const CMD_index_CMD_bunload: CMD_index = 40;
pub const CMD_index_CMD_bwipeout: CMD_index = 41;
pub const CMD_index_CMD_change: CMD_index = 42;
pub const CMD_index_CMD_cNext: CMD_index = 43;
pub const CMD_index_CMD_cNfile: CMD_index = 44;
pub const CMD_index_CMD_cabbrev: CMD_index = 45;
pub const CMD_index_CMD_cabclear: CMD_index = 46;
pub const CMD_index_CMD_cabove: CMD_index = 47;
pub const CMD_index_CMD_caddbuffer: CMD_index = 48;
pub const CMD_index_CMD_caddexpr: CMD_index = 49;
pub const CMD_index_CMD_caddfile: CMD_index = 50;
pub const CMD_index_CMD_cafter: CMD_index = 51;
pub const CMD_index_CMD_call: CMD_index = 52;
pub const CMD_index_CMD_catch: CMD_index = 53;
pub const CMD_index_CMD_cbuffer: CMD_index = 54;
pub const CMD_index_CMD_cbefore: CMD_index = 55;
pub const CMD_index_CMD_cbelow: CMD_index = 56;
pub const CMD_index_CMD_cbottom: CMD_index = 57;
pub const CMD_index_CMD_cc: CMD_index = 58;
pub const CMD_index_CMD_cclose: CMD_index = 59;
pub const CMD_index_CMD_cd: CMD_index = 60;
pub const CMD_index_CMD_cdo: CMD_index = 61;
pub const CMD_index_CMD_center: CMD_index = 62;
pub const CMD_index_CMD_cexpr: CMD_index = 63;
pub const CMD_index_CMD_cfile: CMD_index = 64;
pub const CMD_index_CMD_cfdo: CMD_index = 65;
pub const CMD_index_CMD_cfirst: CMD_index = 66;
pub const CMD_index_CMD_cgetfile: CMD_index = 67;
pub const CMD_index_CMD_cgetbuffer: CMD_index = 68;
pub const CMD_index_CMD_cgetexpr: CMD_index = 69;
pub const CMD_index_CMD_chdir: CMD_index = 70;
pub const CMD_index_CMD_changes: CMD_index = 71;
pub const CMD_index_CMD_checkpath: CMD_index = 72;
pub const CMD_index_CMD_checktime: CMD_index = 73;
pub const CMD_index_CMD_chistory: CMD_index = 74;
pub const CMD_index_CMD_clist: CMD_index = 75;
pub const CMD_index_CMD_clast: CMD_index = 76;
pub const CMD_index_CMD_close: CMD_index = 77;
pub const CMD_index_CMD_clearjumps: CMD_index = 78;
pub const CMD_index_CMD_cmap: CMD_index = 79;
pub const CMD_index_CMD_cmapclear: CMD_index = 80;
pub const CMD_index_CMD_cmenu: CMD_index = 81;
pub const CMD_index_CMD_cnext: CMD_index = 82;
pub const CMD_index_CMD_cnewer: CMD_index = 83;
pub const CMD_index_CMD_cnfile: CMD_index = 84;
pub const CMD_index_CMD_cnoremap: CMD_index = 85;
pub const CMD_index_CMD_cnoreabbrev: CMD_index = 86;
pub const CMD_index_CMD_cnoremenu: CMD_index = 87;
pub const CMD_index_CMD_copy: CMD_index = 88;
pub const CMD_index_CMD_colder: CMD_index = 89;
pub const CMD_index_CMD_colorscheme: CMD_index = 90;
pub const CMD_index_CMD_command: CMD_index = 91;
pub const CMD_index_CMD_comclear: CMD_index = 92;
pub const CMD_index_CMD_compiler: CMD_index = 93;
pub const CMD_index_CMD_continue: CMD_index = 94;
pub const CMD_index_CMD_confirm: CMD_index = 95;
pub const CMD_index_CMD_copen: CMD_index = 96;
pub const CMD_index_CMD_cprevious: CMD_index = 97;
pub const CMD_index_CMD_cpfile: CMD_index = 98;
pub const CMD_index_CMD_cquit: CMD_index = 99;
pub const CMD_index_CMD_crewind: CMD_index = 100;
pub const CMD_index_CMD_cscope: CMD_index = 101;
pub const CMD_index_CMD_cstag: CMD_index = 102;
pub const CMD_index_CMD_cunmap: CMD_index = 103;
pub const CMD_index_CMD_cunabbrev: CMD_index = 104;
pub const CMD_index_CMD_cunmenu: CMD_index = 105;
pub const CMD_index_CMD_cwindow: CMD_index = 106;
pub const CMD_index_CMD_delete: CMD_index = 107;
pub const CMD_index_CMD_delmarks: CMD_index = 108;
pub const CMD_index_CMD_debug: CMD_index = 109;
pub const CMD_index_CMD_debuggreedy: CMD_index = 110;
pub const CMD_index_CMD_delcommand: CMD_index = 111;
pub const CMD_index_CMD_delfunction: CMD_index = 112;
pub const CMD_index_CMD_display: CMD_index = 113;
pub const CMD_index_CMD_diffupdate: CMD_index = 114;
pub const CMD_index_CMD_diffget: CMD_index = 115;
pub const CMD_index_CMD_diffoff: CMD_index = 116;
pub const CMD_index_CMD_diffpatch: CMD_index = 117;
pub const CMD_index_CMD_diffput: CMD_index = 118;
pub const CMD_index_CMD_diffsplit: CMD_index = 119;
pub const CMD_index_CMD_diffthis: CMD_index = 120;
pub const CMD_index_CMD_digraphs: CMD_index = 121;
pub const CMD_index_CMD_djump: CMD_index = 122;
pub const CMD_index_CMD_dlist: CMD_index = 123;
pub const CMD_index_CMD_doautocmd: CMD_index = 124;
pub const CMD_index_CMD_doautoall: CMD_index = 125;
pub const CMD_index_CMD_drop: CMD_index = 126;
pub const CMD_index_CMD_dsearch: CMD_index = 127;
pub const CMD_index_CMD_dsplit: CMD_index = 128;
pub const CMD_index_CMD_edit: CMD_index = 129;
pub const CMD_index_CMD_earlier: CMD_index = 130;
pub const CMD_index_CMD_echo: CMD_index = 131;
pub const CMD_index_CMD_echoerr: CMD_index = 132;
pub const CMD_index_CMD_echohl: CMD_index = 133;
pub const CMD_index_CMD_echomsg: CMD_index = 134;
pub const CMD_index_CMD_echon: CMD_index = 135;
pub const CMD_index_CMD_else: CMD_index = 136;
pub const CMD_index_CMD_elseif: CMD_index = 137;
pub const CMD_index_CMD_emenu: CMD_index = 138;
pub const CMD_index_CMD_endif: CMD_index = 139;
pub const CMD_index_CMD_endfunction: CMD_index = 140;
pub const CMD_index_CMD_endfor: CMD_index = 141;
pub const CMD_index_CMD_endtry: CMD_index = 142;
pub const CMD_index_CMD_endwhile: CMD_index = 143;
pub const CMD_index_CMD_enew: CMD_index = 144;
pub const CMD_index_CMD_ex: CMD_index = 145;
pub const CMD_index_CMD_execute: CMD_index = 146;
pub const CMD_index_CMD_exit: CMD_index = 147;
pub const CMD_index_CMD_exusage: CMD_index = 148;
pub const CMD_index_CMD_file: CMD_index = 149;
pub const CMD_index_CMD_files: CMD_index = 150;
pub const CMD_index_CMD_filetype: CMD_index = 151;
pub const CMD_index_CMD_filter: CMD_index = 152;
pub const CMD_index_CMD_find: CMD_index = 153;
pub const CMD_index_CMD_finally: CMD_index = 154;
pub const CMD_index_CMD_finish: CMD_index = 155;
pub const CMD_index_CMD_first: CMD_index = 156;
pub const CMD_index_CMD_fixdel: CMD_index = 157;
pub const CMD_index_CMD_fold: CMD_index = 158;
pub const CMD_index_CMD_foldclose: CMD_index = 159;
pub const CMD_index_CMD_folddoopen: CMD_index = 160;
pub const CMD_index_CMD_folddoclosed: CMD_index = 161;
pub const CMD_index_CMD_foldopen: CMD_index = 162;
pub const CMD_index_CMD_for: CMD_index = 163;
pub const CMD_index_CMD_function: CMD_index = 164;
pub const CMD_index_CMD_global: CMD_index = 165;
pub const CMD_index_CMD_goto: CMD_index = 166;
pub const CMD_index_CMD_grep: CMD_index = 167;
pub const CMD_index_CMD_grepadd: CMD_index = 168;
pub const CMD_index_CMD_gui: CMD_index = 169;
pub const CMD_index_CMD_gvim: CMD_index = 170;
pub const CMD_index_CMD_help: CMD_index = 171;
pub const CMD_index_CMD_helpclose: CMD_index = 172;
pub const CMD_index_CMD_helpfind: CMD_index = 173;
pub const CMD_index_CMD_helpgrep: CMD_index = 174;
pub const CMD_index_CMD_helptags: CMD_index = 175;
pub const CMD_index_CMD_highlight: CMD_index = 176;
pub const CMD_index_CMD_hide: CMD_index = 177;
pub const CMD_index_CMD_history: CMD_index = 178;
pub const CMD_index_CMD_insert: CMD_index = 179;
pub const CMD_index_CMD_iabbrev: CMD_index = 180;
pub const CMD_index_CMD_iabclear: CMD_index = 181;
pub const CMD_index_CMD_if: CMD_index = 182;
pub const CMD_index_CMD_ijump: CMD_index = 183;
pub const CMD_index_CMD_ilist: CMD_index = 184;
pub const CMD_index_CMD_imap: CMD_index = 185;
pub const CMD_index_CMD_imapclear: CMD_index = 186;
pub const CMD_index_CMD_imenu: CMD_index = 187;
pub const CMD_index_CMD_inoremap: CMD_index = 188;
pub const CMD_index_CMD_inoreabbrev: CMD_index = 189;
pub const CMD_index_CMD_inoremenu: CMD_index = 190;
pub const CMD_index_CMD_intro: CMD_index = 191;
pub const CMD_index_CMD_isearch: CMD_index = 192;
pub const CMD_index_CMD_isplit: CMD_index = 193;
pub const CMD_index_CMD_iunmap: CMD_index = 194;
pub const CMD_index_CMD_iunabbrev: CMD_index = 195;
pub const CMD_index_CMD_iunmenu: CMD_index = 196;
pub const CMD_index_CMD_join: CMD_index = 197;
pub const CMD_index_CMD_jumps: CMD_index = 198;
pub const CMD_index_CMD_k: CMD_index = 199;
pub const CMD_index_CMD_keepmarks: CMD_index = 200;
pub const CMD_index_CMD_keepjumps: CMD_index = 201;
pub const CMD_index_CMD_keeppatterns: CMD_index = 202;
pub const CMD_index_CMD_keepalt: CMD_index = 203;
pub const CMD_index_CMD_list: CMD_index = 204;
pub const CMD_index_CMD_lNext: CMD_index = 205;
pub const CMD_index_CMD_lNfile: CMD_index = 206;
pub const CMD_index_CMD_last: CMD_index = 207;
pub const CMD_index_CMD_labove: CMD_index = 208;
pub const CMD_index_CMD_language: CMD_index = 209;
pub const CMD_index_CMD_laddexpr: CMD_index = 210;
pub const CMD_index_CMD_laddbuffer: CMD_index = 211;
pub const CMD_index_CMD_laddfile: CMD_index = 212;
pub const CMD_index_CMD_lafter: CMD_index = 213;
pub const CMD_index_CMD_later: CMD_index = 214;
pub const CMD_index_CMD_lbuffer: CMD_index = 215;
pub const CMD_index_CMD_lbefore: CMD_index = 216;
pub const CMD_index_CMD_lbelow: CMD_index = 217;
pub const CMD_index_CMD_lbottom: CMD_index = 218;
pub const CMD_index_CMD_lcd: CMD_index = 219;
pub const CMD_index_CMD_lchdir: CMD_index = 220;
pub const CMD_index_CMD_lclose: CMD_index = 221;
pub const CMD_index_CMD_lcscope: CMD_index = 222;
pub const CMD_index_CMD_ldo: CMD_index = 223;
pub const CMD_index_CMD_left: CMD_index = 224;
pub const CMD_index_CMD_leftabove: CMD_index = 225;
pub const CMD_index_CMD_let: CMD_index = 226;
pub const CMD_index_CMD_lexpr: CMD_index = 227;
pub const CMD_index_CMD_lfile: CMD_index = 228;
pub const CMD_index_CMD_lfdo: CMD_index = 229;
pub const CMD_index_CMD_lfirst: CMD_index = 230;
pub const CMD_index_CMD_lgetfile: CMD_index = 231;
pub const CMD_index_CMD_lgetbuffer: CMD_index = 232;
pub const CMD_index_CMD_lgetexpr: CMD_index = 233;
pub const CMD_index_CMD_lgrep: CMD_index = 234;
pub const CMD_index_CMD_lgrepadd: CMD_index = 235;
pub const CMD_index_CMD_lhelpgrep: CMD_index = 236;
pub const CMD_index_CMD_lhistory: CMD_index = 237;
pub const CMD_index_CMD_ll: CMD_index = 238;
pub const CMD_index_CMD_llast: CMD_index = 239;
pub const CMD_index_CMD_llist: CMD_index = 240;
pub const CMD_index_CMD_lmap: CMD_index = 241;
pub const CMD_index_CMD_lmapclear: CMD_index = 242;
pub const CMD_index_CMD_lmake: CMD_index = 243;
pub const CMD_index_CMD_lnoremap: CMD_index = 244;
pub const CMD_index_CMD_lnext: CMD_index = 245;
pub const CMD_index_CMD_lnewer: CMD_index = 246;
pub const CMD_index_CMD_lnfile: CMD_index = 247;
pub const CMD_index_CMD_loadview: CMD_index = 248;
pub const CMD_index_CMD_loadkeymap: CMD_index = 249;
pub const CMD_index_CMD_lockmarks: CMD_index = 250;
pub const CMD_index_CMD_lockvar: CMD_index = 251;
pub const CMD_index_CMD_lolder: CMD_index = 252;
pub const CMD_index_CMD_lopen: CMD_index = 253;
pub const CMD_index_CMD_lprevious: CMD_index = 254;
pub const CMD_index_CMD_lpfile: CMD_index = 255;
pub const CMD_index_CMD_lrewind: CMD_index = 256;
pub const CMD_index_CMD_ltag: CMD_index = 257;
pub const CMD_index_CMD_lunmap: CMD_index = 258;
pub const CMD_index_CMD_lua: CMD_index = 259;
pub const CMD_index_CMD_luado: CMD_index = 260;
pub const CMD_index_CMD_luafile: CMD_index = 261;
pub const CMD_index_CMD_lvimgrep: CMD_index = 262;
pub const CMD_index_CMD_lvimgrepadd: CMD_index = 263;
pub const CMD_index_CMD_lwindow: CMD_index = 264;
pub const CMD_index_CMD_ls: CMD_index = 265;
pub const CMD_index_CMD_move: CMD_index = 266;
pub const CMD_index_CMD_mark: CMD_index = 267;
pub const CMD_index_CMD_make: CMD_index = 268;
pub const CMD_index_CMD_map: CMD_index = 269;
pub const CMD_index_CMD_mapclear: CMD_index = 270;
pub const CMD_index_CMD_marks: CMD_index = 271;
pub const CMD_index_CMD_match: CMD_index = 272;
pub const CMD_index_CMD_menu: CMD_index = 273;
pub const CMD_index_CMD_menutranslate: CMD_index = 274;
pub const CMD_index_CMD_messages: CMD_index = 275;
pub const CMD_index_CMD_mkexrc: CMD_index = 276;
pub const CMD_index_CMD_mksession: CMD_index = 277;
pub const CMD_index_CMD_mkspell: CMD_index = 278;
pub const CMD_index_CMD_mkvimrc: CMD_index = 279;
pub const CMD_index_CMD_mkview: CMD_index = 280;
pub const CMD_index_CMD_mode: CMD_index = 281;
pub const CMD_index_CMD_mzscheme: CMD_index = 282;
pub const CMD_index_CMD_mzfile: CMD_index = 283;
pub const CMD_index_CMD_next: CMD_index = 284;
pub const CMD_index_CMD_nbkey: CMD_index = 285;
pub const CMD_index_CMD_nbclose: CMD_index = 286;
pub const CMD_index_CMD_nbstart: CMD_index = 287;
pub const CMD_index_CMD_new: CMD_index = 288;
pub const CMD_index_CMD_nmap: CMD_index = 289;
pub const CMD_index_CMD_nmapclear: CMD_index = 290;
pub const CMD_index_CMD_nmenu: CMD_index = 291;
pub const CMD_index_CMD_nnoremap: CMD_index = 292;
pub const CMD_index_CMD_nnoremenu: CMD_index = 293;
pub const CMD_index_CMD_noremap: CMD_index = 294;
pub const CMD_index_CMD_noautocmd: CMD_index = 295;
pub const CMD_index_CMD_nohlsearch: CMD_index = 296;
pub const CMD_index_CMD_noreabbrev: CMD_index = 297;
pub const CMD_index_CMD_noremenu: CMD_index = 298;
pub const CMD_index_CMD_noswapfile: CMD_index = 299;
pub const CMD_index_CMD_normal: CMD_index = 300;
pub const CMD_index_CMD_number: CMD_index = 301;
pub const CMD_index_CMD_nunmap: CMD_index = 302;
pub const CMD_index_CMD_nunmenu: CMD_index = 303;
pub const CMD_index_CMD_open: CMD_index = 304;
pub const CMD_index_CMD_oldfiles: CMD_index = 305;
pub const CMD_index_CMD_omap: CMD_index = 306;
pub const CMD_index_CMD_omapclear: CMD_index = 307;
pub const CMD_index_CMD_omenu: CMD_index = 308;
pub const CMD_index_CMD_only: CMD_index = 309;
pub const CMD_index_CMD_onoremap: CMD_index = 310;
pub const CMD_index_CMD_onoremenu: CMD_index = 311;
pub const CMD_index_CMD_options: CMD_index = 312;
pub const CMD_index_CMD_ounmap: CMD_index = 313;
pub const CMD_index_CMD_ounmenu: CMD_index = 314;
pub const CMD_index_CMD_ownsyntax: CMD_index = 315;
pub const CMD_index_CMD_print: CMD_index = 316;
pub const CMD_index_CMD_packadd: CMD_index = 317;
pub const CMD_index_CMD_packloadall: CMD_index = 318;
pub const CMD_index_CMD_pclose: CMD_index = 319;
pub const CMD_index_CMD_perl: CMD_index = 320;
pub const CMD_index_CMD_perldo: CMD_index = 321;
pub const CMD_index_CMD_pedit: CMD_index = 322;
pub const CMD_index_CMD_pop: CMD_index = 323;
pub const CMD_index_CMD_popup: CMD_index = 324;
pub const CMD_index_CMD_popupclear: CMD_index = 325;
pub const CMD_index_CMD_ppop: CMD_index = 326;
pub const CMD_index_CMD_preserve: CMD_index = 327;
pub const CMD_index_CMD_previous: CMD_index = 328;
pub const CMD_index_CMD_promptfind: CMD_index = 329;
pub const CMD_index_CMD_promptrepl: CMD_index = 330;
pub const CMD_index_CMD_profile: CMD_index = 331;
pub const CMD_index_CMD_profdel: CMD_index = 332;
pub const CMD_index_CMD_psearch: CMD_index = 333;
pub const CMD_index_CMD_ptag: CMD_index = 334;
pub const CMD_index_CMD_ptNext: CMD_index = 335;
pub const CMD_index_CMD_ptfirst: CMD_index = 336;
pub const CMD_index_CMD_ptjump: CMD_index = 337;
pub const CMD_index_CMD_ptlast: CMD_index = 338;
pub const CMD_index_CMD_ptnext: CMD_index = 339;
pub const CMD_index_CMD_ptprevious: CMD_index = 340;
pub const CMD_index_CMD_ptrewind: CMD_index = 341;
pub const CMD_index_CMD_ptselect: CMD_index = 342;
pub const CMD_index_CMD_put: CMD_index = 343;
pub const CMD_index_CMD_pwd: CMD_index = 344;
pub const CMD_index_CMD_python: CMD_index = 345;
pub const CMD_index_CMD_pydo: CMD_index = 346;
pub const CMD_index_CMD_pyfile: CMD_index = 347;
pub const CMD_index_CMD_py3: CMD_index = 348;
pub const CMD_index_CMD_py3do: CMD_index = 349;
pub const CMD_index_CMD_python3: CMD_index = 350;
pub const CMD_index_CMD_py3file: CMD_index = 351;
pub const CMD_index_CMD_pyx: CMD_index = 352;
pub const CMD_index_CMD_pyxdo: CMD_index = 353;
pub const CMD_index_CMD_pythonx: CMD_index = 354;
pub const CMD_index_CMD_pyxfile: CMD_index = 355;
pub const CMD_index_CMD_quit: CMD_index = 356;
pub const CMD_index_CMD_quitall: CMD_index = 357;
pub const CMD_index_CMD_qall: CMD_index = 358;
pub const CMD_index_CMD_read: CMD_index = 359;
pub const CMD_index_CMD_recover: CMD_index = 360;
pub const CMD_index_CMD_redo: CMD_index = 361;
pub const CMD_index_CMD_redir: CMD_index = 362;
pub const CMD_index_CMD_redraw: CMD_index = 363;
pub const CMD_index_CMD_redrawstatus: CMD_index = 364;
pub const CMD_index_CMD_redrawtabline: CMD_index = 365;
pub const CMD_index_CMD_registers: CMD_index = 366;
pub const CMD_index_CMD_resize: CMD_index = 367;
pub const CMD_index_CMD_retab: CMD_index = 368;
pub const CMD_index_CMD_return: CMD_index = 369;
pub const CMD_index_CMD_rewind: CMD_index = 370;
pub const CMD_index_CMD_right: CMD_index = 371;
pub const CMD_index_CMD_rightbelow: CMD_index = 372;
pub const CMD_index_CMD_runtime: CMD_index = 373;
pub const CMD_index_CMD_ruby: CMD_index = 374;
pub const CMD_index_CMD_rubydo: CMD_index = 375;
pub const CMD_index_CMD_rubyfile: CMD_index = 376;
pub const CMD_index_CMD_rundo: CMD_index = 377;
pub const CMD_index_CMD_rviminfo: CMD_index = 378;
pub const CMD_index_CMD_substitute: CMD_index = 379;
pub const CMD_index_CMD_sNext: CMD_index = 380;
pub const CMD_index_CMD_sargument: CMD_index = 381;
pub const CMD_index_CMD_sall: CMD_index = 382;
pub const CMD_index_CMD_sandbox: CMD_index = 383;
pub const CMD_index_CMD_saveas: CMD_index = 384;
pub const CMD_index_CMD_sbuffer: CMD_index = 385;
pub const CMD_index_CMD_sbNext: CMD_index = 386;
pub const CMD_index_CMD_sball: CMD_index = 387;
pub const CMD_index_CMD_sbfirst: CMD_index = 388;
pub const CMD_index_CMD_sblast: CMD_index = 389;
pub const CMD_index_CMD_sbmodified: CMD_index = 390;
pub const CMD_index_CMD_sbnext: CMD_index = 391;
pub const CMD_index_CMD_sbprevious: CMD_index = 392;
pub const CMD_index_CMD_sbrewind: CMD_index = 393;
pub const CMD_index_CMD_scriptnames: CMD_index = 394;
pub const CMD_index_CMD_scriptencoding: CMD_index = 395;
pub const CMD_index_CMD_scriptversion: CMD_index = 396;
pub const CMD_index_CMD_scscope: CMD_index = 397;
pub const CMD_index_CMD_set: CMD_index = 398;
pub const CMD_index_CMD_setfiletype: CMD_index = 399;
pub const CMD_index_CMD_setglobal: CMD_index = 400;
pub const CMD_index_CMD_setlocal: CMD_index = 401;
pub const CMD_index_CMD_sfind: CMD_index = 402;
pub const CMD_index_CMD_sfirst: CMD_index = 403;
pub const CMD_index_CMD_shell: CMD_index = 404;
pub const CMD_index_CMD_simalt: CMD_index = 405;
pub const CMD_index_CMD_sign: CMD_index = 406;
pub const CMD_index_CMD_silent: CMD_index = 407;
pub const CMD_index_CMD_sleep: CMD_index = 408;
pub const CMD_index_CMD_slast: CMD_index = 409;
pub const CMD_index_CMD_smagic: CMD_index = 410;
pub const CMD_index_CMD_smap: CMD_index = 411;
pub const CMD_index_CMD_smapclear: CMD_index = 412;
pub const CMD_index_CMD_smenu: CMD_index = 413;
pub const CMD_index_CMD_snext: CMD_index = 414;
pub const CMD_index_CMD_snomagic: CMD_index = 415;
pub const CMD_index_CMD_snoremap: CMD_index = 416;
pub const CMD_index_CMD_snoremenu: CMD_index = 417;
pub const CMD_index_CMD_source: CMD_index = 418;
pub const CMD_index_CMD_sort: CMD_index = 419;
pub const CMD_index_CMD_split: CMD_index = 420;
pub const CMD_index_CMD_spellgood: CMD_index = 421;
pub const CMD_index_CMD_spelldump: CMD_index = 422;
pub const CMD_index_CMD_spellinfo: CMD_index = 423;
pub const CMD_index_CMD_spellrepall: CMD_index = 424;
pub const CMD_index_CMD_spellundo: CMD_index = 425;
pub const CMD_index_CMD_spellwrong: CMD_index = 426;
pub const CMD_index_CMD_sprevious: CMD_index = 427;
pub const CMD_index_CMD_srewind: CMD_index = 428;
pub const CMD_index_CMD_stop: CMD_index = 429;
pub const CMD_index_CMD_stag: CMD_index = 430;
pub const CMD_index_CMD_startinsert: CMD_index = 431;
pub const CMD_index_CMD_startgreplace: CMD_index = 432;
pub const CMD_index_CMD_startreplace: CMD_index = 433;
pub const CMD_index_CMD_stopinsert: CMD_index = 434;
pub const CMD_index_CMD_stjump: CMD_index = 435;
pub const CMD_index_CMD_stselect: CMD_index = 436;
pub const CMD_index_CMD_sunhide: CMD_index = 437;
pub const CMD_index_CMD_sunmap: CMD_index = 438;
pub const CMD_index_CMD_sunmenu: CMD_index = 439;
pub const CMD_index_CMD_suspend: CMD_index = 440;
pub const CMD_index_CMD_sview: CMD_index = 441;
pub const CMD_index_CMD_swapname: CMD_index = 442;
pub const CMD_index_CMD_syntax: CMD_index = 443;
pub const CMD_index_CMD_syntime: CMD_index = 444;
pub const CMD_index_CMD_syncbind: CMD_index = 445;
pub const CMD_index_CMD_t: CMD_index = 446;
pub const CMD_index_CMD_tNext: CMD_index = 447;
pub const CMD_index_CMD_tag: CMD_index = 448;
pub const CMD_index_CMD_tags: CMD_index = 449;
pub const CMD_index_CMD_tab: CMD_index = 450;
pub const CMD_index_CMD_tabclose: CMD_index = 451;
pub const CMD_index_CMD_tabdo: CMD_index = 452;
pub const CMD_index_CMD_tabedit: CMD_index = 453;
pub const CMD_index_CMD_tabfind: CMD_index = 454;
pub const CMD_index_CMD_tabfirst: CMD_index = 455;
pub const CMD_index_CMD_tabmove: CMD_index = 456;
pub const CMD_index_CMD_tablast: CMD_index = 457;
pub const CMD_index_CMD_tabnext: CMD_index = 458;
pub const CMD_index_CMD_tabnew: CMD_index = 459;
pub const CMD_index_CMD_tabonly: CMD_index = 460;
pub const CMD_index_CMD_tabprevious: CMD_index = 461;
pub const CMD_index_CMD_tabNext: CMD_index = 462;
pub const CMD_index_CMD_tabrewind: CMD_index = 463;
pub const CMD_index_CMD_tabs: CMD_index = 464;
pub const CMD_index_CMD_tcd: CMD_index = 465;
pub const CMD_index_CMD_tchdir: CMD_index = 466;
pub const CMD_index_CMD_tcl: CMD_index = 467;
pub const CMD_index_CMD_tcldo: CMD_index = 468;
pub const CMD_index_CMD_tclfile: CMD_index = 469;
pub const CMD_index_CMD_tearoff: CMD_index = 470;
pub const CMD_index_CMD_terminal: CMD_index = 471;
pub const CMD_index_CMD_tfirst: CMD_index = 472;
pub const CMD_index_CMD_throw: CMD_index = 473;
pub const CMD_index_CMD_tjump: CMD_index = 474;
pub const CMD_index_CMD_tlast: CMD_index = 475;
pub const CMD_index_CMD_tlmenu: CMD_index = 476;
pub const CMD_index_CMD_tlnoremenu: CMD_index = 477;
pub const CMD_index_CMD_tlunmenu: CMD_index = 478;
pub const CMD_index_CMD_tmenu: CMD_index = 479;
pub const CMD_index_CMD_tmap: CMD_index = 480;
pub const CMD_index_CMD_tmapclear: CMD_index = 481;
pub const CMD_index_CMD_tnext: CMD_index = 482;
pub const CMD_index_CMD_tnoremap: CMD_index = 483;
pub const CMD_index_CMD_topleft: CMD_index = 484;
pub const CMD_index_CMD_tprevious: CMD_index = 485;
pub const CMD_index_CMD_trewind: CMD_index = 486;
pub const CMD_index_CMD_try: CMD_index = 487;
pub const CMD_index_CMD_tselect: CMD_index = 488;
pub const CMD_index_CMD_tunmenu: CMD_index = 489;
pub const CMD_index_CMD_tunmap: CMD_index = 490;
pub const CMD_index_CMD_undo: CMD_index = 491;
pub const CMD_index_CMD_undojoin: CMD_index = 492;
pub const CMD_index_CMD_undolist: CMD_index = 493;
pub const CMD_index_CMD_unabbreviate: CMD_index = 494;
pub const CMD_index_CMD_unhide: CMD_index = 495;
pub const CMD_index_CMD_unlet: CMD_index = 496;
pub const CMD_index_CMD_unlockvar: CMD_index = 497;
pub const CMD_index_CMD_unmap: CMD_index = 498;
pub const CMD_index_CMD_unmenu: CMD_index = 499;
pub const CMD_index_CMD_unsilent: CMD_index = 500;
pub const CMD_index_CMD_update: CMD_index = 501;
pub const CMD_index_CMD_vglobal: CMD_index = 502;
pub const CMD_index_CMD_version: CMD_index = 503;
pub const CMD_index_CMD_verbose: CMD_index = 504;
pub const CMD_index_CMD_vertical: CMD_index = 505;
pub const CMD_index_CMD_visual: CMD_index = 506;
pub const CMD_index_CMD_view: CMD_index = 507;
pub const CMD_index_CMD_vimgrep: CMD_index = 508;
pub const CMD_index_CMD_vimgrepadd: CMD_index = 509;
pub const CMD_index_CMD_viusage: CMD_index = 510;
pub const CMD_index_CMD_vmap: CMD_index = 511;
pub const CMD_index_CMD_vmapclear: CMD_index = 512;
pub const CMD_index_CMD_vmenu: CMD_index = 513;
pub const CMD_index_CMD_vnoremap: CMD_index = 514;
pub const CMD_index_CMD_vnew: CMD_index = 515;
pub const CMD_index_CMD_vnoremenu: CMD_index = 516;
pub const CMD_index_CMD_vsplit: CMD_index = 517;
pub const CMD_index_CMD_vunmap: CMD_index = 518;
pub const CMD_index_CMD_vunmenu: CMD_index = 519;
pub const CMD_index_CMD_write: CMD_index = 520;
pub const CMD_index_CMD_wNext: CMD_index = 521;
pub const CMD_index_CMD_wall: CMD_index = 522;
pub const CMD_index_CMD_while: CMD_index = 523;
pub const CMD_index_CMD_winsize: CMD_index = 524;
pub const CMD_index_CMD_wincmd: CMD_index = 525;
pub const CMD_index_CMD_windo: CMD_index = 526;
pub const CMD_index_CMD_winpos: CMD_index = 527;
pub const CMD_index_CMD_wnext: CMD_index = 528;
pub const CMD_index_CMD_wprevious: CMD_index = 529;
pub const CMD_index_CMD_wq: CMD_index = 530;
pub const CMD_index_CMD_wqall: CMD_index = 531;
pub const CMD_index_CMD_wundo: CMD_index = 532;
pub const CMD_index_CMD_wviminfo: CMD_index = 533;
pub const CMD_index_CMD_xit: CMD_index = 534;
pub const CMD_index_CMD_xall: CMD_index = 535;
pub const CMD_index_CMD_xmap: CMD_index = 536;
pub const CMD_index_CMD_xmapclear: CMD_index = 537;
pub const CMD_index_CMD_xmenu: CMD_index = 538;
pub const CMD_index_CMD_xnoremap: CMD_index = 539;
pub const CMD_index_CMD_xnoremenu: CMD_index = 540;
pub const CMD_index_CMD_xrestore: CMD_index = 541;
pub const CMD_index_CMD_xunmap: CMD_index = 542;
pub const CMD_index_CMD_xunmenu: CMD_index = 543;
pub const CMD_index_CMD_yank: CMD_index = 544;
pub const CMD_index_CMD_z: CMD_index = 545;
pub const CMD_index_CMD_bang: CMD_index = 546;
pub const CMD_index_CMD_pound: CMD_index = 547;
pub const CMD_index_CMD_and: CMD_index = 548;
pub const CMD_index_CMD_star: CMD_index = 549;
pub const CMD_index_CMD_lshift: CMD_index = 550;
pub const CMD_index_CMD_equal: CMD_index = 551;
pub const CMD_index_CMD_rshift: CMD_index = 552;
pub const CMD_index_CMD_at: CMD_index = 553;
pub const CMD_index_CMD_Next: CMD_index = 554;
pub const CMD_index_CMD_Print: CMD_index = 555;
pub const CMD_index_CMD_X: CMD_index = 556;
pub const CMD_index_CMD_tilde: CMD_index = 557;
pub const CMD_index_CMD_SIZE: CMD_index = 558;
pub const CMD_index_CMD_USER: CMD_index = -1;
pub const CMD_index_CMD_USER_BUF: CMD_index = -2;
pub type CMD_index = ::std::os::raw::c_int;
pub use self::CMD_index as cmdidx_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exarg {
    pub arg: *mut char_u,
    pub nextcmd: *mut char_u,
    pub cmd: *mut char_u,
    pub cmdlinep: *mut *mut char_u,
    pub cmdidx: cmdidx_T,
    pub argt: ::std::os::raw::c_long,
    pub skip: ::std::os::raw::c_int,
    pub forceit: ::std::os::raw::c_int,
    pub addr_count: ::std::os::raw::c_int,
    pub line1: linenr_T,
    pub line2: linenr_T,
    pub addr_type: cmd_addr_T,
    pub flags: ::std::os::raw::c_int,
    pub do_ecmd_cmd: *mut char_u,
    pub do_ecmd_lnum: linenr_T,
    pub append: ::std::os::raw::c_int,
    pub usefilter: ::std::os::raw::c_int,
    pub amount: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub force_bin: ::std::os::raw::c_int,
    pub read_edit: ::std::os::raw::c_int,
    pub force_ff: ::std::os::raw::c_int,
    pub force_enc: ::std::os::raw::c_int,
    pub bad_char: ::std::os::raw::c_int,
    pub useridx: ::std::os::raw::c_int,
    pub errmsg: *mut ::std::os::raw::c_char,
    pub getline: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
        ) -> *mut char_u,
    >,
    pub cookie: *mut ::std::os::raw::c_void,
    pub cstack: *mut condstack,
    pub verbose_save: ::std::os::raw::c_long,
    pub save_msg_silent: ::std::os::raw::c_int,
    pub did_esilent: ::std::os::raw::c_int,
    pub did_sandbox: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_exarg() {
    const UNINIT: ::std::mem::MaybeUninit<exarg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exarg>(),
        200usize,
        concat!("Size of: ", stringify!(exarg))
    );
    assert_eq!(
        ::std::mem::align_of::<exarg>(),
        8usize,
        concat!("Alignment of ", stringify!(exarg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextcmd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(nextcmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdlinep) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmdlinep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdidx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmdidx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(argt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceit) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(forceit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(addr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(line1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(line2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_type) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_ecmd_cmd) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(do_ecmd_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_ecmd_lnum) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(do_ecmd_lnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usefilter) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(usefilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regname) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_bin) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_edit) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(read_edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_ff) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_ff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_enc) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_enc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_char) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(bad_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useridx) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(useridx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errmsg) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(errmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getline) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(getline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cstack) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verbose_save) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(verbose_save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_msg_silent) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(save_msg_silent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).did_esilent) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(did_esilent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).did_sandbox) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(did_sandbox)
        )
    );
}
extern "C" {
    pub fn mch_chdir(path: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_char_avail() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_check_messages() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_total_mem(special: ::std::os::raw::c_int) -> long_u;
}
extern "C" {
    pub fn mch_delay(msec: ::std::os::raw::c_long, ignoreinput: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_stackcheck(p: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_suspend();
}
extern "C" {
    pub fn mch_init();
}
extern "C" {
    pub fn reset_signals();
}
extern "C" {
    pub fn vim_handle_signal(sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_check_win(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_input_isatty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_xrestore(eap: *mut exarg_T);
}
extern "C" {
    pub fn mch_can_restore_title() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_can_restore_icon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_settitle(title: *mut char_u, icon: *mut char_u);
}
extern "C" {
    pub fn mch_restore_title(which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vim_is_xterm(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_xterm_like_mouse(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_xterm_mouse() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_iris(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_vt300(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_fastterm(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_user_name(s: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_uname(
        uid: uid_t,
        s: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_host_name(s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_get_pid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mch_process_running(pid: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_dirname(buf: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_FullName(
        fname: *mut char_u,
        buf: *mut char_u,
        len: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_isFullName(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fname_case(name: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_getperm(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mch_setperm(name: *mut char_u, perm: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_fsetperm(
        fd: ::std::os::raw::c_int,
        perm: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_copy_sec(from_file: *mut char_u, to_file: *mut char_u);
}
extern "C" {
    pub fn mch_get_acl(fname: *mut char_u) -> vim_acl_T;
}
extern "C" {
    pub fn mch_set_acl(fname: *mut char_u, aclent: vim_acl_T);
}
extern "C" {
    pub fn mch_free_acl(aclent: vim_acl_T);
}
extern "C" {
    pub fn mch_hide(name: *mut char_u);
}
extern "C" {
    pub fn mch_isdir(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_isrealdir(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_can_exe(
        name: *mut char_u,
        path: *mut *mut char_u,
        use_path: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_nodetype(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_early_init();
}
extern "C" {
    pub fn mch_free_mem();
}
extern "C" {
    pub fn mch_exit(r: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_settmode(tmode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_stty();
}
extern "C" {
    pub fn get_tty_info(fd: ::std::os::raw::c_int, info: *mut ttyinfo_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_setmouse(on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_bevalterm_changed();
}
extern "C" {
    pub fn check_mouse_termcode();
}
extern "C" {
    pub fn mch_screenmode(arg: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_get_shellsize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_report_winsize(
        fd: ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_set_shellsize();
}
extern "C" {
    pub fn mch_new_shellsize();
}
extern "C" {
    pub fn may_send_sigint(c: ::std::os::raw::c_int, pid: pid_t, wpid: pid_t);
}
extern "C" {
    pub fn mch_call_shell(
        cmd: *mut char_u,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_job_start(
        argv: *mut *mut ::std::os::raw::c_char,
        job: *mut job_T,
        options: *mut jobopt_T,
        is_terminal: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mch_job_status(job: *mut job_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mch_detect_ended_job(job_list: *mut job_T) -> *mut job_T;
}
extern "C" {
    pub fn mch_signal_job(job: *mut job_T, how: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_clear_job(job: *mut job_T);
}
extern "C" {
    pub fn mch_create_pty_channel(job: *mut job_T, options: *mut jobopt_T)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_breakcheck(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mch_expandpath(
        gap: *mut garray_T,
        path: *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_expand_wildcards(
        num_pat: ::std::os::raw::c_int,
        pat: *mut *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_has_exp_wildcard(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_has_wildcard(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gpm_enabled() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_libcall(
        libname: *mut char_u,
        funcname: *mut char_u,
        argstring: *mut char_u,
        argint: ::std::os::raw::c_int,
        string_result: *mut *mut char_u,
        number_result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_term_clip();
}
extern "C" {
    pub fn start_xterm_trace(button: ::std::os::raw::c_int);
}
extern "C" {
    pub fn stop_xterm_trace();
}
extern "C" {
    pub fn clear_xterm_clip();
}
extern "C" {
    pub fn clip_xterm_own_selection(cbd: *mut VimClipboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_xterm_lose_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_xterm_request_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_xterm_set_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn xsmp_handle_requests() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsmp_init();
}
extern "C" {
    pub fn xsmp_close();
}
extern "C" {
    pub fn aubuflocal_remove(buf: *mut buf_T);
}
extern "C" {
    pub fn au_has_group(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_augroup(arg: *mut char_u, del_group: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_all_autocmds();
}
extern "C" {
    pub fn check_ei() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_event_disable(what: *mut ::std::os::raw::c_char) -> *mut char_u;
}
extern "C" {
    pub fn au_event_restore(old_ei: *mut char_u);
}
extern "C" {
    pub fn do_autocmd(arg_in: *mut char_u, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_doautocmd(
        arg: *mut char_u,
        do_msg: ::std::os::raw::c_int,
        did_something: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_doautoall(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_nomodeline(argp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aucmd_prepbuf(aco: *mut aco_save_T, buf: *mut buf_T);
}
extern "C" {
    pub fn aucmd_restbuf(aco: *mut aco_save_T);
}
extern "C" {
    pub fn apply_autocmds(
        event: event_T,
        fname: *mut char_u,
        fname_io: *mut char_u,
        force: ::std::os::raw::c_int,
        buf: *mut buf_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn apply_autocmds_exarg(
        event: event_T,
        fname: *mut char_u,
        fname_io: *mut char_u,
        force: ::std::os::raw::c_int,
        buf: *mut buf_T,
        eap: *mut exarg_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn apply_autocmds_retval(
        event: event_T,
        fname: *mut char_u,
        fname_io: *mut char_u,
        force: ::std::os::raw::c_int,
        buf: *mut buf_T,
        retval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cursorhold() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trigger_cursorhold() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cursormoved() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cursormovedI() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textchanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textchangedI() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textchangedP() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_insertcharpre() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_cmdundefined() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_funcundefined() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_textyankpost() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_completechanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn block_autocmds();
}
extern "C" {
    pub fn unblock_autocmds();
}
extern "C" {
    pub fn is_autocmd_blocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnextac(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn has_autocmd(
        event: event_T,
        sfname: *mut char_u,
        buf: *mut buf_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_augroup_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_autocmd(
        xp: *mut expand_T,
        arg: *mut char_u,
        doautocmd: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_event_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn autocmd_supported(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_exists(arg: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob_alloc() -> *mut blob_T;
}
extern "C" {
    pub fn rettv_blob_alloc(rettv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_blob_set(rettv: *mut typval_T, b: *mut blob_T);
}
extern "C" {
    pub fn blob_copy(from: *mut typval_T, to: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob_free(b: *mut blob_T);
}
extern "C" {
    pub fn blob_unref(b: *mut blob_T);
}
extern "C" {
    pub fn blob_len(b: *mut blob_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn blob_get(b: *mut blob_T, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob_set(b: *mut blob_T, idx: ::std::os::raw::c_int, c: char_u);
}
extern "C" {
    pub fn blob_equal(b1: *mut blob_T, b2: *mut blob_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_blob(fd: *mut FILE, blob: *mut blob_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_blob(fd: *mut FILE, blob: *mut blob_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blob2string(
        blob: *mut blob_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn string2blob(str_: *mut char_u) -> *mut blob_T;
}
extern "C" {
    pub fn open_buffer(
        read_stdin: ::std::os::raw::c_int,
        eap: *mut exarg_T,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_bufref(bufref: *mut bufref_T, buf: *mut buf_T);
}
extern "C" {
    pub fn bufref_valid(bufref: *mut bufref_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_valid(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close_buffer(
        win: *mut win_T,
        buf: *mut buf_T,
        action: ::std::os::raw::c_int,
        abort_if_last: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn buf_clear_file(buf: *mut buf_T);
}
extern "C" {
    pub fn buf_freeall(buf: *mut buf_T, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn goto_buffer(
        eap: *mut exarg_T,
        start: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn handle_swap_exists(old_curbuf: *mut bufref_T);
}
extern "C" {
    pub fn do_bufdel(
        command: ::std::os::raw::c_int,
        arg: *mut char_u,
        addr_count: ::std::os::raw::c_int,
        start_bnr: ::std::os::raw::c_int,
        end_bnr: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn do_buffer(
        action: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_curbuf(buf: *mut buf_T, action: ::std::os::raw::c_int);
}
extern "C" {
    pub fn enter_buffer(buf: *mut buf_T);
}
extern "C" {
    pub fn do_autochdir();
}
extern "C" {
    pub fn no_write_message();
}
extern "C" {
    pub fn no_write_message_nobang(buf: *mut buf_T);
}
extern "C" {
    pub fn curbuf_reusable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_new(
        ffname_arg: *mut char_u,
        sfname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn free_buf_options(buf: *mut buf_T, free_p_ff: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buflist_getfile(
        n: ::std::os::raw::c_int,
        lnum: linenr_T,
        options: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_getfpos();
}
extern "C" {
    pub fn buflist_findname_exp(fname: *mut char_u) -> *mut buf_T;
}
extern "C" {
    pub fn buflist_findname(ffname: *mut char_u) -> *mut buf_T;
}
extern "C" {
    pub fn buflist_findpat(
        pattern: *mut char_u,
        pattern_end: *mut char_u,
        unlisted: ::std::os::raw::c_int,
        diffmode: ::std::os::raw::c_int,
        curtab_only: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ExpandBufnames(
        pat: *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_findnr(nr: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn buflist_nr2name(
        n: ::std::os::raw::c_int,
        fullname: ::std::os::raw::c_int,
        helptail: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_winopts(buf: *mut buf_T);
}
extern "C" {
    pub fn buflist_findfpos(buf: *mut buf_T) -> *mut pos_T;
}
extern "C" {
    pub fn buflist_findlnum(buf: *mut buf_T) -> linenr_T;
}
extern "C" {
    pub fn buflist_list(eap: *mut exarg_T);
}
extern "C" {
    pub fn buflist_name_nr(
        fnum: ::std::os::raw::c_int,
        fname: *mut *mut char_u,
        lnum: *mut linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setfname(
        buf: *mut buf_T,
        ffname_arg: *mut char_u,
        sfname_arg: *mut char_u,
        message: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_set_name(fnum: ::std::os::raw::c_int, name: *mut char_u);
}
extern "C" {
    pub fn buf_name_changed(buf: *mut buf_T);
}
extern "C" {
    pub fn setaltfname(ffname: *mut char_u, sfname: *mut char_u, lnum: linenr_T) -> *mut buf_T;
}
extern "C" {
    pub fn getaltfname(errmsg: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn buflist_add(fname: *mut char_u, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_slash_adjust();
}
extern "C" {
    pub fn buflist_altfpos(win: *mut win_T);
}
extern "C" {
    pub fn otherfile(ffname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_setino(buf: *mut buf_T);
}
extern "C" {
    pub fn fileinfo(
        fullname: ::std::os::raw::c_int,
        shorthelp: ::std::os::raw::c_int,
        dont_truncate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn col_print(
        buf: *mut char_u,
        buflen: usize,
        col: ::std::os::raw::c_int,
        vcol: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_rel_pos(wp: *mut win_T, buf: *mut char_u, buflen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fix_fname(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn fname_expand(buf: *mut buf_T, ffname: *mut *mut char_u, sfname: *mut *mut char_u);
}
extern "C" {
    pub fn alist_name(aep: *mut aentry_T) -> *mut char_u;
}
extern "C" {
    pub fn do_arg_all(
        count: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        keep_tabs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ex_buffer_all(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_modelines(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_viminfo_bufferlist(
        virp: *mut vir_T,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_bufferlist(fp: *mut FILE);
}
extern "C" {
    pub fn bt_normal(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_quickfix(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_terminal(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_help(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_prompt(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_popup(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_nofile(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_dontwrite(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_dontwrite_msg(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_hide(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_spname(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn switch_to_win_for_buf(
        buf: *mut buf_T,
        save_curwinp: *mut *mut win_T,
        save_curtabp: *mut *mut tabpage_T,
        save_curbuf: *mut bufref_T,
    );
}
extern "C" {
    pub fn restore_win_for_buf(
        save_curwin: *mut win_T,
        save_curtab: *mut tabpage_T,
        save_curbuf: *mut bufref_T,
    );
}
extern "C" {
    pub fn find_win_for_buf(
        buf: *mut buf_T,
        wp: *mut *mut win_T,
        tp: *mut *mut tabpage_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_buflisted(on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buf_contents_changed(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wipe_buffer(buf: *mut buf_T, aucmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn change_warning(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn changed();
}
extern "C" {
    pub fn changed_internal();
}
extern "C" {
    pub fn f_listener_add(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn f_listener_flush(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn f_listener_remove(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn may_invoke_listeners(
        buf: *mut buf_T,
        lnum: linenr_T,
        lnume: linenr_T,
        added: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn invoke_listeners(buf: *mut buf_T);
}
extern "C" {
    pub fn changed_bytes(lnum: linenr_T, col: colnr_T);
}
extern "C" {
    pub fn inserted_bytes(lnum: linenr_T, col: colnr_T, added: ::std::os::raw::c_int);
}
extern "C" {
    pub fn appended_lines(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn appended_lines_mark(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn deleted_lines(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn deleted_lines_mark(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn changed_lines(
        lnum: linenr_T,
        col: colnr_T,
        lnume: linenr_T,
        xtra: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn changed_lines_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        lnume: linenr_T,
        xtra: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn unchanged(buf: *mut buf_T, ff: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_bytes(p: *mut char_u);
}
extern "C" {
    pub fn ins_bytes_len(p: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_char(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_char_bytes(buf: *mut char_u, charlen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ins_str(s: *mut char_u);
}
extern "C" {
    pub fn del_char(fixpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_chars(
        count: ::std::os::raw::c_long,
        fixpos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_bytes(
        count: ::std::os::raw::c_long,
        fixpos_arg: ::std::os::raw::c_int,
        use_delcombine: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_line(
        dir: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        second_line_indent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate_line(fixpos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_lines(nlines: ::std::os::raw::c_long, undo: ::std::os::raw::c_int);
}
extern "C" {
    pub fn init_chartab() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_init_chartab(
        buf: *mut buf_T,
        global: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trans_characters(buf: *mut char_u, bufsize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn transstr(s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn str_foldcase(
        str_: *mut char_u,
        orglen: ::std::os::raw::c_int,
        buf: *mut char_u,
        buflen: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn transchar(c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn transchar_byte(c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn transchar_nonprint(buf: *mut char_u, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn transchar_hex(buf: *mut char_u, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn byte2cells(b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn char2cells(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strsize(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strnsize(s: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chartabsize(p: *mut char_u, col: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linetabsize(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linetabsize_col(
        startcol: ::std::os::raw::c_int,
        s: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_linetabsize(
        wp: *mut win_T,
        line: *mut char_u,
        len: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isIDc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordc_buf(c: ::std::os::raw::c_int, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordp(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_iswordp_buf(p: *mut char_u, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isfilec(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isfilec_or_wc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isprintc(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isprintc_strict(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lbr_chartabsize(
        line: *mut char_u,
        s: *mut ::std::os::raw::c_uchar,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lbr_chartabsize_adv(
        line: *mut char_u,
        s: *mut *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_lbr_chartabsize(
        wp: *mut win_T,
        line: *mut char_u,
        s: *mut char_u,
        col: colnr_T,
        headp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_win_border(wp: *mut win_T, vcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvcol(
        wp: *mut win_T,
        pos: *mut pos_T,
        start: *mut colnr_T,
        cursor: *mut colnr_T,
        end: *mut colnr_T,
    );
}
extern "C" {
    pub fn getvcol_nolist(posp: *mut pos_T) -> colnr_T;
}
extern "C" {
    pub fn getvvcol(
        wp: *mut win_T,
        pos: *mut pos_T,
        start: *mut colnr_T,
        cursor: *mut colnr_T,
        end: *mut colnr_T,
    );
}
extern "C" {
    pub fn getvcols(
        wp: *mut win_T,
        pos1: *mut pos_T,
        pos2: *mut pos_T,
        left: *mut colnr_T,
        right: *mut colnr_T,
    );
}
extern "C" {
    pub fn skipwhite(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn getwhitecols_curline() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwhitecols(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skipdigits(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skipbin(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiphex(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptobin(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptodigit(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptohex(q: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_isdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isxdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isbdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_islower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_toupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_tolower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skiptowhite(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skiptowhite_esc(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn getdigits(pp: *mut *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vim_isblankline(lbuf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_str2nr(
        start: *mut char_u,
        prep: *mut ::std::os::raw::c_int,
        len: *mut ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        nptr: *mut varnumber_T,
        unptr: *mut uvarnumber_T,
        maxlen: ::std::os::raw::c_int,
        strict: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hex2nr(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hexhex2nr(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rem_backslash(str_: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn backslash_halve(p: *mut char_u);
}
extern "C" {
    pub fn backslash_halve_save(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn ebcdic2ascii(buffer: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn has_watchexpr() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_debug(cmd: *mut char_u);
}
extern "C" {
    pub fn ex_debug(eap: *mut exarg_T);
}
extern "C" {
    pub fn dbg_check_breakpoint(eap: *mut exarg_T);
}
extern "C" {
    pub fn dbg_check_skipped(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_breakadd(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_debuggreedy(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_breakdel(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_breaklist(eap: *mut exarg_T);
}
extern "C" {
    pub fn dbg_find_breakpoint(
        file: ::std::os::raw::c_int,
        fname: *mut char_u,
        after: linenr_T,
    ) -> linenr_T;
}
extern "C" {
    pub fn has_profiling(
        file: ::std::os::raw::c_int,
        fname: *mut char_u,
        fp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbg_breakpoint(name: *mut char_u, lnum: linenr_T);
}
extern "C" {
    pub fn dict_alloc() -> *mut dict_T;
}
extern "C" {
    pub fn dict_alloc_id(id: alloc_id_T) -> *mut dict_T;
}
extern "C" {
    pub fn dict_alloc_lock(lock: ::std::os::raw::c_int) -> *mut dict_T;
}
extern "C" {
    pub fn rettv_dict_alloc(rettv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_dict_set(rettv: *mut typval_T, d: *mut dict_T);
}
extern "C" {
    pub fn dict_free_contents(d: *mut dict_T);
}
extern "C" {
    pub fn dict_unref(d: *mut dict_T);
}
extern "C" {
    pub fn dict_free_nonref(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_free_items(copyID: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dictitem_alloc(key: *mut char_u) -> *mut dictitem_T;
}
extern "C" {
    pub fn dictitem_remove(dict: *mut dict_T, item: *mut dictitem_T);
}
extern "C" {
    pub fn dictitem_free(item: *mut dictitem_T);
}
extern "C" {
    pub fn dict_copy(
        orig: *mut dict_T,
        deep: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> *mut dict_T;
}
extern "C" {
    pub fn dict_add(d: *mut dict_T, item: *mut dictitem_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_number(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        nr: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_special(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        nr: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_string(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        str_: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_string_len(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_add_list(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        list: *mut list_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_iterate_start(var: *mut typval_T, iter: *mut dict_iterator_T);
}
extern "C" {
    pub fn dict_iterate_next(
        iter: *mut dict_iterator_T,
        tv_result: *mut *mut typval_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn dict_add_dict(
        d: *mut dict_T,
        key: *mut ::std::os::raw::c_char,
        dict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_len(d: *mut dict_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dict_find(
        d: *mut dict_T,
        key: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn dict_get_string(
        d: *mut dict_T,
        key: *mut char_u,
        save: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn dict_get_number(d: *mut dict_T, key: *mut char_u) -> varnumber_T;
}
extern "C" {
    pub fn dict_get_number_check(d: *mut dict_T, key: *mut char_u) -> varnumber_T;
}
extern "C" {
    pub fn dict2string(
        tv: *mut typval_T,
        copyID: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn dict_get_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_extend(d1: *mut dict_T, d2: *mut dict_T, action: *mut char_u);
}
extern "C" {
    pub fn dict_lookup(hi: *mut hashitem_T) -> *mut dictitem_T;
}
extern "C" {
    pub fn dict_equal(
        d1: *mut dict_T,
        d2: *mut dict_T,
        ic: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dict_list(argvars: *mut typval_T, rettv: *mut typval_T, what: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dict_set_items_ro(di: *mut dict_T);
}
extern "C" {
    pub fn diff_buf_delete(buf: *mut buf_T);
}
extern "C" {
    pub fn diff_buf_adjust(win: *mut win_T);
}
extern "C" {
    pub fn diff_buf_add(buf: *mut buf_T);
}
extern "C" {
    pub fn diff_invalidate(buf: *mut buf_T);
}
extern "C" {
    pub fn diff_mark_adjust(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn diff_internal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_diffupdate(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_diffpatch(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_diffsplit(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_diffthis(eap: *mut exarg_T);
}
extern "C" {
    pub fn diff_win_options(wp: *mut win_T, addbuf: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_diffoff(eap: *mut exarg_T);
}
extern "C" {
    pub fn diff_clear(tp: *mut tabpage_T);
}
extern "C" {
    pub fn diff_check(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_check_fill(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_set_topline(fromwin: *mut win_T, towin: *mut win_T);
}
extern "C" {
    pub fn diffopt_changed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diffopt_horizontal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diffopt_hiddenoff() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_find_change(
        wp: *mut win_T,
        lnum: linenr_T,
        startp: *mut ::std::os::raw::c_int,
        endp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_infold(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nv_diffgetput(put: ::std::os::raw::c_int, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn ex_diffgetput(eap: *mut exarg_T);
}
extern "C" {
    pub fn diff_mode_buf(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_move_to(
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diff_get_corresponding_line(buf1: *mut buf_T, lnum1: linenr_T) -> linenr_T;
}
extern "C" {
    pub fn diff_lnum_win(lnum: linenr_T, wp: *mut win_T) -> linenr_T;
}
extern "C" {
    pub fn do_digraph(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_digraph_for_char(val_arg: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_digraph(cmdline: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdigraph(
        char1: ::std::os::raw::c_int,
        char2: ::std::os::raw::c_int,
        meta_char: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putdigraph(str_: *mut char_u);
}
extern "C" {
    pub fn listdigraphs(use_headers: ::std::os::raw::c_int);
}
extern "C" {
    pub fn keymap_init() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ex_loadkeymap(eap: *mut exarg_T);
}
extern "C" {
    pub fn keymap_clear(kmap: *mut garray_T);
}
extern "C" {
    pub fn state_edit_initialize(
        cmdchar: ::std::os::raw::c_int,
        startln: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_edit_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn state_edit_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn edit(
        cmdchar: ::std::os::raw::c_int,
        startln: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_need_undo_get() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_redraw(ready: ::std::os::raw::c_int);
}
extern "C" {
    pub fn edit_putchar(c: ::std::os::raw::c_int, highlight: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prompt_text() -> *mut char_u;
}
extern "C" {
    pub fn prompt_curpos_editable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edit_unputchar();
}
extern "C" {
    pub fn display_dollar(col: colnr_T);
}
extern "C" {
    pub fn change_indent(
        type_: ::std::os::raw::c_int,
        amount: ::std::os::raw::c_int,
        round: ::std::os::raw::c_int,
        replaced: ::std::os::raw::c_int,
        call_changed_bytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn truncate_spaces(line: *mut char_u);
}
extern "C" {
    pub fn backspace_until_column(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_literal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertchar(
        c: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        second_indent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn auto_format(trailblank: ::std::os::raw::c_int, prev_line: ::std::os::raw::c_int);
}
extern "C" {
    pub fn comp_textwidth(ff: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_arrow(end_insert_pos: *mut pos_T);
}
extern "C" {
    pub fn stop_arrow() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_last_insert(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_last_insert();
}
extern "C" {
    pub fn add_char2buf(c: ::std::os::raw::c_int, s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn beginline(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn oneright() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn oneleft() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cursor_up(
        n: ::std::os::raw::c_long,
        upd_topline: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cursor_down(
        n: ::std::os::raw::c_long,
        upd_topline: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stuff_inserted(
        c: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        no_esc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_last_insert() -> *mut char_u;
}
extern "C" {
    pub fn get_last_insert_save() -> *mut char_u;
}
extern "C" {
    pub fn replace_push(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn replace_push_mb(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hkmap(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bracketed_paste(
        mode: paste_mode_T,
        drop: ::std::os::raw::c_int,
        gap: *mut garray_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_scroll();
}
extern "C" {
    pub fn ins_horscroll();
}
extern "C" {
    pub fn ins_eol(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_copychar(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_nolist_virtcol() -> colnr_T;
}
extern "C" {
    pub fn can_cindent_get() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_apply_autocmds(event: event_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_init();
}
extern "C" {
    pub fn eval_clear();
}
extern "C" {
    pub fn set_internal_string_var(name: *mut char_u, value: *mut char_u);
}
extern "C" {
    pub fn var_redir_start(
        name: *mut char_u,
        append: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_redir_str(value: *mut char_u, value_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn var_redir_stop();
}
extern "C" {
    pub fn eval_charconvert(
        enc_from: *mut char_u,
        enc_to: *mut char_u,
        fname_from: *mut char_u,
        fname_to: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_printexpr(fname: *mut char_u, args: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_diff(origfile: *mut char_u, newfile: *mut char_u, outfile: *mut char_u);
}
extern "C" {
    pub fn eval_patch(origfile: *mut char_u, difffile: *mut char_u, outfile: *mut char_u);
}
extern "C" {
    pub fn eval_to_bool(
        arg: *mut char_u,
        error: *mut ::std::os::raw::c_int,
        nextcmd: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_expr_typval(
        expr: *mut typval_T,
        argv: *mut typval_T,
        argc: ::std::os::raw::c_int,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_expr_to_bool(
        expr: *mut typval_T,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_to_string_skip(
        arg: *mut char_u,
        nextcmd: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn skip_expr(pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_to_string(
        arg: *mut char_u,
        nextcmd: *mut *mut char_u,
        convert: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn eval_to_string_safe(
        arg: *mut char_u,
        nextcmd: *mut *mut char_u,
        use_sandbox: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn eval_to_number(expr: *mut char_u) -> varnumber_T;
}
extern "C" {
    pub fn prepare_vimvar(idx: ::std::os::raw::c_int, save_tv: *mut typval_T);
}
extern "C" {
    pub fn restore_vimvar(idx: ::std::os::raw::c_int, save_tv: *mut typval_T);
}
extern "C" {
    pub fn eval_spell_expr(badword: *mut char_u, expr: *mut char_u) -> *mut list_T;
}
extern "C" {
    pub fn get_spellword(list: *mut list_T, pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_expr(arg: *mut char_u, nextcmd: *mut *mut char_u) -> *mut typval_T;
}
extern "C" {
    pub fn call_vim_function(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_func_retnr(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
    ) -> varnumber_T;
}
extern "C" {
    pub fn call_func_retstr(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn call_func_retlist(
        func: *mut char_u,
        argc: ::std::os::raw::c_int,
        argv: *mut typval_T,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn eval_foldexpr(arg: *mut char_u, cp: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_let(eap: *mut exarg_T);
}
extern "C" {
    pub fn list_hashtable_vars(
        ht: *mut hashtab_T,
        prefix: *mut ::std::os::raw::c_char,
        empty: ::std::os::raw::c_int,
        first: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_lval(
        name: *mut char_u,
        rettv: *mut typval_T,
        lp: *mut lval_T,
        unlet: ::std::os::raw::c_int,
        skip: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        fne_flags: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn clear_lval(lp: *mut lval_T);
}
extern "C" {
    pub fn eval_for_line(
        arg: *mut char_u,
        errp: *mut ::std::os::raw::c_int,
        nextcmdp: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn next_for_item(
        fi_void: *mut ::std::os::raw::c_void,
        arg: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_for_info(fi_void: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn set_context_for_expression(xp: *mut expand_T, arg: *mut char_u, cmdidx: cmdidx_T);
}
extern "C" {
    pub fn ex_unlet(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_lockvar(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_unlet(name: *mut char_u, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_menutrans_vars();
}
extern "C" {
    pub fn get_user_var_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn eval0(
        arg: *mut char_u,
        rettv: *mut typval_T,
        nextcmd: *mut *mut char_u,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval1(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_option_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn partial_name(pt: *mut partial_T) -> *mut char_u;
}
extern "C" {
    pub fn partial_unref(pt: *mut partial_T);
}
extern "C" {
    pub fn tv_equal(
        tv1: *mut typval_T,
        tv2: *mut typval_T,
        ic: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_copyID() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn garbage_collect(testing: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_ht(
        ht: *mut hashtab_T,
        copyID: ::std::os::raw::c_int,
        list_stack: *mut *mut list_stack_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_list(
        l: *mut list_T,
        copyID: ::std::os::raw::c_int,
        ht_stack: *mut *mut ht_stack_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_item(
        tv: *mut typval_T,
        copyID: ::std::os::raw::c_int,
        ht_stack: *mut *mut ht_stack_T,
        list_stack: *mut *mut list_stack_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echo_string_core(
        tv: *mut typval_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
        copyID: ::std::os::raw::c_int,
        echo_style: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
        composite_val: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn echo_string(
        tv: *mut typval_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
        copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn tv2string(
        tv: *mut typval_T,
        tofree: *mut *mut char_u,
        numbuf: *mut char_u,
        copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn string_quote(str_: *mut char_u, function: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn string2float(text: *mut char_u, value: *mut float_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var2fpos(
        varp: *mut typval_T,
        dollar_lnum: ::std::os::raw::c_int,
        fnum: *mut ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn list2fpos(
        arg: *mut typval_T,
        posp: *mut pos_T,
        fnump: *mut ::std::os::raw::c_int,
        curswantp: *mut colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_id_len(arg: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_name_len(
        arg: *mut *mut char_u,
        alias: *mut *mut char_u,
        evaluate: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_name_end(
        arg: *mut char_u,
        expr_start: *mut *mut char_u,
        expr_end: *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn eval_isnamec(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_isnamec1(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_vim_var_nr(idx: ::std::os::raw::c_int, val: varnumber_T);
}
extern "C" {
    pub fn get_vim_var_nr(idx: ::std::os::raw::c_int) -> varnumber_T;
}
extern "C" {
    pub fn get_vim_var_str(idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_vim_var_list(idx: ::std::os::raw::c_int) -> *mut list_T;
}
extern "C" {
    pub fn get_vim_var_dict(idx: ::std::os::raw::c_int) -> *mut dict_T;
}
extern "C" {
    pub fn set_vim_var_char(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_vcount(
        count: ::std::os::raw::c_long,
        count1: ::std::os::raw::c_long,
        set_prevcount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn save_vimvars(vvsave: *mut vimvars_save_T);
}
extern "C" {
    pub fn restore_vimvars(vvsave: *mut vimvars_save_T);
}
extern "C" {
    pub fn set_vim_var_string(
        idx: ::std::os::raw::c_int,
        val: *mut char_u,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_vim_var_list(idx: ::std::os::raw::c_int, val: *mut list_T);
}
extern "C" {
    pub fn set_vim_var_dict(idx: ::std::os::raw::c_int, val: *mut dict_T);
}
extern "C" {
    pub fn set_reg_var(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn v_exception(oldval: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn v_throwpoint(oldval: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn set_cmdarg(eap: *mut exarg_T, oldarg: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_var_tv(
        name: *mut char_u,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        dip: *mut *mut dictitem_T,
        verbose: ::std::os::raw::c_int,
        no_autoload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_subscript(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloc_tv() -> *mut typval_T;
}
extern "C" {
    pub fn free_tv(varp: *mut typval_T);
}
extern "C" {
    pub fn clear_tv(varp: *mut typval_T);
}
extern "C" {
    pub fn init_tv(varp: *mut typval_T);
}
extern "C" {
    pub fn tv_get_number(varp: *mut typval_T) -> varnumber_T;
}
extern "C" {
    pub fn tv_get_number_chk(
        varp: *mut typval_T,
        denote: *mut ::std::os::raw::c_int,
    ) -> varnumber_T;
}
extern "C" {
    pub fn tv_get_float(varp: *mut typval_T) -> float_T;
}
extern "C" {
    pub fn tv_get_string(varp: *mut typval_T) -> *mut char_u;
}
extern "C" {
    pub fn tv_get_string_buf(varp: *mut typval_T, buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn tv_get_string_chk(varp: *mut typval_T) -> *mut char_u;
}
extern "C" {
    pub fn tv_get_string_buf_chk(varp: *mut typval_T, buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn tv_stringify(varp: *mut typval_T, buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn find_var(
        name: *mut char_u,
        htp: *mut *mut hashtab_T,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn find_var_in_ht(
        ht: *mut hashtab_T,
        htname: ::std::os::raw::c_int,
        varname: *mut char_u,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn find_var_ht(name: *mut char_u, varname: *mut *mut char_u) -> *mut hashtab_T;
}
extern "C" {
    pub fn get_var_value(name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn new_script_vars(id: scid_T);
}
extern "C" {
    pub fn init_var_dict(
        dict: *mut dict_T,
        dict_var: *mut dictitem_T,
        scope: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn unref_var_dict(dict: *mut dict_T);
}
extern "C" {
    pub fn vars_clear(ht: *mut hashtab_T);
}
extern "C" {
    pub fn vars_clear_ext(ht: *mut hashtab_T, free_val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_var(name: *mut char_u, tv: *mut typval_T, copy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn var_check_ro(
        flags: ::std::os::raw::c_int,
        name: *mut char_u,
        use_gettext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_check_fixed(
        flags: ::std::os::raw::c_int,
        name: *mut char_u,
        use_gettext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_check_func_name(
        name: *mut char_u,
        new_var: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn var_check_lock(
        lock: ::std::os::raw::c_int,
        name: *mut char_u,
        use_gettext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valid_varname(varname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_tv(from: *mut typval_T, to: *mut typval_T);
}
extern "C" {
    pub fn item_copy(
        from: *mut typval_T,
        to: *mut typval_T,
        deep: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_user_input(
        argvars: *mut typval_T,
        rettv: *mut typval_T,
        inputdialog: ::std::os::raw::c_int,
        secret: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ex_echo(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_echohl(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_execute(eap: *mut exarg_T);
}
extern "C" {
    pub fn find_win_by_nr(vp: *mut typval_T, tp: *mut tabpage_T) -> *mut win_T;
}
extern "C" {
    pub fn find_win_by_nr_or_id(vp: *mut typval_T) -> *mut win_T;
}
extern "C" {
    pub fn find_tabwin(
        wvp: *mut typval_T,
        tvp: *mut typval_T,
        ptp: *mut *mut tabpage_T,
    ) -> *mut win_T;
}
extern "C" {
    pub fn getwinvar(argvars: *mut typval_T, rettv: *mut typval_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setwinvar(argvars: *mut typval_T, rettv: *mut typval_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn autoload_name(name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn script_autoload(
        name: *mut char_u,
        reload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_viminfo_varlist(
        virp: *mut vir_T,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_varlist(fp: *mut FILE);
}
extern "C" {
    pub fn store_session_globals(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn last_set_msg(script_ctx: sctx_T);
}
extern "C" {
    pub fn reset_v_option_vars();
}
extern "C" {
    pub fn prepare_assert_error(gap: *mut garray_T);
}
extern "C" {
    pub fn assert_error(gap: *mut garray_T);
}
extern "C" {
    pub fn assert_equal_common(
        argvars: *mut typval_T,
        atype: assert_type_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_equalfile(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_match_common(
        argvars: *mut typval_T,
        atype: assert_type_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_inrange(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_bool(
        argvars: *mut typval_T,
        isTrue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_report(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_exception(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_beeps(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assert_fails(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fill_assert_error(
        gap: *mut garray_T,
        opt_msg_tv: *mut typval_T,
        exp_str: *mut char_u,
        exp_tv: *mut typval_T,
        got_tv: *mut typval_T,
        atype: assert_type_T,
    );
}
extern "C" {
    pub fn typval_compare(
        typ1: *mut typval_T,
        typ2: *mut typval_T,
        type_: exptype_T,
        type_is: ::std::os::raw::c_int,
        ic: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typval_tostring(arg: *mut typval_T) -> *mut char_u;
}
extern "C" {
    pub fn var_exists(var: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modify_fname(
        src: *mut char_u,
        tilde_file: ::std::os::raw::c_int,
        usedlen: *mut ::std::os::raw::c_int,
        fnamep: *mut *mut char_u,
        bufp: *mut *mut char_u,
        fnamelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_string_sub(
        str_: *mut char_u,
        pat: *mut char_u,
        sub: *mut char_u,
        expr: *mut typval_T,
        flags: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn filter_map(argvars: *mut typval_T, rettv: *mut typval_T, map: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_function_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_expr_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn find_internal_func(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_internal_func(
        name: *mut char_u,
        argcount: ::std::os::raw::c_int,
        argvars: *mut typval_T,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buflist_find_by_name(
        name: *mut char_u,
        curtab_only: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn tv_get_buf(tv: *mut typval_T, curtab_only: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn get_buf_arg(arg: *mut typval_T) -> *mut buf_T;
}
extern "C" {
    pub fn execute_redir_str(value: *mut char_u, value_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mzscheme_call_vim(name: *mut char_u, args: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn vim_round(f: float_T) -> float_T;
}
extern "C" {
    pub fn do_searchpair(
        spat: *mut char_u,
        mpat: *mut char_u,
        epat: *mut char_u,
        dir: ::std::os::raw::c_int,
        skip: *mut typval_T,
        flags: ::std::os::raw::c_int,
        match_pos: *mut pos_T,
        lnum_stop: linenr_T,
        time_limit: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn f_string(argvars: *mut typval_T, rettv: *mut typval_T);
}
extern "C" {
    pub fn get_callback(arg: *mut typval_T) -> callback_T;
}
extern "C" {
    pub fn put_callback(cb: *mut callback_T, tv: *mut typval_T);
}
extern "C" {
    pub fn set_callback(dest: *mut callback_T, src: *mut callback_T);
}
extern "C" {
    pub fn free_callback(callback: *mut callback_T);
}
extern "C" {
    pub fn do_ascii(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_align(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_sort(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_retab(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_move(line1: linenr_T, line2: linenr_T, dest: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_copy(line1: linenr_T, line2: linenr_T, n: linenr_T);
}
extern "C" {
    pub fn free_prev_shellcmd();
}
extern "C" {
    pub fn do_bang(
        addr_count: ::std::os::raw::c_int,
        eap: *mut exarg_T,
        forceit: ::std::os::raw::c_int,
        do_in: ::std::os::raw::c_int,
        do_out: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn do_shell(cmd: *mut char_u, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn make_filter_cmd(cmd: *mut char_u, itmp: *mut char_u, otmp: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn append_redir(
        buf: *mut char_u,
        buflen: ::std::os::raw::c_int,
        opt: *mut char_u,
        fname: *mut char_u,
    );
}
extern "C" {
    pub fn viminfo_error(
        errnum: *mut ::std::os::raw::c_char,
        message: *mut ::std::os::raw::c_char,
        line: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_viminfo(file: *mut char_u, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo(file: *mut char_u, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn viminfo_readline(virp: *mut vir_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn viminfo_readstring(
        virp: *mut vir_T,
        off: ::std::os::raw::c_int,
        convert: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn viminfo_writestring(fd: *mut FILE, p: *mut char_u);
}
extern "C" {
    pub fn barline_writestring(
        fd: *mut FILE,
        s: *mut char_u,
        remaining_start: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_time() -> time_T;
}
extern "C" {
    pub fn do_fixdel(eap: *mut exarg_T);
}
extern "C" {
    pub fn print_line_no_prefix(
        lnum: linenr_T,
        use_number: ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn print_line(
        lnum: linenr_T,
        use_number: ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rename_buffer(new_fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_file(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_update(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_write(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_write(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_overwrite(
        eap: *mut exarg_T,
        buf: *mut buf_T,
        fname: *mut char_u,
        ffname: *mut char_u,
        other: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_wnext(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_wqall(eap: *mut exarg_T);
}
extern "C" {
    pub fn not_writing() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfile(
        fnum: ::std::os::raw::c_int,
        ffname_arg: *mut char_u,
        sfname_arg: *mut char_u,
        setpm: ::std::os::raw::c_int,
        lnum: linenr_T,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_ecmd(
        fnum: ::std::os::raw::c_int,
        ffname: *mut char_u,
        sfname: *mut char_u,
        eap: *mut exarg_T,
        newlnum: linenr_T,
        flags: ::std::os::raw::c_int,
        oldwin: *mut win_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_append(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_change(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_z(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_restricted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_secure() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_sub(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_sub_msg(count_only: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_global(eap: *mut exarg_T);
}
extern "C" {
    pub fn global_exe(cmd: *mut char_u);
}
extern "C" {
    pub fn read_viminfo_sub_string(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_sub_string(fp: *mut FILE);
}
extern "C" {
    pub fn free_old_sub();
}
extern "C" {
    pub fn prepare_tagpreview(undo_sync: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_help(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_helpclose(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_help_lang(arg: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn help_heuristic(
        matched_string: *mut char_u,
        offset: ::std::os::raw::c_int,
        wrong_case: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_help_tags(
        arg: *mut char_u,
        num_matches: *mut ::std::os::raw::c_int,
        matches: *mut *mut *mut char_u,
        keep_lang: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fix_help_buffer();
}
extern "C" {
    pub fn ex_exusage(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_viusage(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_helptags(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_drop(eap: *mut exarg_T);
}
extern "C" {
    pub fn skip_vimgrep_pat(
        p: *mut char_u,
        s: *mut *mut char_u,
        flags: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ex_oldfiles(eap: *mut exarg_T);
}
extern "C" {
    pub fn profile_start(tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_end(tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_sub(tm: *mut proftime_T, tm2: *mut proftime_T);
}
extern "C" {
    pub fn profile_msg(tm: *mut proftime_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn profile_float(tm: *mut proftime_T) -> float_T;
}
extern "C" {
    pub fn profile_setlimit(msec: ::std::os::raw::c_long, tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_passed_limit(tm: *mut proftime_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profile_zero(tm: *mut proftime_T);
}
extern "C" {
    pub fn proftime_time_left(due: *mut proftime_T, now: *mut proftime_T)
        -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn create_timer(
        msec: ::std::os::raw::c_long,
        repeat: ::std::os::raw::c_int,
    ) -> *mut timer_T;
}
extern "C" {
    pub fn check_due_timer() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn find_timer(id: ::std::os::raw::c_long) -> *mut timer_T;
}
extern "C" {
    pub fn stop_timer(timer: *mut timer_T);
}
extern "C" {
    pub fn stop_all_timers();
}
extern "C" {
    pub fn add_timer_info(rettv: *mut typval_T, timer: *mut timer_T);
}
extern "C" {
    pub fn add_timer_info_all(rettv: *mut typval_T);
}
extern "C" {
    pub fn set_ref_in_timer(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_free_all();
}
extern "C" {
    pub fn profile_divide(tm: *mut proftime_T, count: ::std::os::raw::c_int, tm2: *mut proftime_T);
}
extern "C" {
    pub fn profile_add(tm: *mut proftime_T, tm2: *mut proftime_T);
}
extern "C" {
    pub fn profile_self(self_: *mut proftime_T, total: *mut proftime_T, children: *mut proftime_T);
}
extern "C" {
    pub fn profile_get_wait(tm: *mut proftime_T);
}
extern "C" {
    pub fn profile_sub_wait(tm: *mut proftime_T, tma: *mut proftime_T);
}
extern "C" {
    pub fn profile_equal(tm1: *mut proftime_T, tm2: *mut proftime_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profile_cmp(tm1: *const proftime_T, tm2: *const proftime_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_profile(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_profile_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_profile_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn profile_dump();
}
extern "C" {
    pub fn script_prof_save(tm: *mut proftime_T);
}
extern "C" {
    pub fn script_prof_restore(tm: *mut proftime_T);
}
extern "C" {
    pub fn prof_inchar_enter();
}
extern "C" {
    pub fn prof_inchar_exit();
}
extern "C" {
    pub fn prof_def_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autowrite(buf: *mut buf_T, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autowrite_all();
}
extern "C" {
    pub fn check_changed(buf: *mut buf_T, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn browse_save_fname(buf: *mut buf_T);
}
extern "C" {
    pub fn dialog_changed(buf: *mut buf_T, checkall: ::std::os::raw::c_int);
}
extern "C" {
    pub fn can_abandon(buf: *mut buf_T, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_changed_any(
        hidden: ::std::os::raw::c_int,
        unload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_fname() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_write_all(buf: *mut buf_T, forceit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_arglist_exp(
        str_: *mut char_u,
        fcountp: *mut ::std::os::raw::c_int,
        fnamesp: *mut *mut *mut char_u,
        wig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_arglist(str_: *mut char_u);
}
extern "C" {
    pub fn check_arg_idx(win: *mut win_T);
}
extern "C" {
    pub fn ex_args(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_previous(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_rewind(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_last(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argument(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_argfile(eap: *mut exarg_T, argn: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_next(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argedit(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argadd(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_argdelete(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_listdo(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_arglist_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn ex_compiler(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_runtime(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_in_path(
        path: *mut char_u,
        name: *mut char_u,
        flags: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(fname: *mut char_u, ck: *mut ::std::os::raw::c_void),
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_in_runtimepath(
        name: *mut char_u,
        flags: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(fname: *mut char_u, ck: *mut ::std::os::raw::c_void),
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn source_runtime(name: *mut char_u, flags: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn source_in_path(
        path: *mut char_u,
        name: *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_pack_start_dirs();
}
extern "C" {
    pub fn load_start_packages();
}
extern "C" {
    pub fn ex_packloadall(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_packadd(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_options(eap: *mut exarg_T);
}
extern "C" {
    pub fn init_pyxversion();
}
extern "C" {
    pub fn ex_pyxfile(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_pyx(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_pyxdo(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_source(eap: *mut exarg_T);
}
extern "C" {
    pub fn source_breakpoint(cookie: *mut ::std::os::raw::c_void) -> *mut linenr_T;
}
extern "C" {
    pub fn source_dbg_tick(cookie: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn source_level(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_source(
        fname: *mut char_u,
        check_other: ::std::os::raw::c_int,
        is_vimrc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_scriptnames(eap: *mut exarg_T);
}
extern "C" {
    pub fn scriptnames_slash_adjust();
}
extern "C" {
    pub fn get_scriptname(id: scid_T) -> *mut char_u;
}
extern "C" {
    pub fn free_scriptnames();
}
extern "C" {
    pub fn getsourceline(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn script_line_start();
}
extern "C" {
    pub fn script_line_exec();
}
extern "C" {
    pub fn script_line_end();
}
extern "C" {
    pub fn ex_scriptencoding(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_scriptversion(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_finish(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_finish(eap: *mut exarg_T, reanimate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn source_finished(
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_checktime(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_mess_lang() -> *mut char_u;
}
extern "C" {
    pub fn set_lang_var();
}
extern "C" {
    pub fn ex_language(eap: *mut exarg_T);
}
extern "C" {
    pub fn free_locales();
}
extern "C" {
    pub fn get_lang_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_locales(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn do_exmode(improved: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_cmdline_cmd(cmd: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_cmdline(
        cmdline: *mut char_u,
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getline_equal(
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getline_cookie(
        fgetline: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ) -> *mut char_u,
        >,
        cookie: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn parse_command_modifiers(
        eap: *mut exarg_T,
        errormsg: *mut *mut ::std::os::raw::c_char,
        skip_only: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_cmd_address(
        eap: *mut exarg_T,
        errormsg: *mut *mut ::std::os::raw::c_char,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn checkforcmd(
        pp: *mut *mut char_u,
        cmd: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modifier_len(cmd: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_exists(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_one_cmd_context(xp: *mut expand_T, buff: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn skip_range(cmd: *mut char_u, ctx: *mut ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn ex_ni(eap: *mut exarg_T);
}
extern "C" {
    pub fn expand_filename(
        eap: *mut exarg_T,
        cmdlinep: *mut *mut char_u,
        errormsgp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn separate_nextcmd(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_bad_opt(p: *mut char_u, eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ends_excmd(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_nextcmd(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn check_nextcmd(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_command_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn not_exiting();
}
extern "C" {
    pub fn tabpage_close(forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tabpage_close_other(tp: *mut tabpage_T, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_all(eap: *mut exarg_T);
}
extern "C" {
    pub fn handle_drop(
        filec: ::std::os::raw::c_int,
        filev: *mut *mut char_u,
        split: ::std::os::raw::c_int,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        cookie: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn handle_any_postponed_drop();
}
extern "C" {
    pub fn alist_clear(al: *mut alist_T);
}
extern "C" {
    pub fn alist_init(al: *mut alist_T);
}
extern "C" {
    pub fn alist_unlink(al: *mut alist_T);
}
extern "C" {
    pub fn alist_new();
}
extern "C" {
    pub fn alist_expand(fnum_list: *mut ::std::os::raw::c_int, fnum_len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alist_set(
        al: *mut alist_T,
        count: ::std::os::raw::c_int,
        files: *mut *mut char_u,
        use_curbuf: ::std::os::raw::c_int,
        fnum_list: *mut ::std::os::raw::c_int,
        fnum_len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn alist_add(al: *mut alist_T, fname: *mut char_u, set_fnum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alist_slash_adjust();
}
extern "C" {
    pub fn ex_splitview(eap: *mut exarg_T);
}
extern "C" {
    pub fn tabpage_new();
}
extern "C" {
    pub fn do_exedit(eap: *mut exarg_T, old_curwin: *mut win_T);
}
extern "C" {
    pub fn free_cd_dir();
}
extern "C" {
    pub fn post_chdir(cdscope: cdscope_T);
}
extern "C" {
    pub fn changedir_func(
        new_dir: *mut char_u,
        forceit: ::std::os::raw::c_int,
        cdscope: cdscope_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_cd(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_sleep(msec: ::std::os::raw::c_long);
}
extern "C" {
    pub fn ex_may_print(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_redraw(eap: *mut exarg_T);
}
extern "C" {
    pub fn vim_mkdir_emsg(name: *mut char_u, prot: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_exfile(
        fname: *mut char_u,
        forceit: ::std::os::raw::c_int,
        mode: *mut ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn update_topline_cursor();
}
extern "C" {
    pub fn save_current_state(sst: *mut save_state_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_current_state(sst: *mut save_state_T);
}
extern "C" {
    pub fn ex_normal(eap: *mut exarg_T);
}
extern "C" {
    pub fn exec_normal(
        was_typed: ::std::os::raw::c_int,
        use_vpeekc: ::std::os::raw::c_int,
        may_use_terminal_loop: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn find_cmdline_var(
        src: *mut char_u,
        usedlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eval_vars(
        src: *mut char_u,
        srcstart: *mut char_u,
        usedlen: *mut ::std::os::raw::c_int,
        lnump: *mut linenr_T,
        errormsg: *mut *mut ::std::os::raw::c_char,
        escaped: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn expand_sfile(arg: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn put_eol(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_line(fd: *mut FILE, s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dialog_msg(buff: *mut char_u, format: *mut ::std::os::raw::c_char, fname: *mut char_u);
}
extern "C" {
    pub fn get_behave_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_messages_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_mapclear_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_no_hlsearch(flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn is_loclist_cmd(cmdidx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_pressedreturn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_pressedreturn(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn aborting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn update_force_abort();
}
extern "C" {
    pub fn should_abort(retcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aborted_in_try() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cause_errthrow(
        mesg: *mut char_u,
        severe: ::std::os::raw::c_int,
        ignore: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_global_msglist();
}
extern "C" {
    pub fn do_errthrow(cstack: *mut condstack, cmdname: *mut char_u);
}
extern "C" {
    pub fn do_intthrow(cstack: *mut condstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_exception_string(
        value: *mut ::std::os::raw::c_void,
        type_: except_type_T,
        cmdname: *mut char_u,
        should_free: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn discard_current_exception();
}
extern "C" {
    pub fn report_make_pending(pending: ::std::os::raw::c_int, value: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn report_resume_pending(
        pending: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn report_discard_pending(
        pending: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ex_if(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_endif(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_else(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_while(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_continue(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_break(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_endwhile(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_throw(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_throw(cstack: *mut condstack);
}
extern "C" {
    pub fn ex_try(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_catch(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_finally(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_endtry(eap: *mut exarg_T);
}
extern "C" {
    pub fn enter_cleanup(csp: *mut cleanup_T);
}
extern "C" {
    pub fn leave_cleanup(csp: *mut cleanup_T);
}
extern "C" {
    pub fn cleanup_conditionals(
        cstack: *mut condstack,
        searched_cond: ::std::os::raw::c_int,
        inclusive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind_conditionals(
        cstack: *mut condstack,
        idx: ::std::os::raw::c_int,
        cond_type: ::std::os::raw::c_int,
        cond_level: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ex_endfunction(eap: *mut exarg_T);
}
extern "C" {
    pub fn has_loop_cmd(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn state_cmdline_initialize(
        c: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        indent: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_cmdline_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_cmdline_cleanup(context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cmdline_init();
}
extern "C" {
    pub fn getcmdline(
        firstc: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn getcmdline_prompt(
        firstc: ::std::os::raw::c_int,
        prompt: *mut char_u,
        attr: ::std::os::raw::c_int,
        xp_context: ::std::os::raw::c_int,
        xp_arg: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn text_locked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn text_locked_msg();
}
extern "C" {
    pub fn get_text_locked_msg() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curbuf_locked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn allbuf_locked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getexline(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn getexmodeline(
        promptc: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn cmdline_overstrike() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_at_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_getvcol_cursor() -> colnr_T;
}
extern "C" {
    pub fn free_cmdline_buf();
}
extern "C" {
    pub fn putcmdline(c: ::std::os::raw::c_int, shift: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unputcmdline();
}
extern "C" {
    pub fn put_on_cmdline(
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
        redraw: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_paste_str(s: *mut char_u, literally: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redrawcmdline();
}
extern "C" {
    pub fn redrawcmdline_ex(do_compute_cmdrow: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redrawcmd();
}
extern "C" {
    pub fn compute_cmdrow();
}
extern "C" {
    pub fn gotocmdline(clr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ExpandOne(
        xp: *mut expand_T,
        str_: *mut char_u,
        orig: *mut char_u,
        options: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ExpandInit(xp: *mut expand_T);
}
extern "C" {
    pub fn ExpandCleanup(xp: *mut expand_T);
}
extern "C" {
    pub fn ExpandEscape(
        xp: *mut expand_T,
        str_: *mut char_u,
        numfiles: ::std::os::raw::c_int,
        files: *mut *mut char_u,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vim_strsave_fnameescape(fname: *mut char_u, shell: ::std::os::raw::c_int)
        -> *mut char_u;
}
extern "C" {
    pub fn tilde_replace(
        orig_pat: *mut char_u,
        num_files: ::std::os::raw::c_int,
        files: *mut *mut char_u,
    );
}
extern "C" {
    pub fn sm_gettail(s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn addstar(
        fname: *mut char_u,
        len: ::std::os::raw::c_int,
        context: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn set_cmd_context(
        xp: *mut expand_T,
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        use_ccline: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn expand_cmdline(
        xp: *mut expand_T,
        str_: *mut char_u,
        col: ::std::os::raw::c_int,
        matchcount: *mut ::std::os::raw::c_int,
        matches: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ExpandGeneric(
        xp: *mut expand_T,
        regmatch: *mut regmatch_T,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut expand_T, arg2: ::std::os::raw::c_int) -> *mut char_u,
        >,
        escaped: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn globpath(
        path: *mut char_u,
        file: *mut char_u,
        ga: *mut garray_T,
        expand_options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn init_history();
}
extern "C" {
    pub fn get_histtype(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_to_history(
        histype: ::std::os::raw::c_int,
        new_entry: *mut char_u,
        in_map: ::std::os::raw::c_int,
        sep: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_history_idx(histype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_history_entry(
        histype: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn clr_history(histype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_history_entry(
        histype: ::std::os::raw::c_int,
        str_: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_history_idx(
        histype: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_cmdline_str() -> *mut char_u;
}
extern "C" {
    pub fn get_cmdline_pos() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_cmdline_pos(pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_cmdline_type() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_list_range(
        str_: *mut *mut char_u,
        num1: *mut ::std::os::raw::c_int,
        num2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_history(eap: *mut exarg_T);
}
extern "C" {
    pub fn prepare_viminfo_history(asklen: ::std::os::raw::c_int, writing: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_viminfo_history(
        virp: *mut vir_T,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_viminfo_history(values: *mut garray_T, writing: ::std::os::raw::c_int);
}
extern "C" {
    pub fn finish_viminfo_history(virp: *mut vir_T);
}
extern "C" {
    pub fn write_viminfo_history(fp: *mut FILE, merge: ::std::os::raw::c_int);
}
extern "C" {
    pub fn script_get(eap: *mut exarg_T, cmd: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn filemess(
        buf: *mut buf_T,
        name: *mut char_u,
        s: *mut char_u,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn readfile(
        fname: *mut char_u,
        sfname: *mut char_u,
        from: linenr_T,
        lines_to_skip: linenr_T,
        lines_to_read: linenr_T,
        eap: *mut exarg_T,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_dev_fd_file(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prep_exarg(eap: *mut exarg_T, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_file_options(set_options: ::std::os::raw::c_int, eap: *mut exarg_T);
}
extern "C" {
    pub fn set_forced_fenc(eap: *mut exarg_T);
}
extern "C" {
    pub fn check_file_readonly(
        fname: *mut char_u,
        perm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_write(
        buf: *mut buf_T,
        fname: *mut char_u,
        sfname: *mut char_u,
        start: linenr_T,
        end: linenr_T,
        eap: *mut exarg_T,
        append: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        reset_changed: ::std::os::raw::c_int,
        filtering: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_fsync(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_add_fname(buf: *mut buf_T, fname: *mut char_u);
}
extern "C" {
    pub fn msg_add_lines(
        insert_space: ::std::os::raw::c_int,
        lnum: ::std::os::raw::c_long,
        nchars: off_T,
    );
}
extern "C" {
    pub fn shorten_fname1(full_path: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn shorten_fname(full_path: *mut char_u, dir_name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn shorten_buf_fname(buf: *mut buf_T, dirname: *mut char_u, force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn shorten_fnames(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn shorten_filenames(fnames: *mut *mut char_u, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn modname(
        fname: *mut char_u,
        ext: *mut char_u,
        prepend_dot: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn buf_modname(
        shortname: ::std::os::raw::c_int,
        fname: *mut char_u,
        ext: *mut char_u,
        prepend_dot: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_fgets(
        buf: *mut char_u,
        size: ::std::os::raw::c_int,
        fp: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_rename(from: *mut char_u, to: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_timestamps(focus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_check_timestamp(
        buf: *mut buf_T,
        focus: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_reload(buf: *mut buf_T, orig_mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buf_store_time(buf: *mut buf_T, st: *mut stat_T, fname: *mut char_u);
}
extern "C" {
    pub fn write_lnum_adjust(offset: linenr_T);
}
extern "C" {
    pub fn readdir_core(
        gap: *mut garray_T,
        path: *mut char_u,
        context: *mut ::std::os::raw::c_void,
        checkitem: ::std::option::Option<
            unsafe extern "C" fn(
                context: *mut ::std::os::raw::c_void,
                name: *mut char_u,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delete_recursive(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_deltempdir();
}
extern "C" {
    pub fn vim_tempname(
        extra_char: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn forward_slash(fname: *mut char_u);
}
extern "C" {
    pub fn match_file_pat(
        pattern: *mut char_u,
        prog: *mut *mut regprog_T,
        fname: *mut char_u,
        sfname: *mut char_u,
        tail: *mut char_u,
        allow_dirs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_file_list(
        list: *mut char_u,
        sfname: *mut char_u,
        ffname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_pat_to_reg_pat(
        pat: *mut char_u,
        pat_end: *mut char_u,
        allow_dirs: *mut ::std::os::raw::c_char,
        no_bslash: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn read_eintr(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        bufsize: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn write_eintr(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        bufsize: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vim_findfile_init(
        path: *mut char_u,
        filename: *mut char_u,
        stopdirs: *mut char_u,
        level: ::std::os::raw::c_int,
        free_visited: ::std::os::raw::c_int,
        find_what: ::std::os::raw::c_int,
        search_ctx_arg: *mut ::std::os::raw::c_void,
        tagfile: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vim_findfile_stopdir(buf: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_findfile_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vim_findfile(search_ctx_arg: *mut ::std::os::raw::c_void) -> *mut char_u;
}
extern "C" {
    pub fn vim_findfile_free_visited(search_ctx_arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn find_file_in_path(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        first: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn free_findfile();
}
extern "C" {
    pub fn find_directory_in_path(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn find_file_in_path_option(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        first: ::std::os::raw::c_int,
        path_option: *mut char_u,
        find_what: ::std::os::raw::c_int,
        rel_fname: *mut char_u,
        suffixes: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn grab_file_name(count: ::std::os::raw::c_long, file_lnum: *mut linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn file_name_at_cursor(
        options: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        file_lnum: *mut linenr_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn file_name_in_line(
        line: *mut char_u,
        col: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        rel_fname: *mut char_u,
        file_lnum: *mut linenr_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn find_file_name_in_path(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        rel_fname: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_ispathlistsep(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uniquefy_paths(gap: *mut garray_T, pattern: *mut char_u);
}
extern "C" {
    pub fn expand_in_path(
        gap: *mut garray_T,
        pattern: *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simplify_filename(filename: *mut char_u);
}
extern "C" {
    pub fn copyFoldingState(wp_from: *mut win_T, wp_to: *mut win_T);
}
extern "C" {
    pub fn hasAnyFolding(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hasFolding(
        lnum: linenr_T,
        firstp: *mut linenr_T,
        lastp: *mut linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hasFoldingWin(
        win: *mut win_T,
        lnum: linenr_T,
        firstp: *mut linenr_T,
        lastp: *mut linenr_T,
        cache: ::std::os::raw::c_int,
        infop: *mut foldinfo_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldLevel(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lineFolded(win: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldedCount(
        win: *mut win_T,
        lnum: linenr_T,
        infop: *mut foldinfo_T,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn foldmethodIsManual(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsIndent(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsExpr(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsMarker(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsSyntax(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldmethodIsDiff(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closeFold(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn closeFoldRecurse(lnum: linenr_T);
}
extern "C" {
    pub fn opFoldRange(
        first: linenr_T,
        last: linenr_T,
        opening: ::std::os::raw::c_int,
        recurse: ::std::os::raw::c_int,
        had_visual: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn openFold(lnum: linenr_T, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn openFoldRecurse(lnum: linenr_T);
}
extern "C" {
    pub fn foldOpenCursor();
}
extern "C" {
    pub fn newFoldLevel();
}
extern "C" {
    pub fn foldCheckClose();
}
extern "C" {
    pub fn foldManualAllowed(create: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldCreate(start: linenr_T, end: linenr_T);
}
extern "C" {
    pub fn deleteFold(
        start: linenr_T,
        end: linenr_T,
        recursive: ::std::os::raw::c_int,
        had_visual: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clearFolding(win: *mut win_T);
}
extern "C" {
    pub fn foldUpdate(wp: *mut win_T, top: linenr_T, bot: linenr_T);
}
extern "C" {
    pub fn foldUpdateAll(win: *mut win_T);
}
extern "C" {
    pub fn foldMoveTo(
        updown: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldInitWin(new_win: *mut win_T);
}
extern "C" {
    pub fn find_wl_entry(win: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn foldAdjustVisual();
}
extern "C" {
    pub fn foldAdjustCursor();
}
extern "C" {
    pub fn cloneFoldGrowArray(from: *mut garray_T, to: *mut garray_T);
}
extern "C" {
    pub fn deleteFoldRecurse(gap: *mut garray_T);
}
extern "C" {
    pub fn foldMarkAdjust(
        wp: *mut win_T,
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn getDeepestNesting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_foldtext(
        wp: *mut win_T,
        lnum: linenr_T,
        lnume: linenr_T,
        foldinfo: *mut foldinfo_T,
        buf: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn foldtext_cleanup(str_: *mut char_u);
}
extern "C" {
    pub fn foldMoveRange(gap: *mut garray_T, line1: linenr_T, line2: linenr_T, dest: linenr_T);
}
extern "C" {
    pub fn put_folds(fd: *mut FILE, wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_buff(buf: *mut buffheader_T);
}
extern "C" {
    pub fn get_recorded() -> *mut char_u;
}
extern "C" {
    pub fn get_inserted() -> *mut char_u;
}
extern "C" {
    pub fn stuff_empty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readbuf1_empty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead_noflush(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn flush_buffers(flush_typeahead: flush_buffers_T);
}
extern "C" {
    pub fn ResetRedobuff();
}
extern "C" {
    pub fn CancelRedo();
}
extern "C" {
    pub fn saveRedobuff(save_redo: *mut save_redo_T);
}
extern "C" {
    pub fn restoreRedobuff(save_redo: *mut save_redo_T);
}
extern "C" {
    pub fn AppendToRedobuff(s: *mut char_u);
}
extern "C" {
    pub fn AppendToRedobuffLit(str_: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AppendCharToRedobuff(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AppendNumberToRedobuff(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn stuffReadbuff(s: *mut char_u);
}
extern "C" {
    pub fn stuffRedoReadbuff(s: *mut char_u);
}
extern "C" {
    pub fn stuffReadbuffLen(s: *mut char_u, len: ::std::os::raw::c_long);
}
extern "C" {
    pub fn stuffReadbuffSpec(s: *mut char_u);
}
extern "C" {
    pub fn stuffcharReadbuff(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn stuffnumReadbuff(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn start_redo(
        count: ::std::os::raw::c_long,
        old_redo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_redo_ins() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stop_redo_ins();
}
extern "C" {
    pub fn ins_typebuf(
        str_: *mut char_u,
        noremap: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_int,
        nottyped: ::std::os::raw::c_int,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ins_char_typebuf(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn typebuf_changed(tb_change_cnt: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typebuf_typed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typebuf_maplen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_typebuf(len: ::std::os::raw::c_int, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alloc_typebuf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_typebuf();
}
extern "C" {
    pub fn save_typebuf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn save_typeahead(tp: *mut tasave_T);
}
extern "C" {
    pub fn restore_typeahead(tp: *mut tasave_T);
}
extern "C" {
    pub fn openscript(name: *mut char_u, directly: ::std::os::raw::c_int);
}
extern "C" {
    pub fn close_all_scripts();
}
extern "C" {
    pub fn using_script() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn before_blocking();
}
extern "C" {
    pub fn updatescript(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vgetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safe_vgetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plain_vgetc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpeekc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpeekc_nomap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpeekc_any() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn char_avail() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vungetc(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fix_input_buffer(buf: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn input_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_map(
        maptype: ::std::os::raw::c_int,
        arg: *mut char_u,
        mode: ::std::os::raw::c_int,
        abbrev: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_map_mode(
        cmdp: *mut *mut char_u,
        forceit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn map_clear(
        cmdp: *mut char_u,
        arg: *mut char_u,
        forceit: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn map_clear_int(
        buf: *mut buf_T,
        mode: ::std::os::raw::c_int,
        local: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn map_mode_to_chars(mode: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn map_to_exists(
        str_: *mut char_u,
        modechars: *mut char_u,
        abbr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn map_to_exists_mode(
        rhs: *mut char_u,
        mode: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_context_in_map_cmd(
        xp: *mut expand_T,
        cmd: *mut char_u,
        arg: *mut char_u,
        forceit: ::std::os::raw::c_int,
        isabbrev: ::std::os::raw::c_int,
        isunmap: ::std::os::raw::c_int,
        cmdidx: cmdidx_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ExpandMappings(
        regmatch: *mut regmatch_T,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_abbr(
        c: ::std::os::raw::c_int,
        ptr: *mut char_u,
        col: ::std::os::raw::c_int,
        mincol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strsave_escape_csi(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_unescape_csi(p: *mut char_u);
}
extern "C" {
    pub fn makemap(fd: *mut FILE, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_escstr(
        fd: *mut FILE,
        strstart: *mut char_u,
        what: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_map_keycodes();
}
extern "C" {
    pub fn check_map(
        keys: *mut char_u,
        mode: ::std::os::raw::c_int,
        exact: ::std::os::raw::c_int,
        ign_mod: ::std::os::raw::c_int,
        abbr: ::std::os::raw::c_int,
        mp_ptr: *mut *mut mapblock_T,
        local_ptr: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn init_mappings();
}
extern "C" {
    pub fn add_map(map: *mut char_u, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hash_init(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_clear(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_clear_all(ht: *mut hashtab_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hash_find(ht: *mut hashtab_T, key: *mut char_u) -> *mut hashitem_T;
}
extern "C" {
    pub fn hash_lookup(ht: *mut hashtab_T, key: *mut char_u, hash: hash_T) -> *mut hashitem_T;
}
extern "C" {
    pub fn hash_debug_results();
}
extern "C" {
    pub fn hash_add(ht: *mut hashtab_T, key: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_add_item(
        ht: *mut hashtab_T,
        hi: *mut hashitem_T,
        key: *mut char_u,
        hash: hash_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_remove(ht: *mut hashtab_T, hi: *mut hashitem_T);
}
extern "C" {
    pub fn hash_lock(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_unlock(ht: *mut hashtab_T);
}
extern "C" {
    pub fn hash_hash(key: *mut char_u) -> hash_T;
}
extern "C" {
    pub fn cin_is_cinword(line: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_start_comment(ind_maxcomment: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn cindent_on() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cin_islabel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cin_iscase(s: *mut char_u, strict: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cin_isscopedecl(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_cino(buf: *mut buf_T);
}
extern "C" {
    pub fn get_c_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_expr_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_cinkeys(
        keytyped: ::std::os::raw::c_int,
        when: ::std::os::raw::c_int,
        line_is_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_lisp_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_c_expr_indent();
}
extern "C" {
    pub fn fixthisline(
        get_the_indent: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
extern "C" {
    pub fn fix_indent();
}
extern "C" {
    pub fn json_encode(val: *mut typval_T, options: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn json_encode_nr_expr(
        nr: ::std::os::raw::c_int,
        val: *mut typval_T,
        options: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn json_decode_all(
        reader: *mut js_read_T,
        res: *mut typval_T,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_decode(
        reader: *mut js_read_T,
        res: *mut typval_T,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_find_end(
        reader: *mut js_read_T,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_add_watch(l: *mut list_T, lw: *mut listwatch_T);
}
extern "C" {
    pub fn list_rem_watch(l: *mut list_T, lwrem: *mut listwatch_T);
}
extern "C" {
    pub fn list_fix_watch(l: *mut list_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_alloc() -> *mut list_T;
}
extern "C" {
    pub fn list_alloc_id(id: alloc_id_T) -> *mut list_T;
}
extern "C" {
    pub fn rettv_list_alloc(rettv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_list_alloc_id(rettv: *mut typval_T, id: alloc_id_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rettv_list_set(rettv: *mut typval_T, l: *mut list_T);
}
extern "C" {
    pub fn list_unref(l: *mut list_T);
}
extern "C" {
    pub fn list_free_nonref(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_free_items(copyID: ::std::os::raw::c_int);
}
extern "C" {
    pub fn list_free(l: *mut list_T);
}
extern "C" {
    pub fn listitem_alloc() -> *mut listitem_T;
}
extern "C" {
    pub fn listitem_free(item: *mut listitem_T);
}
extern "C" {
    pub fn listitem_remove(l: *mut list_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_len(l: *mut list_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn list_equal(
        l1: *mut list_T,
        l2: *mut list_T,
        ic: ::std::os::raw::c_int,
        recursive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_find(l: *mut list_T, n: ::std::os::raw::c_long) -> *mut listitem_T;
}
extern "C" {
    pub fn list_find_nr(
        l: *mut list_T,
        idx: ::std::os::raw::c_long,
        errorp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn list_find_str(l: *mut list_T, idx: ::std::os::raw::c_long) -> *mut char_u;
}
extern "C" {
    pub fn list_idx_of_item(l: *mut list_T, item: *mut listitem_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn list_append(l: *mut list_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_append_tv(l: *mut list_T, tv: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_dict(list: *mut list_T, dict: *mut dict_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_list(list1: *mut list_T, list2: *mut list_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_string(
        l: *mut list_T,
        str_: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_append_number(l: *mut list_T, n: varnumber_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_insert_tv(
        l: *mut list_T,
        tv: *mut typval_T,
        item: *mut listitem_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_insert(l: *mut list_T, ni: *mut listitem_T, item: *mut listitem_T);
}
extern "C" {
    pub fn list_extend(
        l1: *mut list_T,
        l2: *mut list_T,
        bef: *mut listitem_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_list_concat(
        l1: *mut list_T,
        l2: *mut list_T,
        tv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_copy(
        orig: *mut list_T,
        deep: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> *mut list_T;
}
extern "C" {
    pub fn vimlist_remove(l: *mut list_T, item: *mut listitem_T, item2: *mut listitem_T);
}
extern "C" {
    pub fn list2string(
        tv: *mut typval_T,
        copyID: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn list_join(
        gap: *mut garray_T,
        l: *mut list_T,
        sep: *mut char_u,
        echo_style: ::std::os::raw::c_int,
        restore_copyID: ::std::os::raw::c_int,
        copyID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_list_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_list(
        fd: *mut FILE,
        list: *mut list_T,
        binary: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_static_list(sl: *mut staticList10_T);
}
extern "C" {
    pub fn vim_main2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn common_init(paramp: *mut mparm_T);
}
extern "C" {
    pub fn is_not_a_term() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn main_loop(cmdwin: ::std::os::raw::c_int, noexmode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getout_preserve_modified(exitval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getout(exitval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn process_env(
        env: *mut char_u,
        is_viminit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mainerr_arg_missing(str_: *mut char_u);
}
extern "C" {
    pub fn time_push(tv_rel: *mut ::std::os::raw::c_void, tv_start: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn time_pop(tp: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn time_msg(mesg: *mut ::std::os::raw::c_char, tv_start: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn server_to_input_buf(str_: *mut char_u);
}
extern "C" {
    pub fn eval_client_expr_to_string(expr: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn sendToLocalVim(
        cmd: *mut char_u,
        asExpr: ::std::os::raw::c_int,
        result: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serverConvert(
        client_enc: *mut char_u,
        data: *mut char_u,
        tofree: *mut *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn setmark(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmark_pos(
        c: ::std::os::raw::c_int,
        pos: *mut pos_T,
        fnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpcmark();
}
extern "C" {
    pub fn checkpcmark();
}
extern "C" {
    pub fn movemark(count: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn movechangelist(count: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn getmark_buf(
        buf: *mut buf_T,
        c: ::std::os::raw::c_int,
        changefile: ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn getmark(c: ::std::os::raw::c_int, changefile: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn getmark_buf_fnum(
        buf: *mut buf_T,
        c: ::std::os::raw::c_int,
        changefile: ::std::os::raw::c_int,
        fnum: *mut ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn getnextmark(
        startpos: *mut pos_T,
        dir: ::std::os::raw::c_int,
        begin_line: ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn fname2fnum(fm: *mut xfmark_T);
}
extern "C" {
    pub fn fmarks_check_names(buf: *mut buf_T);
}
extern "C" {
    pub fn check_mark(pos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrallmarks(buf: *mut buf_T);
}
extern "C" {
    pub fn fm_getname(fmark: *mut fmark_T, lead_len: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn do_marks(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_delmarks(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_jumps(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_clearjumps(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_changes(eap: *mut exarg_T);
}
extern "C" {
    pub fn mark_adjust(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn mark_adjust_nofold(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn mark_col_adjust(
        lnum: linenr_T,
        mincol: colnr_T,
        lnum_amount: ::std::os::raw::c_long,
        col_amount: ::std::os::raw::c_long,
        spaces_removed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cleanup_jumplist(wp: *mut win_T, loadfiles: ::std::os::raw::c_int);
}
extern "C" {
    pub fn copy_jumplist(from: *mut win_T, to: *mut win_T);
}
extern "C" {
    pub fn free_jumplist(wp: *mut win_T);
}
extern "C" {
    pub fn set_last_cursor(win: *mut win_T);
}
extern "C" {
    pub fn free_all_marks();
}
extern "C" {
    pub fn read_viminfo_filemark(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prepare_viminfo_marks();
}
extern "C" {
    pub fn finish_viminfo_marks();
}
extern "C" {
    pub fn handle_viminfo_mark(values: *mut garray_T, force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn write_viminfo_filemarks(fp: *mut FILE);
}
extern "C" {
    pub fn removable(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_marks(fp_out: *mut FILE, buflist: *mut garray_T);
}
extern "C" {
    pub fn copy_viminfo_marks(
        virp: *mut vir_T,
        fp_out: *mut FILE,
        buflist: *mut garray_T,
        eof: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mf_open(fname: *mut char_u, flags: ::std::os::raw::c_int) -> *mut memfile_T;
}
extern "C" {
    pub fn mf_open_file(mfp: *mut memfile_T, fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mf_close(mfp: *mut memfile_T, del_file: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mf_close_file(buf: *mut buf_T, getlines: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mf_new_page_size(mfp: *mut memfile_T, new_size: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn mf_new(
        mfp: *mut memfile_T,
        negative: ::std::os::raw::c_int,
        page_count: ::std::os::raw::c_int,
    ) -> *mut bhdr_T;
}
extern "C" {
    pub fn mf_get(
        mfp: *mut memfile_T,
        nr: blocknr_T,
        page_count: ::std::os::raw::c_int,
    ) -> *mut bhdr_T;
}
extern "C" {
    pub fn mf_put(
        mfp: *mut memfile_T,
        hp: *mut bhdr_T,
        dirty: ::std::os::raw::c_int,
        infile: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mf_free(mfp: *mut memfile_T, hp: *mut bhdr_T);
}
extern "C" {
    pub fn mf_sync(mfp: *mut memfile_T, flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mf_set_dirty(mfp: *mut memfile_T);
}
extern "C" {
    pub fn mf_release_all() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mf_trans_del(mfp: *mut memfile_T, old_nr: blocknr_T) -> blocknr_T;
}
extern "C" {
    pub fn mf_set_ffname(mfp: *mut memfile_T);
}
extern "C" {
    pub fn mf_fullname(mfp: *mut memfile_T);
}
extern "C" {
    pub fn mf_need_trans(mfp: *mut memfile_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_open(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_setname(buf: *mut buf_T);
}
extern "C" {
    pub fn ml_open_files();
}
extern "C" {
    pub fn ml_open_file(buf: *mut buf_T);
}
extern "C" {
    pub fn check_need_swap(newfile: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_close(buf: *mut buf_T, del_file: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_close_all(del_file: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_close_notmod();
}
extern "C" {
    pub fn ml_timestamp(buf: *mut buf_T);
}
extern "C" {
    pub fn ml_recover(checkext: ::std::os::raw::c_int);
}
extern "C" {
    pub fn recover_names(
        fname: *mut char_u,
        list: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
        fname_out: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_percent_swname(dir: *mut char_u, name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_b0_dict(fname: *mut char_u, d: *mut dict_T);
}
extern "C" {
    pub fn get_ctime(
        thetime: time_t,
        add_newline: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ml_sync_all(check_file: ::std::os::raw::c_int, check_char: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_preserve(buf: *mut buf_T, message: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ml_get(lnum: linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn ml_get_pos(pos: *mut pos_T) -> *mut char_u;
}
extern "C" {
    pub fn ml_get_curline() -> *mut char_u;
}
extern "C" {
    pub fn ml_get_cursor() -> *mut char_u;
}
extern "C" {
    pub fn ml_get_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        will_change: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ml_line_alloced() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_append(
        lnum: linenr_T,
        line: *mut char_u,
        len: colnr_T,
        newfile: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_append_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        line: *mut char_u,
        len: colnr_T,
        newfile: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_replace(
        lnum: linenr_T,
        line: *mut char_u,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_replace_len(
        lnum: linenr_T,
        line_arg: *mut char_u,
        len_arg: colnr_T,
        has_props: ::std::os::raw::c_int,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_delete(lnum: linenr_T, message: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_delete_buf(
        buf: *mut buf_T,
        lnum: linenr_T,
        message: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ml_setmarked(lnum: linenr_T);
}
extern "C" {
    pub fn ml_firstmarked() -> linenr_T;
}
extern "C" {
    pub fn ml_clearmarked();
}
extern "C" {
    pub fn resolve_symlink(fname: *mut char_u, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn makeswapname(
        fname: *mut char_u,
        ffname: *mut char_u,
        buf: *mut buf_T,
        dir_name: *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_file_in_dir(fname: *mut char_u, dname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn ml_setflags(buf: *mut buf_T);
}
extern "C" {
    pub fn ml_find_line_or_offset(
        buf: *mut buf_T,
        lnum: linenr_T,
        offp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn goto_byte(cnt: ::std::os::raw::c_long);
}
extern "C" {
    pub fn arabic_maycombine(two: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arabic_combine(
        one: ::std::os::raw::c_int,
        two: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arabic_shape(
        c: ::std::os::raw::c_int,
        ccp: *mut ::std::os::raw::c_int,
        c1p: *mut ::std::os::raw::c_int,
        prev_c: ::std::os::raw::c_int,
        prev_c1: ::std::os::raw::c_int,
        next_c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smsg(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smsg_attr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smsg_attr_keep(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semsg(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siemsg(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vim_snprintf_add(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_vsnprintf(
        str_: *mut ::std::os::raw::c_char,
        str_m: usize,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_vsnprintf_typval(
        str_: *mut ::std::os::raw::c_char,
        str_m: usize,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
        tvs: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn verb_msg(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_attr(
        s: *mut ::std::os::raw::c_char,
        attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_attr_keep(
        s: *mut ::std::os::raw::c_char,
        attr: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_strtrunc(s: *mut char_u, force: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn trunc_string(
        s: *mut char_u,
        buf: *mut char_u,
        room_in: ::std::os::raw::c_int,
        buflen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn reset_last_sourcing();
}
extern "C" {
    pub fn msg_source(attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn emsg_not_now() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ignore_error_for_testing(error: *mut char_u);
}
extern "C" {
    pub fn do_perror(msg: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn emsg(s: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iemsg(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn internal_error(where_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn emsg_invreg(name: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_trunc_attr(
        s: *mut ::std::os::raw::c_char,
        force: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn msg_may_trunc(force: ::std::os::raw::c_int, s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_emsg_source() -> *mut char_u;
}
extern "C" {
    pub fn get_emsg_lnum() -> *mut char_u;
}
extern "C" {
    pub fn delete_first_msg() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_messages(eap: *mut exarg_T);
}
extern "C" {
    pub fn msg_end_prompt();
}
extern "C" {
    pub fn wait_return(redraw: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_keep_msg(s: *mut char_u, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_keep_msg_from_hist();
}
extern "C" {
    pub fn msg_start();
}
extern "C" {
    pub fn msg_starthere();
}
extern "C" {
    pub fn msg_putchar(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_putchar_attr(c: ::std::os::raw::c_int, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_outnum(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn msg_home_replace(fname: *mut char_u);
}
extern "C" {
    pub fn msg_home_replace_hl(fname: *mut char_u);
}
extern "C" {
    pub fn msg_outtrans(str_: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_outtrans_attr(
        str_: *mut char_u,
        attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_outtrans_len(str_: *mut char_u, len: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_outtrans_one(p: *mut char_u, attr: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn msg_outtrans_len_attr(
        msgstr: *mut char_u,
        len: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_make(arg: *mut char_u);
}
extern "C" {
    pub fn msg_outtrans_special(
        strstart: *mut char_u,
        from: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2special_save(str_: *mut char_u, is_lhs: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn str2special(sp: *mut *mut char_u, from: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn str2specialbuf(sp: *mut char_u, buf: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_prt_line(s: *mut char_u, list: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_puts(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn msg_puts_title(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn msg_outtrans_long_attr(longstr: *mut char_u, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_outtrans_long_len_attr(
        longstr: *mut char_u,
        len: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn msg_puts_attr(s: *mut ::std::os::raw::c_char, attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn message_filtered(msg: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_clear_sb_text();
}
extern "C" {
    pub fn sb_text_start_cmdline();
}
extern "C" {
    pub fn sb_text_end_cmdline();
}
extern "C" {
    pub fn clear_sb_text(all: ::std::os::raw::c_int);
}
extern "C" {
    pub fn show_sb_text();
}
extern "C" {
    pub fn msg_sb_eol();
}
extern "C" {
    pub fn msg_use_printf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_errmsg(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mch_msg(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn msg_moremsg(full: ::std::os::raw::c_int);
}
extern "C" {
    pub fn repeat_message();
}
extern "C" {
    pub fn msg_clr_eos();
}
extern "C" {
    pub fn msg_clr_eos_force();
}
extern "C" {
    pub fn msg_clr_cmdline();
}
extern "C" {
    pub fn msg_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msg_check();
}
extern "C" {
    pub fn redirecting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn verbose_enter();
}
extern "C" {
    pub fn verbose_leave();
}
extern "C" {
    pub fn verbose_enter_scroll();
}
extern "C" {
    pub fn verbose_leave_scroll();
}
extern "C" {
    pub fn verbose_stop();
}
extern "C" {
    pub fn verbose_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn give_warning(message: *mut char_u, hl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn give_warning2(message: *mut char_u, a1: *mut char_u, hl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msg_advance(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_dialog(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        buttons: *mut char_u,
        dfltbutton: ::std::os::raw::c_int,
        textfield: *mut char_u,
        ex_cmd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn display_confirm_msg();
}
extern "C" {
    pub fn vim_dialog_yesno(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_dialog_yesnocancel(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_dialog_yesnoallcancel(
        type_: ::std::os::raw::c_int,
        title: *mut char_u,
        message: *mut char_u,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_browse(
        flags: ::std::os::raw::c_int,
        title: *mut char_u,
        dflt: *mut char_u,
        ext: *mut char_u,
        initdir: *mut char_u,
        filter: *mut char_u,
        buf: *mut buf_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn msg2_create(priority: msgPriority_T) -> *mut msg_T;
}
extern "C" {
    pub fn msg2_get_contents(msg: *mut msg_T) -> *mut char_u;
}
extern "C" {
    pub fn msg2_set_title(title: *mut char_u, msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_put(s: *mut char_u, msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_send(msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_source(msg: *mut msg_T);
}
extern "C" {
    pub fn msg2_free(msg: *mut msg_T);
}
extern "C" {
    pub fn get_indent() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_lnum(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_buf(buf: *mut buf_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_str(
        ptr: *mut char_u,
        ts: ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_indent_str_vtab(
        ptr: *mut char_u,
        ts: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
        list: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_indent(
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_number_indent(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_breakindent_win(wp: *mut win_T, line: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_leader_len(
        line: *mut char_u,
        flags: *mut *mut char_u,
        backward: ::std::os::raw::c_int,
        include_space: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_last_leader_offset(
        line: *mut char_u,
        flags: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win(
        wp: *mut win_T,
        lnum: linenr_T,
        winheight: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_nofill(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win_nofill(
        wp: *mut win_T,
        lnum: linenr_T,
        winheight: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win_nofold(wp: *mut win_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_win_col(
        wp: *mut win_T,
        lnum: linenr_T,
        column: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plines_m_win(wp: *mut win_T, first: linenr_T, last: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gchar_pos(pos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gchar_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pchar_cursor(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn inindent(extra: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skip_to_option_part(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn check_status(buf: *mut buf_T);
}
extern "C" {
    pub fn ask_yesno(str_: *mut char_u, direct: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_mouse_key(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_keystroke() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_number(
        colon: ::std::os::raw::c_int,
        mouse_used: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prompt_for_number(mouse_used: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgmore(n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn beep_flush();
}
extern "C" {
    pub fn vim_beep(val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn init_homedir();
}
extern "C" {
    pub fn free_homedir();
}
extern "C" {
    pub fn free_users();
}
extern "C" {
    pub fn expand_env_save(src: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn expand_env_save_opt(src: *mut char_u, one: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn expand_env(src: *mut char_u, dst: *mut char_u, dstlen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn expand_env_esc(
        srcp: *mut char_u,
        dst: *mut char_u,
        dstlen: ::std::os::raw::c_int,
        esc: ::std::os::raw::c_int,
        one: ::std::os::raw::c_int,
        startstr: *mut char_u,
    );
}
extern "C" {
    pub fn vim_getenv(name: *mut char_u, mustfree: *mut ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_unsetenv(var: *mut char_u);
}
extern "C" {
    pub fn vim_setenv(name: *mut char_u, val: *mut char_u);
}
extern "C" {
    pub fn get_env_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_users(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn match_user(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn home_replace(
        buf: *mut buf_T,
        src: *mut char_u,
        dst: *mut char_u,
        dstlen: ::std::os::raw::c_int,
        one: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn home_replace_save(buf: *mut buf_T, src: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn fullpathcmp(
        s1: *mut char_u,
        s2: *mut char_u,
        checkname: ::std::os::raw::c_int,
        expandenv: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettail(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn gettail_sep(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn getnextcomp(fname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_past_head(path: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_ispathsep(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_ispathsep_nocolon(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shorten_dir(str_: *mut char_u);
}
extern "C" {
    pub fn dir_of_file_exists(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_fnamecmp(x: *mut char_u, y: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_fnamencmp(x: *mut char_u, y: *mut char_u, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn concat_fnames(
        fname1: *mut char_u,
        fname2: *mut char_u,
        sep: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn concat_str(str1: *mut char_u, str2: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn add_pathsep(p: *mut char_u);
}
extern "C" {
    pub fn FullName_save(fname: *mut char_u, force: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn prepare_to_exit();
}
extern "C" {
    pub fn preserve_exit();
}
extern "C" {
    pub fn vim_fexists(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn line_breakcheck();
}
extern "C" {
    pub fn fast_breakcheck();
}
extern "C" {
    pub fn expand_wildcards_eval(
        pat: *mut *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn expand_wildcards(
        num_pat: ::std::os::raw::c_int,
        pat: *mut *mut char_u,
        num_files: *mut ::std::os::raw::c_int,
        files: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_suffix(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unix_expandpath(
        gap: *mut garray_T,
        path: *mut char_u,
        wildoff: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        didstar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_duplicates(gap: *mut garray_T);
}
extern "C" {
    pub fn gen_expand_wildcards(
        num_pat: ::std::os::raw::c_int,
        pat: *mut *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addfile(gap: *mut garray_T, f: *mut char_u, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_cmd_output(
        cmd: *mut char_u,
        infile: *mut char_u,
        flags: ::std::os::raw::c_int,
        ret_len: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn FreeWild(count: ::std::os::raw::c_int, files: *mut *mut char_u);
}
extern "C" {
    pub fn goto_im() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_isolated_shell_name() -> *mut char_u;
}
extern "C" {
    pub fn path_is_url(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn path_with_url(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_isAbsName(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_FullName(
        fname: *mut char_u,
        buf: *mut char_u,
        len: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_active() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getviscol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn coladvance_force(wcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getviscol2(col: colnr_T, coladd: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn coladvance(wcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvpos(pos: *mut pos_T, wcol: colnr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inc_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inc(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn incl(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dec_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dec(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decl(lp: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_cursor_rel_lnum(wp: *mut win_T, lnum: linenr_T) -> linenr_T;
}
extern "C" {
    pub fn check_pos(buf: *mut buf_T, pos: *mut pos_T);
}
extern "C" {
    pub fn check_cursor_lnum();
}
extern "C" {
    pub fn check_cursor_col();
}
extern "C" {
    pub fn check_cursor_col_win(win: *mut win_T);
}
extern "C" {
    pub fn check_cursor();
}
extern "C" {
    pub fn adjust_cursor_col();
}
extern "C" {
    pub fn leftcol_changed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_mem_profile_dump();
}
extern "C" {
    pub fn alloc_does_fail(size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc_id(size: usize, id: alloc_id_T) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc_clear(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc_clear_id(size: usize, id: alloc_id_T) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lalloc_clear(size: usize, message: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lalloc(size: usize, message: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lalloc_id(
        size: usize,
        message: ::std::os::raw::c_int,
        id: alloc_id_T,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mem_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn do_outofmem_msg(size: usize);
}
extern "C" {
    pub fn free_all_mem();
}
extern "C" {
    pub fn vim_strsave(string: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_strnsave(string: *mut char_u, len: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_memsave(p: *mut char_u, len: usize) -> *mut char_u;
}
extern "C" {
    pub fn vim_strsave_escaped(string: *mut char_u, esc_chars: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_strsave_escaped_ext(
        string: *mut char_u,
        esc_chars: *mut char_u,
        cc: ::std::os::raw::c_int,
        bsl: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn csh_like_shell() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strsave_shellescape(
        string: *mut char_u,
        do_special: ::std::os::raw::c_int,
        do_newline: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_strsave_up(string: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vim_strnsave_up(string: *mut char_u, len: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_strup(p: *mut char_u);
}
extern "C" {
    pub fn strup_save(orig: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn strlow_save(orig: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn del_trailing_spaces(ptr: *mut char_u);
}
extern "C" {
    pub fn vim_strncpy(to: *mut char_u, from: *mut char_u, len: usize);
}
extern "C" {
    pub fn vim_strcat(to: *mut char_u, from: *mut char_u, tosize: usize);
}
extern "C" {
    pub fn copy_option_part(
        option: *mut *mut char_u,
        buf: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        sep_chars: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_free(x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vim_stricmp(
        s1: *mut ::std::os::raw::c_char,
        s2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strnicmp(
        s1: *mut ::std::os::raw::c_char,
        s2: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_strchr(string: *mut char_u, c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_strbyte(string: *mut char_u, c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_strrchr(string: *mut char_u, c: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_isspace(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ga_clear(gap: *mut garray_T);
}
extern "C" {
    pub fn ga_clear_strings(gap: *mut garray_T);
}
extern "C" {
    pub fn ga_init(gap: *mut garray_T);
}
extern "C" {
    pub fn ga_init2(
        gap: *mut garray_T,
        itemsize: ::std::os::raw::c_int,
        growsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ga_grow(gap: *mut garray_T, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ga_concat_strings(gap: *mut garray_T, sep: *mut ::std::os::raw::c_char) -> *mut char_u;
}
extern "C" {
    pub fn ga_add_string(gap: *mut garray_T, p: *mut char_u);
}
extern "C" {
    pub fn ga_concat(gap: *mut garray_T, s: *mut char_u);
}
extern "C" {
    pub fn ga_append(gap: *mut garray_T, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn append_ga_line(gap: *mut garray_T);
}
extern "C" {
    pub fn name_to_mod_mask(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn simplify_key(
        key: ::std::os::raw::c_int,
        modifiers: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_x_keys(key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_special_key_name(
        c: ::std::os::raw::c_int,
        modifiers: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn trans_special(
        srcp: *mut *mut char_u,
        dst: *mut char_u,
        keycode: ::std::os::raw::c_int,
        in_string: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn special_to_buf(
        key: ::std::os::raw::c_int,
        modifiers: ::std::os::raw::c_int,
        keycode: ::std::os::raw::c_int,
        dst: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_special_key(
        srcp: *mut *mut char_u,
        modp: *mut ::std::os::raw::c_int,
        keycode: ::std::os::raw::c_int,
        keep_x_key: ::std::os::raw::c_int,
        in_string: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extract_modifiers(
        key: ::std::os::raw::c_int,
        modp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_special_key_in_table(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_special_key_code(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_key_name(i: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_mouse_button(
        code: ::std::os::raw::c_int,
        is_click: *mut ::std::os::raw::c_int,
        is_drag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_pseudo_mouse_code(
        button: ::std::os::raw::c_int,
        is_click: ::std::os::raw::c_int,
        is_drag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_fileformat(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_fileformat_force(buf: *mut buf_T, eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_fileformat_buf(
        buf: *mut buf_T,
        t: ::std::os::raw::c_int,
        opt_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_fileformat(t: ::std::os::raw::c_int, opt_flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn default_fileformat() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_shell(cmd: *mut char_u, opt: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_real_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn after_pathsep(b: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn same_directory(f1: *mut char_u, f2: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_chdirfile(
        fname: *mut char_u,
        trigger_autocmd: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_stat(name: *const ::std::os::raw::c_char, stp: *mut stat_T)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_shape_opt(what: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_shape_idx(mouse: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn update_mouseshape(shape_idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vim_chdir(new_dir: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_user_name(buf: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sort_strings(files: *mut *mut char_u, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pathcmp(
        p: *const ::std::os::raw::c_char,
        q: *const ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filewritable(fname: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get2c(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get3c(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get4c(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get8ctime(fd: *mut FILE) -> time_T;
}
extern "C" {
    pub fn read_string(fd: *mut FILE, cnt: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn put_bytes(
        fd: *mut FILE,
        nr: long_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_time(fd: *mut FILE, the_time: time_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn time_to_bytes(the_time: time_T, buf: *mut char_u);
}
extern "C" {
    pub fn has_non_ascii(s: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_queued_messages();
}
extern "C" {
    pub fn mch_parse_cmd(
        cmd: *mut char_u,
        use_shcf: ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_argv_from_string(
        cmd: *mut char_u,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn build_argv_from_list(
        l: *mut list_T,
        argv: *mut *mut *mut ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_session_file(filename: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enc_canon_props(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_init() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bomb_size() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove_bom(s: *mut char_u);
}
extern "C" {
    pub fn mb_get_class(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_get_class_buf(p: *mut char_u, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_class(
        lead: ::std::os::raw::c_uint,
        trail: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_char2len(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_char2bytes(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2len(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2len_len(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_uint2cells(c: UINT32_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_char2cells(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_ptr2cells(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2cells_len(
        p: *mut char_u,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_char2cells(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_string2cells(p: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_off2cells(
        off: ::std::os::raw::c_uint,
        max_off: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_off2cells(
        off: ::std::os::raw::c_uint,
        max_off: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_off2cells(
        off: ::std::os::raw::c_uint,
        max_off: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn latin_ptr2char(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2char(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_ptr2char_adv(pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_cptr2char_adv(pp: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_composinglike(p1: *mut char_u, p2: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2char(p: *mut char_u, pcc: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2char_len(
        p: *mut char_u,
        pcc: *mut ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_char2bytes(off: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2len(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_byte2len(b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ptr2len_len(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2len(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utfc_ptr2len_len(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_char2len(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_char2bytes(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_iscomposing_uint(c: UINT32_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_iscomposing(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_printable(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_class(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_class_buf(c: ::std::os::raw::c_int, buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_ambiguous_width(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_fold(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_toupper(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_islower(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_tolower(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_isupper(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_strnicmp(s1: *mut char_u, s2: *mut char_u, nn: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_utf8();
}
extern "C" {
    pub fn latin_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_screen_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_head_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_copy_char(fp: *mut *mut char_u, tp: *mut *mut char_u);
}
extern "C" {
    pub fn mb_off_next(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_tail_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf_find_illegal();
}
extern "C" {
    pub fn utf_valid_string(s: *mut char_u, end: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbcs_screen_tail_off(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_adjust_cursor();
}
extern "C" {
    pub fn mb_adjustpos(buf: *mut buf_T, lp: *mut pos_T);
}
extern "C" {
    pub fn mb_prevptr(line: *mut char_u, p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn mb_charlen(str_: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_charlen_len(str_: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_unescape(pp: *mut *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn mb_lefthalve(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mb_fix_col(
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enc_skip(p: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn enc_canonize(enc: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn enc_locale_env(locale: *mut ::std::os::raw::c_char) -> *mut char_u;
}
extern "C" {
    pub fn enc_locale() -> *mut char_u;
}
extern "C" {
    pub fn encname2codepage(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn my_iconv_open(to: *mut char_u, from: *mut char_u) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn iconv_enabled(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconv_end();
}
extern "C" {
    pub fn im_set_active(active: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xim_set_focus(focus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn im_set_position(row: ::std::os::raw::c_int, col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xim_set_preedit();
}
extern "C" {
    pub fn im_get_feedback_attr(col: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xim_init();
}
extern "C" {
    pub fn im_shutdown();
}
extern "C" {
    pub fn im_xim_isvalid_imactivate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xim_reset();
}
extern "C" {
    pub fn xim_queue_key_press_event(
        event: *mut ::std::os::raw::c_int,
        down: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn im_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn preedit_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn im_is_preediting() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xim_set_status_area();
}
extern "C" {
    pub fn xim_get_status_area_height() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_setup(
        vcp: *mut vimconv_T,
        from: *mut char_u,
        to: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_setup_ext(
        vcp: *mut vimconv_T,
        from: *mut char_u,
        from_unicode_is_utf8: ::std::os::raw::c_int,
        to: *mut char_u,
        to_unicode_is_utf8: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_input(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn convert_input_safe(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
        restp: *mut *mut char_u,
        restlenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_convert(
        vcp: *mut vimconv_T,
        ptr: *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn string_convert_ext(
        vcp: *mut vimconv_T,
        ptr: *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
        unconvlenp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn reset_cursorline();
}
extern "C" {
    pub fn redraw_for_cursorline(wp: *mut win_T);
}
extern "C" {
    pub fn update_topline_redraw();
}
extern "C" {
    pub fn update_topline();
}
extern "C" {
    pub fn update_curswant();
}
extern "C" {
    pub fn check_cursor_moved(wp: *mut win_T);
}
extern "C" {
    pub fn changed_window_setting();
}
extern "C" {
    pub fn changed_window_setting_win(wp: *mut win_T);
}
extern "C" {
    pub fn set_topline(wp: *mut win_T, lnum: linenr_T);
}
extern "C" {
    pub fn changed_cline_bef_curs();
}
extern "C" {
    pub fn changed_cline_bef_curs_win(wp: *mut win_T);
}
extern "C" {
    pub fn changed_line_abv_curs();
}
extern "C" {
    pub fn changed_line_abv_curs_win(wp: *mut win_T);
}
extern "C" {
    pub fn validate_botline();
}
extern "C" {
    pub fn invalidate_botline();
}
extern "C" {
    pub fn invalidate_botline_win(wp: *mut win_T);
}
extern "C" {
    pub fn approximate_botline_win(wp: *mut win_T);
}
extern "C" {
    pub fn cursor_valid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn validate_cursor();
}
extern "C" {
    pub fn validate_cline_row();
}
extern "C" {
    pub fn validate_virtcol();
}
extern "C" {
    pub fn validate_virtcol_win(wp: *mut win_T);
}
extern "C" {
    pub fn validate_cursor_col();
}
extern "C" {
    pub fn win_col_off(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curwin_col_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_col_off2(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curwin_col_off2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_columns(may_scroll: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scrolldown(line_count: ::std::os::raw::c_long, byfold: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scrollup(line_count: ::std::os::raw::c_long, byfold: ::std::os::raw::c_int);
}
extern "C" {
    pub fn check_topfill(wp: *mut win_T, down: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_cursor_top(min_scroll: ::std::os::raw::c_int, always: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_empty_rows(wp: *mut win_T, used: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_cursor_bot(min_scroll: ::std::os::raw::c_int, set_topbot: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_cursor_halfway(atend: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cursor_correct();
}
extern "C" {
    pub fn onepage(
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn halfpage(flag: ::std::os::raw::c_int, Prenum: linenr_T);
}
extern "C" {
    pub fn do_check_cursorbind();
}
extern "C" {
    pub fn state_normal_cmd_initialize() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_normal_cmd_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn state_normal_cmd_execute(
        ctx: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_normal_pending_operator(
        ctx: *mut ::std::os::raw::c_void,
        pendingOp: *mut pendingOp_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_normal_cmds();
}
extern "C" {
    pub fn normal_cmd(oap: *mut oparg_T, toplevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_pending_operator(
        cap: *mut cmdarg_T,
        old_col: ::std::os::raw::c_int,
        gui_yank: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn do_mouse(
        oap: *mut oparg_T,
        c: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        fixindent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_visual_highlight();
}
extern "C" {
    pub fn end_visual_mode();
}
extern "C" {
    pub fn reset_VIsual_and_resel();
}
extern "C" {
    pub fn reset_VIsual();
}
extern "C" {
    pub fn find_ident_under_cursor(
        string: *mut *mut char_u,
        find_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_ident_at_pos(
        wp: *mut win_T,
        lnum: linenr_T,
        startcol: colnr_T,
        string: *mut *mut char_u,
        find_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_showcmd();
}
extern "C" {
    pub fn add_to_showcmd(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_to_showcmd_c(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn push_showcmd();
}
extern "C" {
    pub fn pop_showcmd();
}
extern "C" {
    pub fn do_check_scrollbind(check: ::std::os::raw::c_int);
}
extern "C" {
    pub fn check_scrollbind(topline_diff: linenr_T, leftcol_diff: ::std::os::raw::c_long);
}
extern "C" {
    pub fn find_decl(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        locally: ::std::os::raw::c_int,
        thisblock: ::std::os::raw::c_int,
        flags_arg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll_redraw(up: ::std::os::raw::c_int, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn handle_tabmenu();
}
extern "C" {
    pub fn do_nv_ident(c1: ::std::os::raw::c_int, c2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_visual_text(
        cap: *mut cmdarg_T,
        pp: *mut *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_selection();
}
extern "C" {
    pub fn may_start_select(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn state_change_initialize(oap: *mut oparg_T) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_change_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_change_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_op_type(
        char1: ::std::os::raw::c_int,
        char2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_on_lines(op: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_is_change(op: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_op_char(optype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_extra_op_char(optype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_shift(
        oap: *mut oparg_T,
        curs_top: ::std::os::raw::c_int,
        amount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn shift_line(
        left: ::std::os::raw::c_int,
        round: ::std::os::raw::c_int,
        amount: ::std::os::raw::c_int,
        call_changed_bytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn op_reindent(
        oap: *mut oparg_T,
        how: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
extern "C" {
    pub fn get_expr_register() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_expr_line(new_line: *mut char_u);
}
extern "C" {
    pub fn get_expr_line() -> *mut char_u;
}
extern "C" {
    pub fn get_expr_line_src() -> *mut char_u;
}
extern "C" {
    pub fn valid_yank_reg(
        regname: ::std::os::raw::c_int,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_yank_register_value(
        regname: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
    );
}
extern "C" {
    pub fn get_yank_register(
        regname: ::std::os::raw::c_int,
        writing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_get_selection(regname: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_register(
        name: ::std::os::raw::c_int,
        copy: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn put_register(name: ::std::os::raw::c_int, reg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free_register(reg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn yank_register_mline(regname: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_record(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_execreg(
        regname: ::std::os::raw::c_int,
        colon: ::std::os::raw::c_int,
        addcr: ::std::os::raw::c_int,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insert_reg(
        regname: ::std::os::raw::c_int,
        literally_arg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_spec_reg(
        regname: ::std::os::raw::c_int,
        argp: *mut *mut char_u,
        allocated: *mut ::std::os::raw::c_int,
        errmsg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmdline_paste_reg(
        regname: ::std::os::raw::c_int,
        literally_arg: ::std::os::raw::c_int,
        remcr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjust_clip_reg(rp: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn shift_delete_registers();
}
extern "C" {
    pub fn op_delete(oap: *mut oparg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_replace(oap: *mut oparg_T, c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_tilde(oap: *mut oparg_T);
}
extern "C" {
    pub fn swapchar(op_type: ::std::os::raw::c_int, pos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_insert(oap: *mut oparg_T, count1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn init_yank();
}
extern "C" {
    pub fn clear_registers();
}
extern "C" {
    pub fn op_yank(
        oap: *mut oparg_T,
        deleting: ::std::os::raw::c_int,
        mess: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_put(
        regname: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn adjust_cursor_eol();
}
extern "C" {
    pub fn preprocs_left() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_register_name(num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_display(eap: *mut exarg_T);
}
extern "C" {
    pub fn skip_comment(
        line: *mut char_u,
        process: ::std::os::raw::c_int,
        include_space: ::std::os::raw::c_int,
        is_comment: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn do_join(
        count: ::std::os::raw::c_long,
        insert_space: ::std::os::raw::c_int,
        save_undo: ::std::os::raw::c_int,
        use_formatoptions: ::std::os::raw::c_int,
        setmark: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_format(oap: *mut oparg_T, keep_cursor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn op_formatexpr(oap: *mut oparg_T);
}
extern "C" {
    pub fn fex_format(
        lnum: linenr_T,
        count: ::std::os::raw::c_long,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn format_lines(line_count: linenr_T, avoid_fex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn paragraph_start(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn op_addsub(oap: *mut oparg_T, Prenum1: linenr_T, g_cmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prepare_viminfo_registers();
}
extern "C" {
    pub fn finish_viminfo_registers();
}
extern "C" {
    pub fn read_viminfo_register(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn handle_viminfo_register(values: *mut garray_T, force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn write_viminfo_registers(fp: *mut FILE);
}
extern "C" {
    pub fn x11_export_final_selection();
}
extern "C" {
    pub fn clip_free_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_get_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_yank_selection(
        type_: ::std::os::raw::c_int,
        str_: *mut char_u,
        len: ::std::os::raw::c_long,
        cbd: *mut VimClipboard,
    );
}
extern "C" {
    pub fn clip_convert_selection(
        str_: *mut *mut char_u,
        len: *mut long_u,
        cbd: *mut VimClipboard,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dnd_yank_drag_data(str_: *mut char_u, len: ::std::os::raw::c_long);
}
extern "C" {
    pub fn get_reg_type(
        regname: ::std::os::raw::c_int,
        reglen: *mut ::std::os::raw::c_long,
    ) -> char_u;
}
extern "C" {
    pub fn get_reg_contents(
        regname: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn write_reg_contents(
        name: ::std::os::raw::c_int,
        str_: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        must_append: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn write_reg_contents_lst(
        name: ::std::os::raw::c_int,
        strings: *mut *mut char_u,
        maxlen: ::std::os::raw::c_int,
        must_append: ::std::os::raw::c_int,
        yank_type: ::std::os::raw::c_int,
        block_len: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn write_reg_contents_ex(
        name: ::std::os::raw::c_int,
        str_: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        must_append: ::std::os::raw::c_int,
        yank_type: ::std::os::raw::c_int,
        block_len: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn clear_oparg(oap: *mut oparg_T);
}
extern "C" {
    pub fn cursor_pos_info(dict: *mut dict_T);
}
extern "C" {
    pub fn set_init_1(clean_arg: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_string_default(name: *mut ::std::os::raw::c_char, val: *mut char_u);
}
extern "C" {
    pub fn set_number_default(name: *mut ::std::os::raw::c_char, val: ::std::os::raw::c_long);
}
extern "C" {
    pub fn set_local_options_default(wp: *mut win_T);
}
extern "C" {
    pub fn free_all_options();
}
extern "C" {
    pub fn set_init_2();
}
extern "C" {
    pub fn set_init_3();
}
extern "C" {
    pub fn set_helplang_default(lang: *mut char_u);
}
extern "C" {
    pub fn init_gui_options();
}
extern "C" {
    pub fn set_title_defaults();
}
extern "C" {
    pub fn do_set(arg: *mut char_u, opt_flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_to_key(
        arg: *mut char_u,
        multi_byte: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_options_bin(
        oldval: ::std::os::raw::c_int,
        newval: ::std::os::raw::c_int,
        opt_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_viminfo_parameter(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_viminfo_parameter(type_: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn check_options();
}
extern "C" {
    pub fn check_buf_options(buf: *mut buf_T);
}
extern "C" {
    pub fn free_string_option(p: *mut char_u);
}
extern "C" {
    pub fn clear_string_option(pp: *mut *mut char_u);
}
extern "C" {
    pub fn get_term_opt_idx(p: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term_option_alloced(p: *mut *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn was_set_insecurely(
        opt: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_string_option_direct(
        name: *mut char_u,
        opt_idx: ::std::os::raw::c_int,
        val: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
        set_sid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_string_option_direct_in_win(
        wp: *mut win_T,
        name: *mut char_u,
        opt_idx: ::std::os::raw::c_int,
        val: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
        set_sid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_string_option_direct_in_buf(
        buf: *mut buf_T,
        name: *mut char_u,
        opt_idx: ::std::os::raw::c_int,
        val: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
        set_sid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn valid_spellang(val: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_colorcolumn(wp: *mut win_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_stl_option(s: *mut char_u) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_term_option_sctx_idx(
        name: *mut ::std::os::raw::c_char,
        opt_idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_option_value(
        name: *mut char_u,
        numval: *mut ::std::os::raw::c_long,
        stringval: *mut *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_option_value_strict(
        name: *mut char_u,
        numval: *mut ::std::os::raw::c_long,
        stringval: *mut *mut char_u,
        opt_type: ::std::os::raw::c_int,
        from: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn option_iter_next(
        option: *mut *mut ::std::os::raw::c_void,
        opt_type: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn set_option_value(
        name: *mut char_u,
        number: ::std::os::raw::c_long,
        string: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_term_code(tname: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_highlight_default() -> *mut char_u;
}
extern "C" {
    pub fn get_encoding_default() -> *mut char_u;
}
extern "C" {
    pub fn makeset(
        fd: *mut FILE,
        opt_flags: ::std::os::raw::c_int,
        local_only: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn makefoldset(fd: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_termoptions();
}
extern "C" {
    pub fn free_termoptions();
}
extern "C" {
    pub fn free_one_termoption(var: *mut char_u);
}
extern "C" {
    pub fn set_term_defaults();
}
extern "C" {
    pub fn comp_col();
}
extern "C" {
    pub fn unset_global_local_option(name: *mut char_u, from: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_equalprg() -> *mut char_u;
}
extern "C" {
    pub fn win_copy_options(wp_from: *mut win_T, wp_to: *mut win_T);
}
extern "C" {
    pub fn copy_winopt(from: *mut winopt_T, to: *mut winopt_T);
}
extern "C" {
    pub fn check_win_options(win: *mut win_T);
}
extern "C" {
    pub fn clear_winopt(wop: *mut winopt_T);
}
extern "C" {
    pub fn buf_copy_options(buf: *mut buf_T, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reset_modifiable();
}
extern "C" {
    pub fn set_iminsert_global();
}
extern "C" {
    pub fn set_imsearch_global();
}
extern "C" {
    pub fn set_context_in_set_cmd(
        xp: *mut expand_T,
        arg: *mut char_u,
        opt_flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ExpandSettings(
        xp: *mut expand_T,
        regmatch: *mut regmatch_T,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ExpandOldSetting(
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn langmap_adjust_mb(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_format_option(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shortmess(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimrc_found(fname: *mut char_u, envname: *mut char_u);
}
extern "C" {
    pub fn change_compatible(on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn option_was_set(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_option_was_set(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_bs(what: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn save_file_ff(buf: *mut buf_T);
}
extern "C" {
    pub fn file_ff_differs(
        buf: *mut buf_T,
        ignore_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_ff_value(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_set(
        var: *mut char_u,
        array: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_padding(
        col: colnr_T,
        ts_arg: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_at(
        col: colnr_T,
        ts: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_start(
        col: colnr_T,
        ts: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
    ) -> colnr_T;
}
extern "C" {
    pub fn tabstop_fromto(
        start_col: colnr_T,
        end_col: colnr_T,
        ts_arg: ::std::os::raw::c_int,
        vts: *mut ::std::os::raw::c_int,
        ntabs: *mut ::std::os::raw::c_int,
        nspcs: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tabstop_eq(
        ts1: *mut ::std::os::raw::c_int,
        ts2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_copy(oldts: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_count(ts: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tabstop_first(ts: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_sw_value(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sw_value_indent(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sw_value_pos(buf: *mut buf_T, pos: *mut pos_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sw_value_col(buf: *mut buf_T, col: colnr_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sts_value() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_scrolloff_value() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_sidescrolloff_value() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn find_mps_values(
        initc: *mut ::std::os::raw::c_int,
        findc: *mut ::std::os::raw::c_int,
        backwards: *mut ::std::os::raw::c_int,
        switchit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_bkc_value(buf: *mut buf_T) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn signcolumn_on(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_winbuf_options(bufopt: ::std::os::raw::c_int) -> *mut dict_T;
}
extern "C" {
    pub fn qf_init(
        wp: *mut win_T,
        efile: *mut char_u,
        errorformat: *mut char_u,
        newlist: ::std::os::raw::c_int,
        qf_title: *mut char_u,
        enc: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_stack_get_bufnr() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_free_all(wp: *mut win_T);
}
extern "C" {
    pub fn check_quickfix_busy();
}
extern "C" {
    pub fn copy_loclist_stack(from: *mut win_T, to: *mut win_T);
}
extern "C" {
    pub fn qf_jump(
        qi: *mut qf_info_T,
        dir: ::std::os::raw::c_int,
        errornr: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qf_jump_newwin(
        qi: *mut qf_info_T,
        dir: ::std::os::raw::c_int,
        errornr: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        newwin: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qf_list(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_age(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_history(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_mark_adjust(
        wp: *mut win_T,
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn qf_view_result(split: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_cwindow(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cclose(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_copen(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cbottom(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_current_entry(wp: *mut win_T) -> linenr_T;
}
extern "C" {
    pub fn grep_internal(cmdidx: cmdidx_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_make(eap: *mut exarg_T);
}
extern "C" {
    pub fn qf_get_size(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_valid_size(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_cur_idx(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_cur_valid_idx(eap: *mut exarg_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_cc(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cnext(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cbelow(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cfile(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_vimgrep(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_errorlist(
        qi_arg: *mut qf_info_T,
        wp: *mut win_T,
        qf_idx: ::std::os::raw::c_int,
        list: *mut list_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qf_get_properties(
        wp: *mut win_T,
        what: *mut dict_T,
        retdict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_errorlist(
        wp: *mut win_T,
        list: *mut list_T,
        action: ::std::os::raw::c_int,
        title: *mut char_u,
        what: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_quickfix(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_cbuffer(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_cexpr(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_helpgrep(eap: *mut exarg_T);
}
extern "C" {
    pub fn re_multiline(prog: *mut regprog_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skip_regexp(
        startp: *mut char_u,
        dirc: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        newp: *mut *mut char_u,
    ) -> *mut char_u;
}
extern "C" {
    pub fn vim_regcomp_had_eol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_regexp_stuff();
}
extern "C" {
    pub fn ref_extmatch(em: *mut reg_extmatch_T) -> *mut reg_extmatch_T;
}
extern "C" {
    pub fn unref_extmatch(em: *mut reg_extmatch_T);
}
extern "C" {
    pub fn regtilde(source: *mut char_u, magic: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn vim_regsub(
        rmp: *mut regmatch_T,
        source: *mut char_u,
        expr: *mut typval_T,
        dest: *mut char_u,
        copy: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        backslash: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regsub_multi(
        rmp: *mut regmmatch_T,
        lnum: linenr_T,
        source: *mut char_u,
        dest: *mut char_u,
        copy: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        backslash: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reg_submatch(no: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn reg_submatch_list(no: ::std::os::raw::c_int) -> *mut list_T;
}
extern "C" {
    pub fn vim_regcomp(expr_arg: *mut char_u, re_flags: ::std::os::raw::c_int) -> *mut regprog_T;
}
extern "C" {
    pub fn vim_regfree(prog: *mut regprog_T);
}
extern "C" {
    pub fn regprog_in_use(prog: *mut regprog_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec_prog(
        prog: *mut *mut regprog_T,
        ignore_case: ::std::os::raw::c_int,
        line: *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec(
        rmp: *mut regmatch_T,
        line: *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec_nl(
        rmp: *mut regmatch_T,
        line: *mut char_u,
        col: colnr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_regexec_multi(
        rmp: *mut regmmatch_T,
        win: *mut win_T,
        buf: *mut buf_T,
        lnum: linenr_T,
        col: colnr_T,
        tm: *mut proftime_T,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn redraw_later(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_win_later(wp: *mut win_T, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_later_clear();
}
extern "C" {
    pub fn redraw_all_later(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_curbuf_later(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_buf_later(buf: *mut buf_T, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_buf_line_later(buf: *mut buf_T, lnum: linenr_T);
}
extern "C" {
    pub fn redraw_buf_and_status_later(buf: *mut buf_T, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redraw_asap(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redraw_after_callback(call_update_screen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redrawWinline(wp: *mut win_T, lnum: linenr_T);
}
extern "C" {
    pub fn after_updating_screen(may_resize_shell: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_curbuf(type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_screen(type_arg: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn conceal_cursor_line(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn conceal_check_cursor_line();
}
extern "C" {
    pub fn update_debug_sign(buf: *mut buf_T, lnum: linenr_T);
}
extern "C" {
    pub fn updateWindow(wp: *mut win_T);
}
extern "C" {
    pub fn screen_get_current_line_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_line(
        row: ::std::os::raw::c_int,
        coloff: ::std::os::raw::c_int,
        endcol: ::std::os::raw::c_int,
        clear_width: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rl_mirror(str_: *mut char_u);
}
extern "C" {
    pub fn status_redraw_all();
}
extern "C" {
    pub fn status_redraw_curbuf();
}
extern "C" {
    pub fn redraw_statuslines();
}
extern "C" {
    pub fn win_redraw_last_status(frp: *mut frame_T);
}
extern "C" {
    pub fn win_redr_status_matches(
        xp: *mut expand_T,
        num_matches: ::std::os::raw::c_int,
        matches: *mut *mut char_u,
        match_: ::std::os::raw::c_int,
        showtail: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stl_connected(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_keymap_str(
        wp: *mut win_T,
        fmt: *mut char_u,
        buf: *mut char_u,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_putchar(
        c: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_getbytes(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        bytes: *mut char_u,
        attrp: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_puts(
        text: *mut char_u,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_puts_len(
        text: *mut char_u,
        textlen: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        attr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_stop_highlight();
}
extern "C" {
    pub fn reset_cterm_colors();
}
extern "C" {
    pub fn screen_draw_rectangle(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        invert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn check_for_delay(check_msg_scroll: ::std::os::raw::c_int);
}
extern "C" {
    pub fn screen_valid(doclear: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screenalloc(doclear: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_screenlines();
}
extern "C" {
    pub fn screenclear();
}
extern "C" {
    pub fn can_clear(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_start();
}
extern "C" {
    pub fn windgoto(row: ::std::os::raw::c_int, col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setcursor();
}
extern "C" {
    pub fn setcursor_mayforce(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_ins_lines(
        wp: *mut win_T,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        invalid: ::std::os::raw::c_int,
        mayclear: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_del_lines(
        wp: *mut win_T,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        invalid: ::std::os::raw::c_int,
        mayclear: ::std::os::raw::c_int,
        clear_attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_ins_lines(
        off: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        clear_attr: ::std::os::raw::c_int,
        wp: *mut win_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_del_lines(
        off: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        line_count: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
        clear_attr: ::std::os::raw::c_int,
        wp: *mut win_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skip_showmode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshowmode(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clearmode();
}
extern "C" {
    pub fn draw_tabline();
}
extern "C" {
    pub fn get_trans_bufname(buf: *mut buf_T);
}
extern "C" {
    pub fn redrawing() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn messaging() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn showruler(always: ::std::os::raw::c_int);
}
extern "C" {
    pub fn number_width(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_screencol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_screenrow() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha256_start(ctx: *mut context_sha256_T);
}
extern "C" {
    pub fn sha256_update(ctx: *mut context_sha256_T, input: *mut char_u, length: UINT32_T);
}
extern "C" {
    pub fn sha256_finish(ctx: *mut context_sha256_T, digest: *mut char_u);
}
extern "C" {
    pub fn search_regcomp(
        pat: *mut char_u,
        pat_save: ::std::os::raw::c_int,
        pat_use: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        regmatch: *mut regmmatch_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_search_pat() -> *mut char_u;
}
extern "C" {
    pub fn reverse_text(s: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn save_re_pat(idx: ::std::os::raw::c_int, pat: *mut char_u, magic: ::std::os::raw::c_int);
}
extern "C" {
    pub fn save_search_patterns();
}
extern "C" {
    pub fn restore_search_patterns();
}
extern "C" {
    pub fn free_search_patterns();
}
extern "C" {
    pub fn save_last_search_pattern();
}
extern "C" {
    pub fn restore_last_search_pattern();
}
extern "C" {
    pub fn last_search_pattern() -> *mut char_u;
}
extern "C" {
    pub fn ignorecase(pat: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ignorecase_opt(
        pat: *mut char_u,
        ic_in: ::std::os::raw::c_int,
        scs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pat_has_uppercase(pat: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn last_csearch() -> *mut char_u;
}
extern "C" {
    pub fn last_csearch_forward() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn last_csearch_until() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_last_csearch(c: ::std::os::raw::c_int, s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_csearch_direction(cdir: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_csearch_until(t_cmd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn last_search_pat() -> *mut char_u;
}
extern "C" {
    pub fn reset_search_dir();
}
extern "C" {
    pub fn set_last_search_pat(
        s: *mut char_u,
        idx: ::std::os::raw::c_int,
        magic: ::std::os::raw::c_int,
        setlast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn last_pat_prog(regmatch: *mut regmmatch_T);
}
extern "C" {
    pub fn searchit(
        win: *mut win_T,
        buf: *mut buf_T,
        pos: *mut pos_T,
        end_pos: *mut pos_T,
        dir: ::std::os::raw::c_int,
        pat: *mut char_u,
        count: ::std::os::raw::c_long,
        options: ::std::os::raw::c_int,
        pat_use: ::std::os::raw::c_int,
        stop_lnum: linenr_T,
        tm: *mut proftime_T,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_search_direction(cdir: ::std::os::raw::c_int);
}
extern "C" {
    pub fn do_search(
        oap: *mut oparg_T,
        dirc: ::std::os::raw::c_int,
        pat: *mut char_u,
        count: ::std::os::raw::c_long,
        options: ::std::os::raw::c_int,
        tm: *mut proftime_T,
        timed_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn search_for_exact_line(
        buf: *mut buf_T,
        pos: *mut pos_T,
        dir: ::std::os::raw::c_int,
        pat: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchc(cap: *mut cmdarg_T, t_cmd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findmatch(oap: *mut oparg_T, initc: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn findmatchlimit(
        oap: *mut oparg_T,
        initc: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        maxtravel: ::std::os::raw::c_int,
    ) -> *mut pos_T;
}
extern "C" {
    pub fn showmatch(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn findsent(
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findpar(
        pincl: *mut ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        what: ::std::os::raw::c_int,
        both: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn startPS(
        lnum: linenr_T,
        para: ::std::os::raw::c_int,
        both: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwd_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        eol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bck_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        stop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn end_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        stop: ::std::os::raw::c_int,
        empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bckend_word(
        count: ::std::os::raw::c_long,
        bigword: ::std::os::raw::c_int,
        eol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_word(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        bigword: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_sent(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_block(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        other: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_tagblock(
        oap: *mut oparg_T,
        count_arg: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_par(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_quote(
        oap: *mut oparg_T,
        count: ::std::os::raw::c_long,
        include: ::std::os::raw::c_int,
        quotechar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_search(
        count: ::std::os::raw::c_long,
        forward: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linewhite(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_pattern_in_path(
        ptr: *mut char_u,
        dir: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        whole: ::std::os::raw::c_int,
        skip_comments: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        action: ::std::os::raw::c_int,
        start_lnum: linenr_T,
        end_lnum: linenr_T,
    );
}
extern "C" {
    pub fn read_viminfo_search_pattern(
        virp: *mut vir_T,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_viminfo_search_pattern(fp: *mut FILE);
}
extern "C" {
    pub fn init_signs();
}
extern "C" {
    pub fn buf_getsigntype(
        buf: *mut buf_T,
        lnum: linenr_T,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_delsign(
        buf: *mut buf_T,
        atlnum: linenr_T,
        id: ::std::os::raw::c_int,
        group: *mut char_u,
    ) -> linenr_T;
}
extern "C" {
    pub fn buf_findsign(
        buf: *mut buf_T,
        id: ::std::os::raw::c_int,
        group: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_findsign_id(
        buf: *mut buf_T,
        lnum: linenr_T,
        groupname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_findsigntype_id(
        buf: *mut buf_T,
        lnum: linenr_T,
        typenr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_signcount(buf: *mut buf_T, lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_delete_signs(buf: *mut buf_T, group: *mut char_u);
}
extern "C" {
    pub fn sign_mark_adjust(
        line1: linenr_T,
        line2: linenr_T,
        amount: ::std::os::raw::c_long,
        amount_after: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn sign_define_by_name(
        name: *mut char_u,
        icon: *mut char_u,
        linehl: *mut char_u,
        text: *mut char_u,
        texthl: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_undefine_by_name(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_place(
        sign_id: *mut ::std::os::raw::c_int,
        sign_group: *mut char_u,
        sign_name: *mut char_u,
        buf: *mut buf_T,
        lnum: linenr_T,
        prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_unplace(
        sign_id: ::std::os::raw::c_int,
        sign_group: *mut char_u,
        buf: *mut buf_T,
        atlnum: linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_jump(
        sign_id: ::std::os::raw::c_int,
        sign_group: *mut char_u,
        buf: *mut buf_T,
    ) -> linenr_T;
}
extern "C" {
    pub fn ex_sign(eap: *mut exarg_T);
}
extern "C" {
    pub fn sign_getlist(name: *mut char_u, retlist: *mut list_T);
}
extern "C" {
    pub fn get_buffer_signs(buf: *mut buf_T, l: *mut list_T);
}
extern "C" {
    pub fn sign_get_placed(
        buf: *mut buf_T,
        lnum: linenr_T,
        sign_id: ::std::os::raw::c_int,
        sign_group: *mut char_u,
        retlist: *mut list_T,
    );
}
extern "C" {
    pub fn sign_gui_started();
}
extern "C" {
    pub fn sign_get_attr(
        typenr: ::std::os::raw::c_int,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sign_get_text(typenr: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn sign_get_image(typenr: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free_signs();
}
extern "C" {
    pub fn get_sign_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_sign_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn state_insert_literal_initialize(
        ret: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn state_insert_literal_execute(
        ctx: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
    ) -> executionStatus_T;
}
extern "C" {
    pub fn state_insert_literal_cleanup(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sm_push(
        mode: ::std::os::raw::c_int,
        subMode: subMode_T,
        context: *mut ::std::os::raw::c_void,
        executeFn: state_execute,
        pendingOperatorFn: state_pending_operator,
        cleanupFn: state_cleanup,
    );
}
extern "C" {
    pub fn sm_push_insert(
        cmdchar: ::std::os::raw::c_int,
        startln: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn sm_push_insert_literal(ret: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn sm_push_normal();
}
extern "C" {
    pub fn sm_push_change(oap: *mut oparg_T);
}
extern "C" {
    pub fn sm_push_cmdline(
        cmdchar: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
        indent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sm_execute_normal(cmd: *mut char_u, preserveState: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sm_execute(key: *mut char_u);
}
extern "C" {
    pub fn sm_get_current_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm_get_current_sub_mode() -> subMode_T;
}
extern "C" {
    pub fn sm_get_pending_operator(pendingOp: *mut pendingOp_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm_get_current() -> *mut sm_T;
}
extern "C" {
    pub fn syn_set_timeout(tm: *mut proftime_T);
}
extern "C" {
    pub fn syntax_start(wp: *mut win_T, lnum: linenr_T);
}
extern "C" {
    pub fn syn_stack_free_all(block: *mut synblock_T);
}
extern "C" {
    pub fn syn_stack_apply_changes(buf: *mut buf_T);
}
extern "C" {
    pub fn syntax_end_parsing(lnum: linenr_T);
}
extern "C" {
    pub fn syntax_check_changed(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_syntax_attr(
        col: colnr_T,
        can_spell: *mut ::std::os::raw::c_int,
        keep_state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syntax_clear(block: *mut synblock_T);
}
extern "C" {
    pub fn reset_synblock(wp: *mut win_T);
}
extern "C" {
    pub fn ex_syntax(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_ownsyntax(eap: *mut exarg_T);
}
extern "C" {
    pub fn syntax_present(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_expand_highlight();
}
extern "C" {
    pub fn set_context_in_echohl_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn set_context_in_syntax_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn get_syntax_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn syn_get_id(
        wp: *mut win_T,
        lnum: ::std::os::raw::c_long,
        col: colnr_T,
        trans: ::std::os::raw::c_int,
        spellp: *mut ::std::os::raw::c_int,
        keep_state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_syntax_info(seqnrp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_get_sub_char() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_get_stack_item(i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_get_foldlevel(wp: *mut win_T, lnum: ::std::os::raw::c_long)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_syntime(eap: *mut exarg_T);
}
extern "C" {
    pub fn get_syntime_arg(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn init_highlight(both: ::std::os::raw::c_int, reset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn load_colors(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lookup_color(
        idx: ::std::os::raw::c_int,
        foreground: ::std::os::raw::c_int,
        boldp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_highlight(
        line: *mut char_u,
        forceit: ::std::os::raw::c_int,
        init: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn free_highlight();
}
extern "C" {
    pub fn restore_cterm_colors();
}
extern "C" {
    pub fn set_normal_colors();
}
extern "C" {
    pub fn hl_get_font_name() -> *mut char_u;
}
extern "C" {
    pub fn hl_set_font_name(font_name: *mut char_u);
}
extern "C" {
    pub fn hl_set_bg_color_name(name: *mut char_u);
}
extern "C" {
    pub fn hl_set_fg_color_name(name: *mut char_u);
}
extern "C" {
    pub fn color_name2handle(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn get_cterm_attr_idx(
        attr: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_int,
        bg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tgc_attr_idx(
        attr: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_long,
        bg: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_gui_attr_idx(
        attr: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_long,
        bg: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_hl_tables();
}
extern "C" {
    pub fn hl_combine_attr(
        char_attr: ::std::os::raw::c_int,
        prim_attr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_gui_attr2entry(attr: ::std::os::raw::c_int) -> *mut attrentry_T;
}
extern "C" {
    pub fn syn_attr2attr(attr: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_term_attr2entry(attr: ::std::os::raw::c_int) -> *mut attrentry_T;
}
extern "C" {
    pub fn syn_cterm_attr2entry(attr: ::std::os::raw::c_int) -> *mut attrentry_T;
}
extern "C" {
    pub fn highlight_has_attr(
        id: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
        modec: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn highlight_color(
        id: ::std::os::raw::c_int,
        what: *mut char_u,
        modec: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn highlight_gui_color_rgb(id: ::std::os::raw::c_int, fg: ::std::os::raw::c_int) -> long_u;
}
extern "C" {
    pub fn syn_name2id(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_name2attr(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn highlight_exists(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2name(id: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn syn_namen2id(linep: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_check_group(pp: *mut char_u, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2attr(hl_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2colors(
        hl_id: ::std::os::raw::c_int,
        fgp: *mut ::std::os::raw::c_long,
        bgp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syn_id2cterm_bg(
        hl_id: ::std::os::raw::c_int,
        fgp: *mut ::std::os::raw::c_int,
        bgp: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn syn_get_final_id(hl_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn highlight_gui_started();
}
extern "C" {
    pub fn highlight_changed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_context_in_highlight_cmd(xp: *mut expand_T, arg: *mut char_u);
}
extern "C" {
    pub fn get_highlight_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_highlight_name_ext(
        xp: *mut expand_T,
        idx: ::std::os::raw::c_int,
        skip_cleared: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn free_highlight_fonts();
}
extern "C" {
    pub fn do_tag(
        tag: *mut char_u,
        type_: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        forceit: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tag_freematch();
}
extern "C" {
    pub fn do_tags(eap: *mut exarg_T);
}
extern "C" {
    pub fn find_tags(
        pat: *mut char_u,
        num_matches: *mut ::std::os::raw::c_int,
        matchesp: *mut *mut *mut char_u,
        flags: ::std::os::raw::c_int,
        mincount: ::std::os::raw::c_int,
        buf_ffname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_tag_stuff();
}
extern "C" {
    pub fn get_tagfname(
        tnp: *mut tagname_T,
        first: ::std::os::raw::c_int,
        buf: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tagname_free(tnp: *mut tagname_T);
}
extern "C" {
    pub fn expand_tags(
        tagnames: ::std::os::raw::c_int,
        pat: *mut char_u,
        num_file: *mut ::std::os::raw::c_int,
        file: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tags(
        list: *mut list_T,
        pat: *mut char_u,
        buf_fname: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tagstack(wp: *mut win_T, retdict: *mut dict_T);
}
extern "C" {
    pub fn set_tagstack(
        wp: *mut win_T,
        d: *mut dict_T,
        action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termgui_mch_get_color(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn termgui_get_color(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn termgui_mch_get_rgb(color: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn set_termname(term: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_mouse_termcode(n: ::std::os::raw::c_int, s: *mut char_u);
}
extern "C" {
    pub fn del_mouse_termcode(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getlinecol(cp: *mut ::std::os::raw::c_long, rp: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn add_termcap_entry(
        name: *mut char_u,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_is_8bit(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_is_gui(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tltoa(i: ::std::os::raw::c_ulong) -> *mut char_u;
}
extern "C" {
    pub fn termcapinit(name: *mut char_u);
}
extern "C" {
    pub fn out_trash();
}
extern "C" {
    pub fn out_str_nf(s: *mut char_u);
}
extern "C" {
    pub fn out_str_cf(s: *mut char_u);
}
extern "C" {
    pub fn out_str(s: *mut char_u);
}
extern "C" {
    pub fn term_windgoto(row: ::std::os::raw::c_int, col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_cursor_right(i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_append_lines(line_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_delete_lines(line_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_set_winpos(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_get_winpos(
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        timeout: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_set_winsize(height: ::std::os::raw::c_int, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_fg_color(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_bg_color(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_fg_rgb_color(rgb: ::std::os::raw::c_long);
}
extern "C" {
    pub fn term_bg_rgb_color(rgb: ::std::os::raw::c_long);
}
extern "C" {
    pub fn term_settitle(title: *mut char_u);
}
extern "C" {
    pub fn term_push_title(which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_pop_title(which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ttest(pairs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_long_to_buf(val: long_u, dst: *mut char_u);
}
extern "C" {
    pub fn check_shellsize();
}
extern "C" {
    pub fn limit_screen_size();
}
extern "C" {
    pub fn win_new_shellsize();
}
extern "C" {
    pub fn shell_resized();
}
extern "C" {
    pub fn shell_resized_check();
}
extern "C" {
    pub fn set_shellsize(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        mustset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn settmode(tmode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn starttermcap();
}
extern "C" {
    pub fn stoptermcap();
}
extern "C" {
    pub fn may_req_termresponse();
}
extern "C" {
    pub fn may_req_ambiguous_char_width();
}
extern "C" {
    pub fn may_req_bg_color();
}
extern "C" {
    pub fn swapping_screen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmouse();
}
extern "C" {
    pub fn mouse_has(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mouse_model_popup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll_start();
}
extern "C" {
    pub fn cursor_on_force();
}
extern "C" {
    pub fn cursor_on();
}
extern "C" {
    pub fn cursor_off();
}
extern "C" {
    pub fn term_cursor_mode(forced: ::std::os::raw::c_int);
}
extern "C" {
    pub fn term_cursor_color(color: *mut char_u);
}
extern "C" {
    pub fn blink_state_is_inverted() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_cursor_shape(shape: ::std::os::raw::c_int, blink: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_region_set(wp: *mut win_T, off: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_region_reset();
}
extern "C" {
    pub fn clear_termcodes();
}
extern "C" {
    pub fn add_termcode(name: *mut char_u, string: *mut char_u, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn find_termcode(name: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_termcode(i: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn del_termcode(name: *mut char_u);
}
extern "C" {
    pub fn set_mouse_topline(wp: *mut win_T);
}
extern "C" {
    pub fn check_termcode(
        max_offset: ::std::os::raw::c_int,
        buf: *mut char_u,
        bufsize: ::std::os::raw::c_int,
        buflen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn term_get_fg_color(r: *mut char_u, g: *mut char_u, b: *mut char_u);
}
extern "C" {
    pub fn term_get_bg_color(r: *mut char_u, g: *mut char_u, b: *mut char_u);
}
extern "C" {
    pub fn replace_termcodes(
        from: *mut char_u,
        bufp: *mut *mut char_u,
        from_part: ::std::os::raw::c_int,
        do_lt: ::std::os::raw::c_int,
        special: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn find_term_bykeys(src: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_termcodes();
}
extern "C" {
    pub fn show_one_termcode(
        name: *mut char_u,
        code: *mut char_u,
        printit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn translate_mapping(str_: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn update_tcap(attr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn swap_tcap();
}
extern "C" {
    pub fn gui_get_color_cmn(name: *mut char_u) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn gui_get_rgb_color_cmn(
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cterm_color2rgb(
        nr: ::std::os::raw::c_int,
        r: *mut char_u,
        g: *mut char_u,
        b: *mut char_u,
        ansi_idx: *mut char_u,
    );
}
extern "C" {
    pub fn ui_inchar_undo(s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_inchar(
        buf: *mut char_u,
        maxlen: ::std::os::raw::c_int,
        wtime: ::std::os::raw::c_long,
        tb_change_cnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_wait_for_chars_or_timer(
        wtime: ::std::os::raw::c_long,
        wait_func: ::std::option::Option<
            unsafe extern "C" fn(
                wtime: ::std::os::raw::c_long,
                interrupted: *mut ::std::os::raw::c_int,
                ignore_input: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        interrupted: *mut ::std::os::raw::c_int,
        ignore_input: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_char_avail() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_delay(msec: ::std::os::raw::c_long, ignoreinput: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_suspend();
}
extern "C" {
    pub fn suspend_shell();
}
extern "C" {
    pub fn ui_get_shellsize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_set_shellsize(mustset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_new_shellsize();
}
extern "C" {
    pub fn ui_get_winpos(
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        timeout: varnumber_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_breakcheck();
}
extern "C" {
    pub fn ui_breakcheck_force(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_init(can_use: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_update_selection(clip: *mut VimClipboard);
}
extern "C" {
    pub fn clip_own_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_lose_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn start_global_changes();
}
extern "C" {
    pub fn is_clipboard_needs_update() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn end_global_changes();
}
extern "C" {
    pub fn clip_auto_select();
}
extern "C" {
    pub fn clip_isautosel_star() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_isautosel_plus() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_modeless(
        button: ::std::os::raw::c_int,
        is_click: ::std::os::raw::c_int,
        is_drag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip_start_selection(
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        repeated_click: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip_process_selection(
        button: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        repeated_click: int_u,
    );
}
extern "C" {
    pub fn clip_may_redraw_selection(
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clip_clear_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_may_clear_selection(row1: ::std::os::raw::c_int, row2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_scroll_selection(rows: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_copy_modeless_selection(both: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clip_gen_own_selection(cbd: *mut VimClipboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clip_gen_lose_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_gen_set_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_gen_request_selection(cbd: *mut VimClipboard);
}
extern "C" {
    pub fn clip_gen_owner_exists(cbd: *mut VimClipboard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_input_buf_full() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_is_input_buf_empty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_free_in_input_buf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vim_used_in_input_buf() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_input_buf() -> *mut char_u;
}
extern "C" {
    pub fn set_input_buf(p: *mut char_u);
}
extern "C" {
    pub fn add_to_input_buf(s: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_to_input_buf_csi(str_: *mut char_u, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn trash_input_buf();
}
extern "C" {
    pub fn read_from_input_buf(
        buf: *mut char_u,
        maxlen: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fill_input_buf(exit_on_error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read_error_exit();
}
extern "C" {
    pub fn ui_cursor_shape_forced(forced: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ui_cursor_shape();
}
extern "C" {
    pub fn check_col(col: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_row(row: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_app_context();
}
extern "C" {
    pub fn jump_to_mouse(
        flags: ::std::os::raw::c_int,
        inclusive: *mut ::std::os::raw::c_int,
        which_button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mouse_comp_pos(
        win: *mut win_T,
        rowp: *mut ::std::os::raw::c_int,
        colp: *mut ::std::os::raw::c_int,
        lnump: *mut linenr_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mouse_find_win(
        rowp: *mut ::std::os::raw::c_int,
        colp: *mut ::std::os::raw::c_int,
    ) -> *mut win_T;
}
extern "C" {
    pub fn get_fpos_of_mouse(mpos: *mut pos_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vcol2col(
        wp: *mut win_T,
        lnum: linenr_T,
        vcol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ui_focus_change(in_focus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn u_save_cursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_save(top: linenr_T, bot: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_savesub(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_inssub(lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_savedel(lnum: linenr_T, nlines: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undo_allowed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_savecommon(
        top: linenr_T,
        bot: linenr_T,
        newbot: linenr_T,
        reload: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_compute_hash(hash: *mut char_u);
}
extern "C" {
    pub fn u_get_undo_file_name(
        buf_ffname: *mut char_u,
        reading: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn u_write_undo(
        name: *mut char_u,
        forceit: ::std::os::raw::c_int,
        buf: *mut buf_T,
        hash: *mut char_u,
    );
}
extern "C" {
    pub fn u_read_undo(name: *mut char_u, hash: *mut char_u, orig_name: *mut char_u);
}
extern "C" {
    pub fn u_undo(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn u_redo(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn undo_time(
        step: ::std::os::raw::c_long,
        sec: ::std::os::raw::c_int,
        file: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn u_sync(force: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_undolist(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_undojoin(eap: *mut exarg_T);
}
extern "C" {
    pub fn u_unchanged(buf: *mut buf_T);
}
extern "C" {
    pub fn u_find_first_changed();
}
extern "C" {
    pub fn u_update_save_nr(buf: *mut buf_T);
}
extern "C" {
    pub fn u_clearall(buf: *mut buf_T);
}
extern "C" {
    pub fn u_saveline(lnum: linenr_T);
}
extern "C" {
    pub fn u_clearline();
}
extern "C" {
    pub fn u_undoline();
}
extern "C" {
    pub fn u_blockfree(buf: *mut buf_T);
}
extern "C" {
    pub fn bufIsChanged(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn anyBufIsChanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufIsChangedNotTerm(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curbufIsChanged() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_eval_tree(first_uhp: *mut u_header_T, list: *mut list_T);
}
extern "C" {
    pub fn find_ucmd(
        eap: *mut exarg_T,
        p: *mut char_u,
        full: *mut ::std::os::raw::c_int,
        xp: *mut expand_T,
        complp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn set_context_in_user_cmd(xp: *mut expand_T, arg_in: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn get_user_command_name(idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_commands(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_addr_type(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_flags(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_nargs(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn get_user_cmd_complete(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn cmdcomplete_str_to_type(complete_str: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uc_fun_cmd() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn parse_compl_arg(
        value: *mut char_u,
        vallen: ::std::os::raw::c_int,
        complp: *mut ::std::os::raw::c_int,
        argt: *mut ::std::os::raw::c_long,
        compl_arg: *mut *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_command(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_comclear(eap: *mut exarg_T);
}
extern "C" {
    pub fn uc_clear(gap: *mut garray_T);
}
extern "C" {
    pub fn ex_delcommand(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_ucmd(eap: *mut exarg_T);
}
extern "C" {
    pub fn func_init();
}
extern "C" {
    pub fn get_lambda_tv(
        arg: *mut *mut char_u,
        rettv: *mut typval_T,
        evaluate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deref_func_name(
        name: *mut char_u,
        lenp: *mut ::std::os::raw::c_int,
        partialp: *mut *mut partial_T,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn get_func_tv(
        name: *mut char_u,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        arg: *mut *mut char_u,
        firstline: linenr_T,
        lastline: linenr_T,
        doesrange: *mut ::std::os::raw::c_int,
        evaluate: ::std::os::raw::c_int,
        partial: *mut partial_T,
        selfdict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_func(name: *mut char_u) -> *mut ufunc_T;
}
extern "C" {
    pub fn save_funccal(entry: *mut funccal_entry_T);
}
extern "C" {
    pub fn restore_funccal();
}
extern "C" {
    pub fn free_all_functions();
}
extern "C" {
    pub fn func_call(
        name: *mut char_u,
        args: *mut typval_T,
        partial: *mut partial_T,
        selfdict: *mut dict_T,
        rettv: *mut typval_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_callback(
        callback: *mut callback_T,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        argcount: ::std::os::raw::c_int,
        argvars: *mut typval_T,
        argv_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut typval_T,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        firstline: linenr_T,
        lastline: linenr_T,
        doesrange: *mut ::std::os::raw::c_int,
        evaluate: ::std::os::raw::c_int,
        selfdict: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn call_func(
        funcname: *mut char_u,
        len: ::std::os::raw::c_int,
        rettv: *mut typval_T,
        argcount_in: ::std::os::raw::c_int,
        argvars_in: *mut typval_T,
        argv_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut typval_T,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        firstline: linenr_T,
        lastline: linenr_T,
        doesrange: *mut ::std::os::raw::c_int,
        evaluate: ::std::os::raw::c_int,
        partial: *mut partial_T,
        selfdict_in: *mut dict_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trans_function_name(
        pp: *mut *mut char_u,
        skip: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        fdp: *mut funcdict_T,
        partial: *mut *mut partial_T,
    ) -> *mut char_u;
}
extern "C" {
    pub fn ex_function(eap: *mut exarg_T);
}
extern "C" {
    pub fn eval_fname_script(p: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn translated_function_exists(name: *mut char_u) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn function_exists(
        name: *mut char_u,
        no_deref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_expanded_name(name: *mut char_u, check: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn func_dump_profile(fd: *mut FILE);
}
extern "C" {
    pub fn prof_child_enter(tm: *mut proftime_T);
}
extern "C" {
    pub fn prof_child_exit(tm: *mut proftime_T);
}
extern "C" {
    pub fn get_user_func_name(xp: *mut expand_T, idx: ::std::os::raw::c_int) -> *mut char_u;
}
extern "C" {
    pub fn ex_delfunction(eap: *mut exarg_T);
}
extern "C" {
    pub fn func_unref(name: *mut char_u);
}
extern "C" {
    pub fn func_ptr_unref(fp: *mut ufunc_T);
}
extern "C" {
    pub fn func_ref(name: *mut char_u);
}
extern "C" {
    pub fn func_ptr_ref(fp: *mut ufunc_T);
}
extern "C" {
    pub fn ex_return(eap: *mut exarg_T);
}
extern "C" {
    pub fn ex_call(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_return(
        eap: *mut exarg_T,
        reanimate: ::std::os::raw::c_int,
        is_cmd: ::std::os::raw::c_int,
        rettv: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn discard_pending_return(rettv: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_return_cmd(rettv: *mut ::std::os::raw::c_void) -> *mut char_u;
}
extern "C" {
    pub fn get_func_line(
        c: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_void,
        indent: ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn func_line_start(cookie: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn func_line_exec(cookie: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn func_line_end(cookie: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn func_has_ended(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn func_has_abort(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_partial(selfdict_in: *mut dict_T, rettv: *mut typval_T) -> *mut dict_T;
}
extern "C" {
    pub fn func_name(cookie: *mut ::std::os::raw::c_void) -> *mut char_u;
}
extern "C" {
    pub fn func_breakpoint(cookie: *mut ::std::os::raw::c_void) -> *mut linenr_T;
}
extern "C" {
    pub fn func_dbg_tick(cookie: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn func_level(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn current_func_returned() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unref_funccal(
        copyID: ::std::os::raw::c_int,
        testing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_funccal_local_ht() -> *mut hashtab_T;
}
extern "C" {
    pub fn get_funccal_local_var() -> *mut dictitem_T;
}
extern "C" {
    pub fn get_funccal_args_ht() -> *mut hashtab_T;
}
extern "C" {
    pub fn get_funccal_args_var() -> *mut dictitem_T;
}
extern "C" {
    pub fn list_func_vars(first: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_current_funccal_dict(ht: *mut hashtab_T) -> *mut dict_T;
}
extern "C" {
    pub fn find_hi_in_scoped_ht(name: *mut char_u, pht: *mut *mut hashtab_T) -> *mut hashitem_T;
}
extern "C" {
    pub fn find_var_in_scoped_ht(
        name: *mut char_u,
        no_autoload: ::std::os::raw::c_int,
    ) -> *mut dictitem_T;
}
extern "C" {
    pub fn set_ref_in_previous_funccal(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_call_stack(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_functions(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_func_args(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_func(
        name: *mut char_u,
        fp_in: *mut ufunc_T,
        copyID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_longVersion();
}
extern "C" {
    pub fn highest_patch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_patch(n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ex_version(eap: *mut exarg_T);
}
extern "C" {
    pub fn list_in_columns(
        items: *mut *mut char_u,
        size: ::std::os::raw::c_int,
        current: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn list_version();
}
extern "C" {
    pub fn maybe_intro_message();
}
extern "C" {
    pub fn intro_message(colon: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ex_intro(eap: *mut exarg_T);
}
extern "C" {
    pub fn do_window(
        nchar: ::std::os::raw::c_int,
        Prenum: ::std::os::raw::c_long,
        xchar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_wincmd_addr_type(arg: *mut char_u, eap: *mut exarg_T);
}
extern "C" {
    pub fn win_split(
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_split_ins(
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        new_wp: *mut win_T,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_valid(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_valid_any_tab(win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_windows(
        count: ::std::os::raw::c_int,
        vertical: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_move_after(win1: *mut win_T, win2: *mut win_T);
}
extern "C" {
    pub fn win_equal(
        next_curwin: *mut win_T,
        current: ::std::os::raw::c_int,
        dir: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn close_windows(buf: *mut buf_T, keep_curwin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn one_window() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_close(win: *mut win_T, free_buf: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_close_othertab(win: *mut win_T, free_buf: ::std::os::raw::c_int, tp: *mut tabpage_T);
}
extern "C" {
    pub fn win_free_all();
}
extern "C" {
    pub fn winframe_remove(
        win: *mut win_T,
        dirp: *mut ::std::os::raw::c_int,
        tp: *mut tabpage_T,
    ) -> *mut win_T;
}
extern "C" {
    pub fn close_others(message: ::std::os::raw::c_int, forceit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn curwin_init();
}
extern "C" {
    pub fn win_init_empty(wp: *mut win_T);
}
extern "C" {
    pub fn win_alloc_first() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_alloc_popup_win() -> *mut win_T;
}
extern "C" {
    pub fn win_init_popup_win(wp: *mut win_T, buf: *mut buf_T);
}
extern "C" {
    pub fn win_init_size();
}
extern "C" {
    pub fn free_tabpage(tp: *mut tabpage_T);
}
extern "C" {
    pub fn win_new_tabpage(after: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn may_open_tabpage() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_tabpages(maxcount: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valid_tabpage(tpc: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valid_tabpage_win(tpc: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close_tabpage(tab: *mut tabpage_T);
}
extern "C" {
    pub fn find_tabpage(n: ::std::os::raw::c_int) -> *mut tabpage_T;
}
extern "C" {
    pub fn tabpage_index(ftp: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn goto_tabpage(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn goto_tabpage_tp(
        tp: *mut tabpage_T,
        trigger_enter_autocmds: ::std::os::raw::c_int,
        trigger_leave_autocmds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn goto_tabpage_win(tp: *mut tabpage_T, wp: *mut win_T);
}
extern "C" {
    pub fn tabpage_move(nr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_goto(wp: *mut win_T);
}
extern "C" {
    pub fn win_find_nr(winnr: ::std::os::raw::c_int) -> *mut win_T;
}
extern "C" {
    pub fn win_find_tabpage(win: *mut win_T) -> *mut tabpage_T;
}
extern "C" {
    pub fn win_vert_neighbor(
        tp: *mut tabpage_T,
        wp: *mut win_T,
        up: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> *mut win_T;
}
extern "C" {
    pub fn win_horz_neighbor(
        tp: *mut tabpage_T,
        wp: *mut win_T,
        left: ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> *mut win_T;
}
extern "C" {
    pub fn win_enter(wp: *mut win_T, undo_sync: ::std::os::raw::c_int);
}
extern "C" {
    pub fn buf_jump_open_win(buf: *mut buf_T) -> *mut win_T;
}
extern "C" {
    pub fn buf_jump_open_tab(buf: *mut buf_T) -> *mut win_T;
}
extern "C" {
    pub fn win_unlisted(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_free_popup(win: *mut win_T);
}
extern "C" {
    pub fn win_append(after: *mut win_T, wp: *mut win_T);
}
extern "C" {
    pub fn win_remove(wp: *mut win_T, tp: *mut tabpage_T);
}
extern "C" {
    pub fn win_alloc_lines(wp: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_free_lsize(wp: *mut win_T);
}
extern "C" {
    pub fn shell_new_rows();
}
extern "C" {
    pub fn shell_new_columns();
}
extern "C" {
    pub fn win_size_save(gap: *mut garray_T);
}
extern "C" {
    pub fn win_size_restore(gap: *mut garray_T);
}
extern "C" {
    pub fn win_comp_pos() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_setheight(height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_setheight_win(height: ::std::os::raw::c_int, win: *mut win_T);
}
extern "C" {
    pub fn win_setwidth(width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_setwidth_win(width: ::std::os::raw::c_int, wp: *mut win_T);
}
extern "C" {
    pub fn win_setminheight();
}
extern "C" {
    pub fn win_setminwidth();
}
extern "C" {
    pub fn win_drag_status_line(dragwin: *mut win_T, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_drag_vsep_line(dragwin: *mut win_T, offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_fraction(wp: *mut win_T);
}
extern "C" {
    pub fn win_new_height(wp: *mut win_T, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn scroll_to_fraction(wp: *mut win_T, prev_height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_new_width(wp: *mut win_T, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn win_comp_scroll(wp: *mut win_T);
}
extern "C" {
    pub fn command_height();
}
extern "C" {
    pub fn last_status(morewin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tabline_height() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn min_rows() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn only_one_window() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_lnums(do_curwin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reset_lnums();
}
extern "C" {
    pub fn make_snapshot(idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn restore_snapshot(idx: ::std::os::raw::c_int, close_curwin: ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_win(
        save_curwin: *mut *mut win_T,
        save_curtab: *mut *mut tabpage_T,
        win: *mut win_T,
        tp: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_win_noblock(
        save_curwin: *mut *mut win_T,
        save_curtab: *mut *mut tabpage_T,
        win: *mut win_T,
        tp: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_win(
        save_curwin: *mut win_T,
        save_curtab: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn restore_win_noblock(
        save_curwin: *mut win_T,
        save_curtab: *mut tabpage_T,
        no_display: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_buffer(save_curbuf: *mut bufref_T, buf: *mut buf_T);
}
extern "C" {
    pub fn restore_buffer(save_curbuf: *mut bufref_T);
}
extern "C" {
    pub fn win_hasvertsplit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_add(
        wp: *mut win_T,
        grp: *mut char_u,
        pat: *mut char_u,
        prio: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
        pos_list: *mut list_T,
        conceal_char: *mut char_u,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_delete(
        wp: *mut win_T,
        id: ::std::os::raw::c_int,
        perr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_matches(wp: *mut win_T);
}
extern "C" {
    pub fn get_match(wp: *mut win_T, id: ::std::os::raw::c_int) -> *mut matchitem_T;
}
extern "C" {
    pub fn get_win_number(wp: *mut win_T, first_win: *mut win_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_tab_number(tp: *mut tabpage_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_getid(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_gotoid(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_id2tabwin(argvars: *mut typval_T, list: *mut list_T);
}
extern "C" {
    pub fn win_id2wp(id: ::std::os::raw::c_int) -> *mut win_T;
}
extern "C" {
    pub fn win_id2win(argvars: *mut typval_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win_findbuf(argvars: *mut typval_T, list: *mut list_T);
}
extern "C" {
    pub fn get_framelayout(fr: *mut frame_T, l: *mut list_T, outer: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ch_logfile(fname: *mut char_u, opt: *mut char_u);
}
extern "C" {
    pub fn ch_log_active() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_channel() -> *mut channel_T;
}
extern "C" {
    pub fn has_any_channel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_unref(channel: *mut channel_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unused_channels_contents(
        copyID: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unused_channels(copyID: ::std::os::raw::c_int, mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_gui_register_all();
}
extern "C" {
    pub fn channel_open(
        hostname: *mut ::std::os::raw::c_char,
        port_in: ::std::os::raw::c_int,
        waittime: ::std::os::raw::c_int,
        nb_close_cb: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> *mut channel_T;
}
extern "C" {
    pub fn channel_open_func(argvars: *mut typval_T) -> *mut channel_T;
}
extern "C" {
    pub fn channel_set_pipes(channel: *mut channel_T, in_: sock_T, out: sock_T, err: sock_T);
}
extern "C" {
    pub fn channel_set_job(channel: *mut channel_T, job: *mut job_T, options: *mut jobopt_T);
}
extern "C" {
    pub fn channel_set_options(channel: *mut channel_T, opt: *mut jobopt_T);
}
extern "C" {
    pub fn channel_set_req_callback(
        channel: *mut channel_T,
        part: ch_part_T,
        callback: *mut callback_T,
        id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn channel_buffer_free(buf: *mut buf_T);
}
extern "C" {
    pub fn channel_write_any_lines();
}
extern "C" {
    pub fn channel_write_new_lines(buf: *mut buf_T);
}
extern "C" {
    pub fn channel_peek(channel: *mut channel_T, part: ch_part_T) -> *mut readq_T;
}
extern "C" {
    pub fn channel_first_nl(node: *mut readq_T) -> *mut char_u;
}
extern "C" {
    pub fn channel_get(
        channel: *mut channel_T,
        part: ch_part_T,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn channel_consume(channel: *mut channel_T, part: ch_part_T, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_collapse(
        channel: *mut channel_T,
        part: ch_part_T,
        want_nl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_can_write_to(channel: *mut channel_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_is_open(channel: *mut channel_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_has_readahead(channel: *mut channel_T, part: ch_part_T)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_status(
        channel: *mut channel_T,
        req_part: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn channel_info(channel: *mut channel_T, dict: *mut dict_T);
}
extern "C" {
    pub fn channel_close(channel: *mut channel_T, invoke_close_cb: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_close_in(channel: *mut channel_T);
}
extern "C" {
    pub fn channel_clear(channel: *mut channel_T);
}
extern "C" {
    pub fn channel_free_all();
}
extern "C" {
    pub fn common_channel_read(
        argvars: *mut typval_T,
        rettv: *mut typval_T,
        raw: ::std::os::raw::c_int,
        blob: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn channel_fd2channel(fd: sock_T, partp: *mut ch_part_T) -> *mut channel_T;
}
extern "C" {
    pub fn channel_handle_events(only_keep_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_any_keep_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_set_nonblock(channel: *mut channel_T, part: ch_part_T);
}
extern "C" {
    pub fn channel_send(
        channel: *mut channel_T,
        part: ch_part_T,
        buf_arg: *mut char_u,
        len_arg: ::std::os::raw::c_int,
        fun: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ch_expr_common(
        argvars: *mut typval_T,
        rettv: *mut typval_T,
        eval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ch_raw_common(argvars: *mut typval_T, rettv: *mut typval_T, eval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn channel_poll_setup(
        nfd_in: ::std::os::raw::c_int,
        fds_in: *mut ::std::os::raw::c_void,
        towait: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_poll_check(
        ret_in: ::std::os::raw::c_int,
        fds_in: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_select_setup(
        maxfd_in: ::std::os::raw::c_int,
        rfds_in: *mut ::std::os::raw::c_void,
        wfds_in: *mut ::std::os::raw::c_void,
        tv: *mut timeval,
        tvp: *mut *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_select_check(
        ret_in: ::std::os::raw::c_int,
        rfds_in: *mut ::std::os::raw::c_void,
        wfds_in: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_parse_messages() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_any_readahead() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_ref_in_channel(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn channel_part_send(channel: *mut channel_T) -> ch_part_T;
}
extern "C" {
    pub fn channel_part_read(channel: *mut channel_T) -> ch_part_T;
}
extern "C" {
    pub fn channel_get_mode(channel: *mut channel_T, part: ch_part_T) -> ch_mode_T;
}
extern "C" {
    pub fn channel_get_timeout(channel: *mut channel_T, part: ch_part_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear_job_options(opt: *mut jobopt_T);
}
extern "C" {
    pub fn free_job_options(opt: *mut jobopt_T);
}
extern "C" {
    pub fn get_job_options(
        tv: *mut typval_T,
        opt: *mut jobopt_T,
        supported: ::std::os::raw::c_int,
        supported2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_channel_arg(
        tv: *mut typval_T,
        check_open: ::std::os::raw::c_int,
        reading: ::std::os::raw::c_int,
        part: ch_part_T,
    ) -> *mut channel_T;
}
extern "C" {
    pub fn job_free_all();
}
extern "C" {
    pub fn job_any_running() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn win32_build_cmd(l: *mut list_T, gap: *mut garray_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_cleanup(job: *mut job_T);
}
extern "C" {
    pub fn set_ref_in_job(copyID: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_unref(job: *mut job_T);
}
extern "C" {
    pub fn free_unused_jobs_contents(
        copyID: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_unused_jobs(copyID: ::std::os::raw::c_int, mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn job_alloc() -> *mut job_T;
}
extern "C" {
    pub fn job_set_options(job: *mut job_T, opt: *mut jobopt_T);
}
extern "C" {
    pub fn job_stop_on_exit();
}
extern "C" {
    pub fn has_pending_job() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_check_ended() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_start(
        argvars: *mut typval_T,
        argv_arg: *mut *mut ::std::os::raw::c_char,
        opt_arg: *mut jobopt_T,
        is_terminal: ::std::os::raw::c_int,
    ) -> *mut job_T;
}
extern "C" {
    pub fn job_status(job: *mut job_T) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn job_info(job: *mut job_T, dict: *mut dict_T);
}
extern "C" {
    pub fn job_info_all(l: *mut list_T);
}
extern "C" {
    pub fn job_stop(
        job: *mut job_T,
        argvars: *mut typval_T,
        type_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn invoke_prompt_callback();
}
extern "C" {
    pub fn invoke_prompt_interrupt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ch_log(ch: *mut channel_T, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn setup_slavepty(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_openpty(ttyn: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mch_isatty(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mac_string_convert(
        ptr: *mut char_u,
        len: ::std::os::raw::c_int,
        lenp: *mut ::std::os::raw::c_int,
        fail_on_error: ::std::os::raw::c_int,
        from_enc: ::std::os::raw::c_int,
        to_enc: ::std::os::raw::c_int,
        unconvlenp: *mut ::std::os::raw::c_int,
    ) -> *mut char_u;
}
extern "C" {
    pub fn macroman2enc(
        ptr: *mut char_u,
        sizep: *mut ::std::os::raw::c_long,
        real_size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enc2macroman(
        from: *mut char_u,
        fromlen: usize,
        to: *mut char_u,
        tolenp: *mut ::std::os::raw::c_int,
        maxtolen: ::std::os::raw::c_int,
        rest: *mut char_u,
        restlenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mac_conv_init();
}
extern "C" {
    pub fn mac_conv_cleanup();
}
extern "C" {
    pub fn mac_utf16_to_enc(
        from: *mut ::std::os::raw::c_ushort,
        fromLen: usize,
        actualLen: *mut usize,
    ) -> *mut char_u;
}
extern "C" {
    pub fn mac_enc_to_utf16(
        from: *mut char_u,
        fromLen: usize,
        actualLen: *mut usize,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn mac_enc_to_cfstring(from: *mut char_u, fromLen: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mac_precompose_path(
        decompPath: *mut char_u,
        decompLen: usize,
        precompLen: *mut usize,
    ) -> *mut char_u;
}
extern "C" {
    pub fn mac_lang_init();
}
extern "C" {
    pub static mut Rows: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut Columns: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut ScreenLines: *mut schar_T;
}
extern "C" {
    pub static mut ScreenAttrs: *mut sattr_T;
}
extern "C" {
    pub static mut LineOffset: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut LineWraps: *mut char_u;
}
extern "C" {
    pub static mut autoCommandCallback: AutoCommandCallback;
}
extern "C" {
    pub static mut bufferUpdateCallback: BufferUpdateCallback;
}
extern "C" {
    pub static mut clearCallback: ClearCallback;
}
extern "C" {
    pub static mut clipboardGetCallback: ClipboardGetCallback;
}
extern "C" {
    pub static mut cursorAddCallback: CursorAddCallback;
}
extern "C" {
    pub static mut customCommandCallback: CustomCommandCallback;
}
extern "C" {
    pub static mut fileWriteFailureCallback: FileWriteFailureCallback;
}
extern "C" {
    pub static mut directoryChangedCallback: DirectoryChangedCallback;
}
extern "C" {
    pub static mut formatCallback: FormatCallback;
}
extern "C" {
    pub static mut gotoCallback: GotoCallback;
}
extern "C" {
    pub static mut tabPageCallback: TabPageCallback;
}
extern "C" {
    pub static mut displayIntroCallback: VoidCallback;
}
extern "C" {
    pub static mut displayVersionCallback: VoidCallback;
}
extern "C" {
    pub static mut autoIndentCallback: AutoIndentCallback;
}
extern "C" {
    pub static mut colorSchemeChangedCallback: ColorSchemeChangedCallback;
}
extern "C" {
    pub static mut colorSchemeCompletionCallback: ColorSchemeCompletionCallback;
}
extern "C" {
    pub static mut cursorMoveScreenLineCallback: CursorMoveScreenLineCallback;
}
extern "C" {
    pub static mut cursorMoveScreenPositionCallback: CursorMoveScreenPositionCallback;
}
extern "C" {
    pub static mut functionGetCharCallback: FunctionGetCharCallback;
}
extern "C" {
    pub static mut inputMapCallback: InputMapCallback;
}
extern "C" {
    pub static mut inputUnmapCallback: InputUnmapCallback;
}
extern "C" {
    pub static mut messageCallback: MessageCallback;
}
extern "C" {
    pub static mut outputCallback: OutputCallback;
}
extern "C" {
    pub static mut macroStartRecordCallback: MacroStartRecordCallback;
}
extern "C" {
    pub static mut macroStopRecordCallback: MacroStopRecordCallback;
}
extern "C" {
    pub static mut optionSetCallback: OptionSetCallback;
}
extern "C" {
    pub static mut quitCallback: QuitCallback;
}
extern "C" {
    pub static mut scrollCallback: ScrollCallback;
}
extern "C" {
    pub static mut terminalCallback: TerminalCallback;
}
extern "C" {
    pub static mut toggleCommentsCallback: ToggleCommentsCallback;
}
extern "C" {
    pub static mut stopSearchHighlightCallback: VoidCallback;
}
extern "C" {
    pub static mut unhandledEscapeCallback: VoidCallback;
}
extern "C" {
    pub static mut windowSplitCallback: WindowSplitCallback;
}
extern "C" {
    pub static mut windowMovementCallback: WindowMovementCallback;
}
extern "C" {
    pub static mut yankCallback: YankCallback;
}
extern "C" {
    pub static mut state_current: *mut sm_T;
}
extern "C" {
    pub static mut ScreenLinesUC: *mut u8char_T;
}
extern "C" {
    pub static mut ScreenLinesC: [*mut u8char_T; 6usize];
}
extern "C" {
    pub static mut Screen_mco: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ScreenLines2: *mut schar_T;
}
extern "C" {
    pub static mut TabPageIdxs: *mut ::std::os::raw::c_short;
}
extern "C" {
    pub static mut screen_Rows: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut screen_Columns: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mod_mask: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdline_row: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redraw_cmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redraw_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clear_cmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mode_displayed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_win_do_lines_ins: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdline_star: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ccline: cmdline_info;
}
extern "C" {
    pub static mut exec_from_reg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut screen_cleared: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut dollar_vcol: colnr_T;
}
extern "C" {
    pub static mut cmdmsg_rl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_row: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scrolled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scrolled_ign: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_msg: *mut char_u;
}
extern "C" {
    pub static mut keep_msg_attr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_msg_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_fileinfo: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scroll: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_didout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_didany: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_nowait: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut info_message: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_hist_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_clr_eos: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_skip: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_severe: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_endif: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vimvardict: dict_T;
}
extern "C" {
    pub static mut globvardict: dict_T;
}
extern "C" {
    pub static mut did_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut called_vim_beep: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_uncaught_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_emsg_syntax: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut called_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_exitval: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_on_display: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut rc_did_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut quit_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut newline_on_exit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut intr_char: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_keep_indent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vgetc_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut didset_vim: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut didset_vimruntime: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lines_left: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_no_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sourcing_name: *mut char_u;
}
extern "C" {
    pub static mut sourcing_lnum: linenr_T;
}
extern "C" {
    pub static mut ex_nesting_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_break_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_did_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_tick: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_backtrace_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut do_profiling: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut current_exception: *mut except_T;
}
extern "C" {
    pub static mut did_throw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_rethrow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut check_cstack: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut trylevel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut force_abort: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_list: *mut *mut msglist;
}
extern "C" {
    pub static mut suppress_errthrow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut caught_stack: *mut except_T;
}
extern "C" {
    pub static mut may_garbage_collect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut want_garbage_collect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut garbage_collect_at_exit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut current_sctx: sctx_T;
}
extern "C" {
    pub static mut did_source_packages: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut hash_removed: char_u;
}
extern "C" {
    pub static mut scroll_region: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut t_colors: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut highlight_match: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut search_match_lines: linenr_T;
}
extern "C" {
    pub static mut search_match_endcol: colnr_T;
}
extern "C" {
    pub static mut search_first_line: linenr_T;
}
extern "C" {
    pub static mut search_last_line: linenr_T;
}
extern "C" {
    pub static mut no_smartcase: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut highlight_attr: [::std::os::raw::c_int; 46usize];
}
extern "C" {
    pub static mut cterm_normal_fg_color: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cterm_normal_fg_bold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cterm_normal_bg_color: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_no_enter: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_no_leave: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut modified_was_set: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut au_did_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut au_new_curbuf: bufref_T;
}
extern "C" {
    pub static mut au_pending_free_buf: *mut buf_T;
}
extern "C" {
    pub static mut au_pending_free_win: *mut win_T;
}
extern "C" {
    pub static mut diff_context: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut diff_foldcolumn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut diff_need_scrollbind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut updating_screen: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clip_unnamed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clip_unnamed_saved: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut firstwin: *mut win_T;
}
extern "C" {
    pub static mut lastwin: *mut win_T;
}
extern "C" {
    pub static mut prevwin: *mut win_T;
}
extern "C" {
    pub static mut curwin: *mut win_T;
}
extern "C" {
    pub static mut aucmd_win: *mut win_T;
}
extern "C" {
    pub static mut aucmd_win_used: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut topframe: *mut frame_T;
}
extern "C" {
    pub static mut first_tabpage: *mut tabpage_T;
}
extern "C" {
    pub static mut curtab: *mut tabpage_T;
}
extern "C" {
    pub static mut redraw_tabline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut firstbuf: *mut buf_T;
}
extern "C" {
    pub static mut lastbuf: *mut buf_T;
}
extern "C" {
    pub static mut curbuf: *mut buf_T;
}
extern "C" {
    pub static mut mf_dont_release: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut global_alist: alist_T;
}
extern "C" {
    pub static mut max_alist_id: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut arg_had_last: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ru_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sc_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vim_tempdir: *mut char_u;
}
extern "C" {
    pub static mut starting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut really_exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut v_dying: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut stdout_isatty: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut test_autochdir: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut full_screen: sig_atomic_t;
}
extern "C" {
    pub static mut restricted: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut secure: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut textlock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curbuf_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut allbuf_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sandbox: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut silent_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual: pos_T;
}
extern "C" {
    pub static mut VIsual_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_select: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_reselect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redo_VIsual_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_ai: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ai_col: colnr_T;
}
extern "C" {
    pub static mut end_comment_pending: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_syncbind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut saved_cursor: pos_T;
}
extern "C" {
    pub static mut Insstart: pos_T;
}
extern "C" {
    pub static mut Insstart_orig: pos_T;
}
extern "C" {
    pub static mut orig_line_count: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vr_lines_changed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_dbcs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_unicode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_utf8: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_latin1like: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut has_mbyte: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mb_bytelen_tab: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static mut input_conv: vimconv_T;
}
extern "C" {
    pub static mut output_conv: vimconv_T;
}
extern "C" {
    pub static mut mb_ptr2len:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_ptr2len_len: ::std::option::Option<
        unsafe extern "C" fn(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2len: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2bytes: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_ptr2cells:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_ptr2cells_len: ::std::option::Option<
        unsafe extern "C" fn(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2cells: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_off2cells: ::std::option::Option<
        unsafe extern "C" fn(
            off: ::std::os::raw::c_uint,
            max_off: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_ptr2char:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_head_off: ::std::option::Option<
        unsafe extern "C" fn(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut State: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut finish_op: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opcount: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut motion_force: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exmode_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_no_reprint: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut reg_recording: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut reg_executing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_mapping: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_zero_mapping: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut allow_keys: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_u_sync: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut u_sync_once: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut restart_edit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut arrow_used: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ins_at_eol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_abbr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exe_name: *mut char_u;
}
extern "C" {
    pub static mut mapped_ctrl_c: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ctrl_c_interrupts: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdmod: cmdmod_T;
}
extern "C" {
    pub static mut msg_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_noredir: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmd_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut swap_exists_action: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut swap_exists_did_quit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut IObuff: *mut char_u;
}
extern "C" {
    pub static mut NameBuff: *mut char_u;
}
extern "C" {
    pub static mut msg_buf: [::std::os::raw::c_char; 480usize];
}
extern "C" {
    pub static mut RedrawingDisabled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut readonlymode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut recoverymode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut typebuf: typebuf_T;
}
extern "C" {
    pub static mut ex_normal_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_normal_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_script: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut stop_insert_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut KeyTyped: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut KeyStuffed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut maptick: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut must_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut skip_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut do_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_highlight_changed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut scriptin: [*mut FILE; 15usize];
}
extern "C" {
    pub static mut curscript: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut scriptout: *mut FILE;
}
extern "C" {
    pub static mut read_cmd_fd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut got_int: sig_atomic_t;
}
extern "C" {
    pub static mut termcap_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cur_tmode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut bangredo: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut searchcmdlen: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_outofmem_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_swapwrite_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut undo_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut global_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut listcmd_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_start_insertmode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut last_cmdline: *mut char_u;
}
extern "C" {
    pub static mut repeat_cmdline: *mut char_u;
}
extern "C" {
    pub static mut new_last_cmdline: *mut char_u;
}
extern "C" {
    pub static mut autocmd_fname: *mut char_u;
}
extern "C" {
    pub static mut autocmd_fname_full: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_bufnr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_match: *mut char_u;
}
extern "C" {
    pub static mut did_cursorhold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut last_cursormoved: pos_T;
}
extern "C" {
    pub static mut postponed_split: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut postponed_split_flags: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut postponed_split_tab: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut g_do_tagpreview: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut g_tag_at_cursor: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut replace_offset: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut escape_chars: *mut char_u;
}
extern "C" {
    pub static mut keep_help_flag: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut empty_option: *mut char_u;
}
extern "C" {
    pub static mut redir_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_fd: *mut FILE;
}
extern "C" {
    pub static mut redir_reg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_vname: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_execute: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut langmap_mapchar: [char_u; 256usize];
}
extern "C" {
    pub static mut breakat_flags: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static mut Version: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut longVersion: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut default_vim_dir: *mut char_u;
}
extern "C" {
    pub static mut default_vimruntime_dir: *mut char_u;
}
extern "C" {
    pub static mut all_cflags: *mut char_u;
}
extern "C" {
    pub static mut all_lflags: *mut char_u;
}
extern "C" {
    pub static mut compiled_user: *mut char_u;
}
extern "C" {
    pub static mut compiled_sys: *mut char_u;
}
extern "C" {
    pub static mut globaldir: *mut char_u;
}
extern "C" {
    pub static mut lcs_eol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_ext: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_prec: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_nbsp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_space: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab1: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab2: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab3: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_trail: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_stl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_stlnc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_vert: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_fold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_diff: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_fold_update: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut km_stopsel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut km_startsel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_lines_msg: [char_u; 0usize];
}
extern "C" {
    pub static mut sub_nsubs: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut sub_nlines: linenr_T;
}
extern "C" {
    pub static mut wim_flags: [char_u; 4usize];
}
extern "C" {
    pub static mut no_hlsearch: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut typebuf_was_filled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut term_is_xterm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut virtual_op: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut e_abort: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_argreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_backslash: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_curdir: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endif: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endtry: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endwhile: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endfor: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_while: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_for: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_exists: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_failed: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_internal: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_intern2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_interr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invaddr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invarg2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_duparg2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invargval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invargNval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invexpr2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invrange: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invcmd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_isadir2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_libcall: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_fsync: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_markinval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_marknotset: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_modifiable: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nesting: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noalt: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noabbr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nobang: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nogvim: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nofarsi: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nogroup: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noinstext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nolastcmd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomap: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomatch: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomatch2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noname: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nopresub: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noprev: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noprevre: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_norange: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noroom: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notcreate: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notmp: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notopen: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notread: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_null: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_number_exp: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_openerrf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_outofmem: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_patnotf2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_positive: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_prev_dir: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_quickfix: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_loclist: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_re_damg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_re_corr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonly: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonlyvar: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonlysbx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_emptykey: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dictreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listidx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_blobidx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalblob: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomanyarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dictkey: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listblobreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listdictarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listdictblobarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readerrf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_sandbox: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_secure: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_screenmode: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_scroll: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_shellempty: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_swapclose: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_tagstack: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toocompl: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_longname: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomsbra: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomany: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_trailing: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_umark: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_wildexpand: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_winheight: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_winwidth: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_write: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_zerocount: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_usingsid: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_maxmempat: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_emptybuf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nobufnr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalpat: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_bufloaded: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalidreg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dirnotf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_au_recursive: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut top_bot_msg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut bot_top_msg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut starttime: time_T;
}
extern "C" {
    pub static mut time_fd: *mut FILE;
}
extern "C" {
    pub static mut vim_ignored: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vim_ignoredp: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut alloc_fail_id: alloc_id_T;
}
extern "C" {
    pub static mut alloc_fail_countdown: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut alloc_fail_repeat: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_char_avail_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_redraw_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_redraw_flag_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut nfa_fail_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_query_mouse_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut in_free_unref_items: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_add_timer: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timer_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut time_for_testing: time_T;
}
extern "C" {
    pub static mut did_echo_string_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut eval_lavars_used: *mut ::std::os::raw::c_int;
}
pub type elapsed_T = timeval;
extern "C" {
    pub fn elapsed(start_tv: *mut timeval) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vimInit(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Buffer Methods"]
    pub fn vimBufferOpen(
        ffname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferLoad(
        ffname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferNew(flags: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferCheckIfChanged(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetById(id: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferGetCurrent() -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferSetCurrent(buf: *mut buf_T);
}
extern "C" {
    pub fn vimBufferGetFilename(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetFiletype(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetId(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetLastChangedTick(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vimBufferGetLine(buf: *mut buf_T, lnum: linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetLineCount(buf: *mut buf_T) -> usize;
}
extern "C" {
    pub fn vimBufferSetLines(
        buf: *mut buf_T,
        start: linenr_T,
        end: linenr_T,
        lines: *mut *mut char_u,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vimBufferGetModified(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetModifiable(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetModifiable(buf: *mut buf_T, modifiable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimBufferGetFileFormat(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetFileFormat(buf: *mut buf_T, fileformat: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimBufferGetReadOnly(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetReadOnly(buf: *mut buf_T, modifiable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimSetBufferUpdateCallback(bufferUpdate: BufferUpdateCallback);
}
extern "C" {
    #[doc = " Autocommands"]
    pub fn vimSetAutoCommandCallback(autoCommandDispatch: AutoCommandCallback);
}
extern "C" {
    #[doc = " Commandline"]
    pub fn vimCommandLineGetType() -> char_u;
}
extern "C" {
    pub fn vimCommandLineGetText() -> *mut char_u;
}
extern "C" {
    pub fn vimCommandLineGetPosition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimCommandLineGetCompletions(
        completions: *mut *mut *mut char_u,
        count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vimSetCustomCommandHandler(customCommandHandler: CustomCommandCallback);
}
extern "C" {
    #[doc = " vimEval\n\n Evaluate a string as vim script, and return the result as string.\n Callee is responsible for freeing the command as well as the result."]
    pub fn vimEval(str_: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vimSetFunctionGetCharCallback(callback: FunctionGetCharCallback);
}
extern "C" {
    #[doc = " Cursor Methods"]
    pub fn vimCursorGetColumn() -> colnr_T;
}
extern "C" {
    pub fn vimCursorGetColumnWant() -> colnr_T;
}
extern "C" {
    pub fn vimCursorSetColumnWant(curswant: colnr_T);
}
extern "C" {
    pub fn vimCursorGetLine() -> linenr_T;
}
extern "C" {
    pub fn vimCursorGetPosition() -> pos_T;
}
extern "C" {
    pub fn vimCursorSetPosition(pos: pos_T);
}
extern "C" {
    pub fn vimSetCursorAddCallback(cursorAddCallback: CursorAddCallback);
}
extern "C" {
    #[doc = " vimCursorGetDesiredColumn\n\n Get the column that we'd like to be at - used to stay in the same\n column for up/down cursor motions."]
    pub fn vimCursorGetDesiredColumn() -> colnr_T;
}
extern "C" {
    #[doc = " vimSetCursorMoveScreenLineCallback\n\n Callback when the cursor will be moved via screen lines (H, M, L).\n Because the libvim-consumer is responsible for managing the view,\n libvim needs information about the view to correctly handle these motions."]
    pub fn vimSetCursorMoveScreenLineCallback(
        cursorMoveScreenLineCallback: CursorMoveScreenLineCallback,
    );
}
extern "C" {
    #[doc = " vimSetCursorMoveScreenLineCallback\n\n Callback when the cursor will be moved via screen position (gj, gk).\n Because the libvim-consumer is responsible for managing the view,\n libvim needs information about the view to correctly handle these motions."]
    pub fn vimSetCursorMoveScreenPositionCallback(
        cursorMoveScreenPositionCallback: CursorMoveScreenPositionCallback,
    );
}
extern "C" {
    #[doc = " File I/O"]
    pub fn vimSetFileWriteFailureCallback(fileWriteFailureCallback: FileWriteFailureCallback);
}
extern "C" {
    #[doc = " vimInput\n\n vimInput(input) passes the string, verbatim, to vim to be processed,\n without replacing term-codes. This means strings like \"<LEFT>\" are\n handled literally. This function handles Unicode text correctly."]
    pub fn vimInput(input: *mut char_u);
}
extern "C" {
    #[doc = " vimKey\n\n vimKey(input) passes a string and escapes termcodes - so a\n a string like \"<LEFT>\" will first be replaced with the appropriate\n term-code, and handled."]
    pub fn vimKey(key: *mut char_u);
}
extern "C" {
    #[doc = " vimExecute\n\n vimExecute(cmd) executes a command as if it was typed at the command-line.\n\n Example: vimExecute(\"echo 'hello!');"]
    pub fn vimExecute(cmd: *mut char_u);
}
extern "C" {
    pub fn vimExecuteLines(lines: *mut *mut char_u, lineCount: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Auto-indent"]
    pub fn vimSetAutoIndentCallback(callback: AutoIndentCallback) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Colorschemes"]
    pub fn vimColorSchemeSetChangedCallback(callback: ColorSchemeChangedCallback);
}
extern "C" {
    pub fn vimColorSchemeSetCompletionCallback(callback: ColorSchemeCompletionCallback);
}
extern "C" {
    #[doc = " Mapping"]
    pub fn vimSetInputMapCallback(mapCallback: InputMapCallback);
}
extern "C" {
    pub fn vimSetInputUnmapCallback(unmapCallback: InputUnmapCallback);
}
extern "C" {
    #[doc = " Messages"]
    pub fn vimSetMessageCallback(messageCallback: MessageCallback);
}
extern "C" {
    #[doc = " Misc"]
    pub fn vimSetClearCallback(clearCallback: ClearCallback);
}
extern "C" {
    pub fn vimSetOutputCallback(outputCallback: OutputCallback);
}
extern "C" {
    pub fn vimSetFormatCallback(formatCallback: FormatCallback);
}
extern "C" {
    pub fn vimSetGotoCallback(gotoCallback: GotoCallback);
}
extern "C" {
    pub fn vimSetTabPageCallback(tabPageCallback: TabPageCallback);
}
extern "C" {
    pub fn vimSetDirectoryChangedCallback(callback: DirectoryChangedCallback);
}
extern "C" {
    pub fn vimSetOptionSetCallback(callback: OptionSetCallback);
}
extern "C" {
    #[doc = " Operators"]
    pub fn vimSetToggleCommentsCallback(callback: ToggleCommentsCallback);
}
extern "C" {
    pub fn vimSetQuitCallback(callback: QuitCallback);
}
extern "C" {
    pub fn vimSetScrollCallback(callback: ScrollCallback);
}
extern "C" {
    pub fn vimSetUnhandledEscapeCallback(callback: VoidCallback);
}
extern "C" {
    #[doc = " Macros"]
    pub fn vimMacroSetStartRecordCallback(callback: MacroStartRecordCallback);
}
extern "C" {
    pub fn vimMacroSetStopRecordCallback(callback: MacroStopRecordCallback);
}
extern "C" {
    #[doc = " Options"]
    pub fn vimOptionSetTabSize(tabSize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimOptionSetInsertSpaces(insertSpaces: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimOptionGetInsertSpaces() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimOptionGetTabSize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Registers"]
    pub fn vimRegisterGet(
        reg_name: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
    );
}
extern "C" {
    #[doc = " Undo"]
    pub fn vimUndoSaveCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimUndoSaveRegion(start_lnum: linenr_T, end_lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimUndoSync(force: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Visual Mode"]
    pub fn vimVisualGetType() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimVisualSetType(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimVisualIsActive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimSelectIsActive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimVisualGetRange(startPos: *mut pos_T, endPos: *mut pos_T);
}
extern "C" {
    pub fn vimVisualSetStart(startPos: pos_T);
}
extern "C" {
    #[doc = " Search"]
    pub fn vimSearchGetMatchingPair(initc: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn vimSearchGetHighlights(
        buf: *mut buf_T,
        start_lnum: linenr_T,
        end_lnum: linenr_T,
        num_highlights: *mut ::std::os::raw::c_int,
        highlights: *mut *mut searchHighlight_T,
    );
}
extern "C" {
    pub fn vimSearchGetPattern() -> *mut char_u;
}
extern "C" {
    pub fn vimSetStopSearchHighlightCallback(callback: VoidCallback);
}
extern "C" {
    #[doc = " Terminal"]
    pub fn vimSetTerminalCallback(callback: TerminalCallback);
}
extern "C" {
    #[doc = " Window"]
    pub fn vimWindowGetWidth() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetHeight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetTopLine() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetLeftColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowSetWidth(width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimWindowSetHeight(height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimWindowSetTopLeft(top: ::std::os::raw::c_int, left: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimSetWindowSplitCallback(callback: WindowSplitCallback);
}
extern "C" {
    pub fn vimSetWindowMovementCallback(callback: WindowMovementCallback);
}
extern "C" {
    #[doc = " Misc"]
    pub fn vimSetClipboardGetCallback(callback: ClipboardGetCallback);
}
extern "C" {
    pub fn vimGetMode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimGetSubMode() -> subMode_T;
}
extern "C" {
    pub fn vimGetPendingOperator(pendingOp: *mut pendingOp_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimSetYankCallback(callback: YankCallback);
}
extern "C" {
    pub fn vimSetDisplayIntroCallback(callback: VoidCallback);
}
extern "C" {
    pub fn vimSetDisplayVersionCallback(callback: VoidCallback);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
