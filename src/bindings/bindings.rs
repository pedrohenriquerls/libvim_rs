/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const ROOT_UID: u32 = 0;
pub const MAX_MSG_HIST_LEN: u32 = 200;
pub const SESSION_FILE: &[u8; 12usize] = b"Session.vim\0";
pub const SYS_OPTWIN_FILE: &[u8; 23usize] = b"$VIMRUNTIME/optwin.vim\0";
pub const RUNTIME_DIRNAME: &[u8; 8usize] = b"runtime\0";
pub const VIMPACKAGE: &[u8; 4usize] = b"vim\0";
pub const MAXPATHL: u32 = 256;
pub const NUMBUFLEN: u32 = 65;
pub const STR2NR_BIN: u32 = 1;
pub const STR2NR_OCT: u32 = 2;
pub const STR2NR_HEX: u32 = 4;
pub const STR2NR_ALL: u32 = 7;
pub const STR2NR_FORCE: u32 = 8;
pub const SCANF_HEX_LONG_U: &[u8; 4usize] = b"%lx\0";
pub const SCANF_DECIMAL_LONG_U: &[u8; 4usize] = b"%lu\0";
pub const PRINTF_HEX_LONG_U: &[u8; 6usize] = b"0x%lx\0";
pub const PRINTF_DECIMAL_LONG_U: &[u8; 4usize] = b"%lu\0";
pub const MAX_TYPENR: u32 = 65535;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const NUL: u8 = 0u8;
pub const BELL: u8 = 7u8;
pub const BS: u8 = 8u8;
pub const TAB: u8 = 9u8;
pub const NL: u8 = 10u8;
pub const FF: u8 = 12u8;
pub const CAR: u8 = 13u8;
pub const ESC: u8 = 27u8;
pub const ESC_STR_nc: &[u8; 2usize] = b"\x1B\0";
pub const DEL: u32 = 127;
pub const POUND: u32 = 163;
pub const CTRL_F_STR: &[u8; 2usize] = b"\x06\0";
pub const CTRL_H_STR: &[u8; 2usize] = b"\x08\0";
pub const CTRL_V_STR: &[u8; 2usize] = b"\x16\0";
pub const Ctrl_AT: u32 = 0;
pub const Ctrl_A: u32 = 1;
pub const Ctrl_B: u32 = 2;
pub const Ctrl_C: u32 = 3;
pub const Ctrl_D: u32 = 4;
pub const Ctrl_E: u32 = 5;
pub const Ctrl_F: u32 = 6;
pub const Ctrl_G: u32 = 7;
pub const Ctrl_H: u32 = 8;
pub const Ctrl_I: u32 = 9;
pub const Ctrl_J: u32 = 10;
pub const Ctrl_K: u32 = 11;
pub const Ctrl_L: u32 = 12;
pub const Ctrl_M: u32 = 13;
pub const Ctrl_N: u32 = 14;
pub const Ctrl_O: u32 = 15;
pub const Ctrl_P: u32 = 16;
pub const Ctrl_Q: u32 = 17;
pub const Ctrl_R: u32 = 18;
pub const Ctrl_S: u32 = 19;
pub const Ctrl_T: u32 = 20;
pub const Ctrl_U: u32 = 21;
pub const Ctrl_V: u32 = 22;
pub const Ctrl_W: u32 = 23;
pub const Ctrl_X: u32 = 24;
pub const Ctrl_Y: u32 = 25;
pub const Ctrl_Z: u32 = 26;
pub const Ctrl_BSL: u32 = 28;
pub const Ctrl_RSB: u32 = 29;
pub const Ctrl_HAT: u32 = 30;
pub const Ctrl__: u32 = 31;
pub const CSI: u32 = 155;
pub const CSI_STR: [u8; 2usize] = [155u8, 0u8];
pub const DCS: u32 = 144;
pub const OSC: u32 = 157;
pub const STERM: u32 = 156;
pub const PATHSEP: u8 = 47u8;
pub const PATHSEPSTR: &[u8; 2usize] = b"/\0";
pub const K_NUL: u32 = 206;
pub const K_SPECIAL: u32 = 128;
pub const ABBR_OFF: u32 = 256;
pub const KS_ZERO: u32 = 255;
pub const KS_SPECIAL: u32 = 254;
pub const KS_EXTRA: u32 = 253;
pub const KS_MODIFIER: u32 = 252;
pub const KS_MOUSE: u32 = 251;
pub const KS_MENU: u32 = 250;
pub const KS_VER_SCROLLBAR: u32 = 249;
pub const KS_HOR_SCROLLBAR: u32 = 248;
pub const KS_NETTERM_MOUSE: u32 = 247;
pub const KS_DEC_MOUSE: u32 = 246;
pub const KS_SELECT: u32 = 245;
pub const KS_TEAROFF: u32 = 244;
pub const KS_JSBTERM_MOUSE: u32 = 243;
pub const KS_KEY: u32 = 242;
pub const KS_PTERM_MOUSE: u32 = 241;
pub const KS_TABLINE: u32 = 240;
pub const KS_TABMENU: u32 = 239;
pub const KS_URXVT_MOUSE: u32 = 238;
pub const KS_SGR_MOUSE: u32 = 237;
pub const KS_SGR_MOUSE_RELEASE: u32 = 236;
pub const KS_GPM_MOUSE: u32 = 235;
pub const KE_FILLER: u8 = 88u8;
pub const MOD_MASK_SHIFT: u32 = 2;
pub const MOD_MASK_CTRL: u32 = 4;
pub const MOD_MASK_ALT: u32 = 8;
pub const MOD_MASK_META: u32 = 16;
pub const MOD_MASK_2CLICK: u32 = 32;
pub const MOD_MASK_3CLICK: u32 = 64;
pub const MOD_MASK_4CLICK: u32 = 96;
pub const MOD_MASK_CMD: u32 = 128;
pub const MOD_MASK_MULTI_CLICK: u32 = 96;
pub const MAX_KEY_NAME_LEN: u32 = 32;
pub const MAX_KEY_CODE_LEN: u32 = 6;
pub const NOT_IN_POPUP_WINDOW: u32 = 0;
pub const TMODE_COOK: u32 = 0;
pub const TMODE_SLEEP: u32 = 1;
pub const TMODE_RAW: u32 = 2;
pub const __GNUC_VA_LIST: u32 = 1;
pub const VALID_NO_UPDATE: u32 = 5;
pub const VALID: u32 = 10;
pub const INVERTED: u32 = 20;
pub const INVERTED_ALL: u32 = 25;
pub const REDRAW_TOP: u32 = 30;
pub const SOME_VALID: u32 = 35;
pub const NOT_VALID: u32 = 40;
pub const CLEAR: u32 = 50;
pub const VALID_WROW: u32 = 1;
pub const VALID_WCOL: u32 = 2;
pub const VALID_VIRTCOL: u32 = 4;
pub const VALID_CHEIGHT: u32 = 8;
pub const VALID_CROW: u32 = 16;
pub const VALID_BOTLINE: u32 = 32;
pub const VALID_BOTLINE_AP: u32 = 64;
pub const VALID_TOPLINE: u32 = 128;
pub const POPF_HIDDEN: u32 = 1;
pub const POPF_HANDLED: u32 = 2;
pub const HL_NORMAL: u32 = 0;
pub const HL_INVERSE: u32 = 1;
pub const HL_BOLD: u32 = 2;
pub const HL_ITALIC: u32 = 4;
pub const HL_UNDERLINE: u32 = 8;
pub const HL_UNDERCURL: u32 = 16;
pub const HL_STANDOUT: u32 = 32;
pub const HL_NOCOMBINE: u32 = 64;
pub const HL_STRIKETHROUGH: u32 = 128;
pub const HL_ALL: u32 = 255;
pub const MSG_HIST: u32 = 4096;
pub const NORMAL: u32 = 1;
pub const VISUAL: u32 = 2;
pub const OP_PENDING: u32 = 4;
pub const CMDLINE: u32 = 8;
pub const INSERT: u32 = 16;
pub const LANGMAP: u32 = 32;
pub const REPLACE_FLAG: u32 = 64;
pub const REPLACE: u32 = 80;
pub const VREPLACE_FLAG: u32 = 128;
pub const VREPLACE: u32 = 208;
pub const LREPLACE: u32 = 96;
pub const NORMAL_BUSY: u32 = 257;
pub const HITRETURN: u32 = 513;
pub const ASKMORE: u32 = 768;
pub const SETWSIZE: u32 = 1024;
pub const ABBREV: u32 = 1280;
pub const EXTERNCMD: u32 = 1536;
pub const SHOWMATCH: u32 = 1808;
pub const CONFIRM: u32 = 2048;
pub const SELECTMODE: u32 = 4096;
pub const TERMINAL: u32 = 8192;
pub const MAP_ALL_MODES: u32 = 12351;
pub const FORWARD: u32 = 1;
pub const BACKWARD: i32 = -1;
pub const FORWARD_FILE: u32 = 3;
pub const BACKWARD_FILE: i32 = -3;
pub const OK: u32 = 1;
pub const FAIL: u32 = 0;
pub const NOTDONE: u32 = 2;
pub const BF_RECOVERED: u32 = 1;
pub const BF_CHECK_RO: u32 = 2;
pub const BF_NEVERLOADED: u32 = 4;
pub const BF_NOTEDITED: u32 = 8;
pub const BF_NEW: u32 = 16;
pub const BF_NEW_W: u32 = 32;
pub const BF_READERR: u32 = 64;
pub const BF_DUMMY: u32 = 128;
pub const BF_PRESERVED: u32 = 256;
pub const BF_WRITE_MASK: u32 = 88;
pub const EXPAND_UNSUCCESSFUL: i32 = -2;
pub const EXPAND_OK: i32 = -1;
pub const EXPAND_NOTHING: u32 = 0;
pub const EXPAND_COMMANDS: u32 = 1;
pub const EXPAND_FILES: u32 = 2;
pub const EXPAND_DIRECTORIES: u32 = 3;
pub const EXPAND_SETTINGS: u32 = 4;
pub const EXPAND_BOOL_SETTINGS: u32 = 5;
pub const EXPAND_TAGS: u32 = 6;
pub const EXPAND_OLD_SETTING: u32 = 7;
pub const EXPAND_HELP: u32 = 8;
pub const EXPAND_BUFFERS: u32 = 9;
pub const EXPAND_EVENTS: u32 = 10;
pub const EXPAND_MENUS: u32 = 11;
pub const EXPAND_SYNTAX: u32 = 12;
pub const EXPAND_HIGHLIGHT: u32 = 13;
pub const EXPAND_AUGROUP: u32 = 14;
pub const EXPAND_USER_VARS: u32 = 15;
pub const EXPAND_MAPPINGS: u32 = 16;
pub const EXPAND_TAGS_LISTFILES: u32 = 17;
pub const EXPAND_FUNCTIONS: u32 = 18;
pub const EXPAND_USER_FUNC: u32 = 19;
pub const EXPAND_EXPRESSION: u32 = 20;
pub const EXPAND_MENUNAMES: u32 = 21;
pub const EXPAND_USER_COMMANDS: u32 = 22;
pub const EXPAND_USER_CMD_FLAGS: u32 = 23;
pub const EXPAND_USER_NARGS: u32 = 24;
pub const EXPAND_USER_COMPLETE: u32 = 25;
pub const EXPAND_ENV_VARS: u32 = 26;
pub const EXPAND_LANGUAGE: u32 = 27;
pub const EXPAND_COLORS: u32 = 28;
pub const EXPAND_COMPILER: u32 = 29;
pub const EXPAND_USER_DEFINED: u32 = 30;
pub const EXPAND_USER_LIST: u32 = 31;
pub const EXPAND_SHELLCMD: u32 = 32;
pub const EXPAND_CSCOPE: u32 = 33;
pub const EXPAND_SIGN: u32 = 34;
pub const EXPAND_PROFILE: u32 = 35;
pub const EXPAND_BEHAVE: u32 = 36;
pub const EXPAND_FILETYPE: u32 = 37;
pub const EXPAND_FILES_IN_PATH: u32 = 38;
pub const EXPAND_OWNSYNTAX: u32 = 39;
pub const EXPAND_LOCALES: u32 = 40;
pub const EXPAND_HISTORY: u32 = 41;
pub const EXPAND_USER: u32 = 42;
pub const EXPAND_SYNTIME: u32 = 43;
pub const EXPAND_USER_ADDR_TYPE: u32 = 44;
pub const EXPAND_PACKADD: u32 = 45;
pub const EXPAND_MESSAGES: u32 = 46;
pub const EXPAND_MAPCLEAR: u32 = 47;
pub const EXPAND_ARGLIST: u32 = 48;
pub const EXMODE_NORMAL: u32 = 1;
pub const EXMODE_VIM: u32 = 2;
pub const WILD_FREE: u32 = 1;
pub const WILD_EXPAND_FREE: u32 = 2;
pub const WILD_EXPAND_KEEP: u32 = 3;
pub const WILD_NEXT: u32 = 4;
pub const WILD_PREV: u32 = 5;
pub const WILD_ALL: u32 = 6;
pub const WILD_LONGEST: u32 = 7;
pub const WILD_ALL_KEEP: u32 = 8;
pub const WILD_LIST_NOTFOUND: u32 = 1;
pub const WILD_HOME_REPLACE: u32 = 2;
pub const WILD_USE_NL: u32 = 4;
pub const WILD_NO_BEEP: u32 = 8;
pub const WILD_ADD_SLASH: u32 = 16;
pub const WILD_KEEP_ALL: u32 = 32;
pub const WILD_SILENT: u32 = 64;
pub const WILD_ESCAPE: u32 = 128;
pub const WILD_ICASE: u32 = 256;
pub const WILD_ALLLINKS: u32 = 512;
pub const EW_DIR: u32 = 1;
pub const EW_FILE: u32 = 2;
pub const EW_NOTFOUND: u32 = 4;
pub const EW_ADDSLASH: u32 = 8;
pub const EW_KEEPALL: u32 = 16;
pub const EW_SILENT: u32 = 32;
pub const EW_EXEC: u32 = 64;
pub const EW_PATH: u32 = 128;
pub const EW_ICASE: u32 = 256;
pub const EW_NOERROR: u32 = 512;
pub const EW_NOTWILD: u32 = 1024;
pub const EW_KEEPDOLLAR: u32 = 2048;
pub const EW_ALLLINKS: u32 = 4096;
pub const EW_SHELLCMD: u32 = 8192;
pub const EW_DODOT: u32 = 16384;
pub const EW_EMPTYOK: u32 = 32768;
pub const EW_NOTENV: u32 = 65536;
pub const FINDFILE_FILE: u32 = 0;
pub const FINDFILE_DIR: u32 = 1;
pub const FINDFILE_BOTH: u32 = 2;
pub const FIND_ANY: u32 = 1;
pub const FIND_DEFINE: u32 = 2;
pub const CHECK_PATH: u32 = 3;
pub const ACTION_SHOW: u32 = 1;
pub const ACTION_GOTO: u32 = 2;
pub const ACTION_SPLIT: u32 = 3;
pub const ACTION_SHOW_ALL: u32 = 4;
pub const SEARCH_REV: u32 = 1;
pub const SEARCH_ECHO: u32 = 2;
pub const SEARCH_MSG: u32 = 12;
pub const SEARCH_NFMSG: u32 = 8;
pub const SEARCH_OPT: u32 = 16;
pub const SEARCH_HIS: u32 = 32;
pub const SEARCH_END: u32 = 64;
pub const SEARCH_NOOF: u32 = 128;
pub const SEARCH_START: u32 = 256;
pub const SEARCH_MARK: u32 = 512;
pub const SEARCH_KEEP: u32 = 1024;
pub const SEARCH_PEEK: u32 = 2048;
pub const SEARCH_COL: u32 = 4096;
pub const FIND_IDENT: u32 = 1;
pub const FIND_STRING: u32 = 2;
pub const FIND_EVAL: u32 = 4;
pub const FIND_NOERROR: u32 = 8;
pub const FNAME_MESS: u32 = 1;
pub const FNAME_EXP: u32 = 2;
pub const FNAME_HYP: u32 = 4;
pub const FNAME_INCL: u32 = 8;
pub const FNAME_REL: u32 = 16;
pub const FNAME_UNESC: u32 = 32;
pub const GETF_SETMARK: u32 = 1;
pub const GETF_ALT: u32 = 2;
pub const GETF_SWITCH: u32 = 4;
pub const GETFILE_ERROR: u32 = 1;
pub const GETFILE_NOT_WRITTEN: u32 = 2;
pub const GETFILE_SAME_FILE: u32 = 0;
pub const GETFILE_OPEN_OTHER: i32 = -1;
pub const GETFILE_UNUSED: u32 = 8;
pub const BLN_CURBUF: u32 = 1;
pub const BLN_LISTED: u32 = 2;
pub const BLN_DUMMY: u32 = 4;
pub const BLN_NEW: u32 = 8;
pub const BLN_NOOPT: u32 = 16;
pub const BLN_DUMMY_OK: u32 = 32;
pub const KEY_OPEN_FORW: u32 = 257;
pub const KEY_OPEN_BACK: u32 = 258;
pub const KEY_COMPLETE: u32 = 259;
pub const REMAP_YES: u32 = 0;
pub const REMAP_NONE: i32 = -1;
pub const REMAP_SCRIPT: i32 = -2;
pub const REMAP_SKIP: i32 = -3;
pub const SHELL_FILTER: u32 = 1;
pub const SHELL_EXPAND: u32 = 2;
pub const SHELL_COOKED: u32 = 4;
pub const SHELL_DOOUT: u32 = 8;
pub const SHELL_SILENT: u32 = 16;
pub const SHELL_READ: u32 = 32;
pub const SHELL_WRITE: u32 = 64;
pub const NODE_NORMAL: u32 = 0;
pub const NODE_WRITABLE: u32 = 1;
pub const NODE_OTHER: u32 = 2;
pub const READ_NEW: u32 = 1;
pub const READ_FILTER: u32 = 2;
pub const READ_STDIN: u32 = 4;
pub const READ_BUFFER: u32 = 8;
pub const READ_DUMMY: u32 = 16;
pub const READ_KEEP_UNDO: u32 = 32;
pub const READ_FIFO: u32 = 64;
pub const INDENT_SET: u32 = 1;
pub const INDENT_INC: u32 = 2;
pub const INDENT_DEC: u32 = 3;
pub const FM_BACKWARD: u32 = 1;
pub const FM_FORWARD: u32 = 2;
pub const FM_BLOCKSTOP: u32 = 4;
pub const FM_SKIPCOMM: u32 = 8;
pub const DOBUF_GOTO: u32 = 0;
pub const DOBUF_SPLIT: u32 = 1;
pub const DOBUF_UNLOAD: u32 = 2;
pub const DOBUF_DEL: u32 = 3;
pub const DOBUF_WIPE: u32 = 4;
pub const DOBUF_CURRENT: u32 = 0;
pub const DOBUF_FIRST: u32 = 1;
pub const DOBUF_LAST: u32 = 2;
pub const DOBUF_MOD: u32 = 3;
pub const RE_SEARCH: u32 = 0;
pub const RE_SUBST: u32 = 1;
pub const RE_BOTH: u32 = 2;
pub const RE_LAST: u32 = 2;
pub const RE_MAGIC: u32 = 1;
pub const RE_STRING: u32 = 2;
pub const RE_STRICT: u32 = 4;
pub const RE_AUTO: u32 = 8;
pub const FPC_SAME: u32 = 1;
pub const FPC_DIFF: u32 = 2;
pub const FPC_NOTX: u32 = 4;
pub const FPC_DIFFX: u32 = 6;
pub const FPC_SAMEX: u32 = 7;
pub const ECMD_HIDE: u32 = 1;
pub const ECMD_SET_HELP: u32 = 2;
pub const ECMD_OLDBUF: u32 = 4;
pub const ECMD_FORCEIT: u32 = 8;
pub const ECMD_ADDBUF: u32 = 16;
pub const DOCMD_VERBOSE: u32 = 1;
pub const DOCMD_NOWAIT: u32 = 2;
pub const DOCMD_REPEAT: u32 = 4;
pub const DOCMD_KEYTYPED: u32 = 8;
pub const DOCMD_EXCRESET: u32 = 16;
pub const DOCMD_KEEPLINE: u32 = 32;
pub const BL_WHITE: u32 = 1;
pub const BL_SOL: u32 = 2;
pub const BL_FIX: u32 = 4;
pub const MFS_ALL: u32 = 1;
pub const MFS_STOP: u32 = 2;
pub const MFS_FLUSH: u32 = 4;
pub const MFS_ZERO: u32 = 8;
pub const BCO_ENTER: u32 = 1;
pub const BCO_ALWAYS: u32 = 2;
pub const BCO_NOHELP: u32 = 4;
pub const PUT_FIXINDENT: u32 = 1;
pub const PUT_CURSEND: u32 = 2;
pub const PUT_CURSLINE: u32 = 4;
pub const PUT_LINE: u32 = 8;
pub const PUT_LINE_SPLIT: u32 = 16;
pub const PUT_LINE_FORWARD: u32 = 32;
pub const SIN_CHANGED: u32 = 1;
pub const SIN_INSERT: u32 = 2;
pub const SIN_UNDO: u32 = 4;
pub const INSCHAR_FORMAT: u32 = 1;
pub const INSCHAR_DO_COM: u32 = 2;
pub const INSCHAR_CTRLV: u32 = 4;
pub const INSCHAR_NO_FEX: u32 = 8;
pub const INSCHAR_COM_LIST: u32 = 16;
pub const OPENLINE_DELSPACES: u32 = 1;
pub const OPENLINE_DO_COM: u32 = 2;
pub const OPENLINE_KEEPTRAIL: u32 = 4;
pub const OPENLINE_MARKFIX: u32 = 8;
pub const OPENLINE_COM_LIST: u32 = 16;
pub const HIST_CMD: u32 = 0;
pub const HIST_SEARCH: u32 = 1;
pub const HIST_EXPR: u32 = 2;
pub const HIST_INPUT: u32 = 3;
pub const HIST_DEBUG: u32 = 4;
pub const HIST_COUNT: u32 = 5;
pub const BARTYPE_VERSION: u32 = 1;
pub const BARTYPE_HISTORY: u32 = 2;
pub const BARTYPE_REGISTER: u32 = 3;
pub const BARTYPE_MARK: u32 = 4;
pub const VIMINFO_VERSION: u32 = 4;
pub const VIMINFO_VERSION_WITH_HISTORY: u32 = 2;
pub const VIMINFO_VERSION_WITH_REGISTERS: u32 = 3;
pub const VIMINFO_VERSION_WITH_MARKS: u32 = 4;
pub const DT_TAG: u32 = 1;
pub const DT_POP: u32 = 2;
pub const DT_NEXT: u32 = 3;
pub const DT_PREV: u32 = 4;
pub const DT_FIRST: u32 = 5;
pub const DT_LAST: u32 = 6;
pub const DT_SELECT: u32 = 7;
pub const DT_HELP: u32 = 8;
pub const DT_JUMP: u32 = 9;
pub const DT_CSCOPE: u32 = 10;
pub const DT_LTAG: u32 = 11;
pub const DT_FREE: u32 = 99;
pub const TAG_HELP: u32 = 1;
pub const TAG_NAMES: u32 = 2;
pub const TAG_REGEXP: u32 = 4;
pub const TAG_NOIC: u32 = 8;
pub const TAG_VERBOSE: u32 = 32;
pub const TAG_INS_COMP: u32 = 64;
pub const TAG_KEEP_LANG: u32 = 128;
pub const TAG_NO_TAGFUNC: u32 = 256;
pub const TAG_MANY: u32 = 300;
pub const VIM_GENERIC: u32 = 0;
pub const VIM_ERROR: u32 = 1;
pub const VIM_WARNING: u32 = 2;
pub const VIM_INFO: u32 = 3;
pub const VIM_QUESTION: u32 = 4;
pub const VIM_LAST_TYPE: u32 = 4;
pub const VIM_YES: u32 = 2;
pub const VIM_NO: u32 = 3;
pub const VIM_CANCEL: u32 = 4;
pub const VIM_ALL: u32 = 5;
pub const VIM_DISCARDALL: u32 = 6;
pub const WSP_ROOM: u32 = 1;
pub const WSP_VERT: u32 = 2;
pub const WSP_TOP: u32 = 4;
pub const WSP_BOT: u32 = 8;
pub const WSP_HELP: u32 = 16;
pub const WSP_BELOW: u32 = 32;
pub const WSP_ABOVE: u32 = 64;
pub const WSP_NEWLOC: u32 = 128;
pub const RESIZE_VERT: u32 = 1;
pub const RESIZE_HOR: u32 = 2;
pub const RESIZE_BOTH: u32 = 15;
pub const CCGD_AW: u32 = 1;
pub const CCGD_MULTWIN: u32 = 2;
pub const CCGD_FORCEIT: u32 = 4;
pub const CCGD_ALLBUF: u32 = 8;
pub const CCGD_EXCMD: u32 = 16;
pub const OPT_FREE: u32 = 1;
pub const OPT_GLOBAL: u32 = 2;
pub const OPT_LOCAL: u32 = 4;
pub const OPT_MODELINE: u32 = 8;
pub const OPT_WINONLY: u32 = 16;
pub const OPT_NOWIN: u32 = 32;
pub const DLG_BUTTON_SEP: u8 = 10u8;
pub const DLG_HOTKEY_CHAR: u8 = 38u8;
pub const NO_SCREEN: u32 = 2;
pub const NO_BUFFERS: u32 = 1;
pub const SEA_NONE: u32 = 0;
pub const SEA_DIALOG: u32 = 1;
pub const SEA_QUIT: u32 = 2;
pub const SEA_RECOVER: u32 = 3;
pub const MIN_SWAP_PAGE_SIZE: u32 = 1048;
pub const MAX_SWAP_PAGE_SIZE: u32 = 50000;
pub const SID_MODELINE: i32 = -1;
pub const SID_CMDARG: i32 = -2;
pub const SID_CARG: i32 = -3;
pub const SID_ENV: i32 = -4;
pub const SID_ERROR: i32 = -5;
pub const SID_NONE: i32 = -6;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const MAYBE: u32 = 2;
pub const OP_NOP: u32 = 0;
pub const OP_DELETE: u32 = 1;
pub const OP_YANK: u32 = 2;
pub const OP_CHANGE: u32 = 3;
pub const OP_LSHIFT: u32 = 4;
pub const OP_RSHIFT: u32 = 5;
pub const OP_FILTER: u32 = 6;
pub const OP_TILDE: u32 = 7;
pub const OP_INDENT: u32 = 8;
pub const OP_FORMAT: u32 = 9;
pub const OP_COLON: u32 = 10;
pub const OP_UPPER: u32 = 11;
pub const OP_LOWER: u32 = 12;
pub const OP_JOIN: u32 = 13;
pub const OP_JOIN_NS: u32 = 14;
pub const OP_ROT13: u32 = 15;
pub const OP_REPLACE: u32 = 16;
pub const OP_INSERT: u32 = 17;
pub const OP_APPEND: u32 = 18;
pub const OP_FOLD: u32 = 19;
pub const OP_FOLDOPEN: u32 = 20;
pub const OP_FOLDOPENREC: u32 = 21;
pub const OP_FOLDCLOSE: u32 = 22;
pub const OP_FOLDCLOSEREC: u32 = 23;
pub const OP_FOLDDEL: u32 = 24;
pub const OP_FOLDDELREC: u32 = 25;
pub const OP_FORMAT2: u32 = 26;
pub const OP_FUNCTION: u32 = 27;
pub const OP_NR_ADD: u32 = 28;
pub const OP_NR_SUB: u32 = 29;
pub const OP_COMMENT: u32 = 30;
pub const MCHAR: u32 = 0;
pub const MLINE: u32 = 1;
pub const MBLOCK: u32 = 2;
pub const MAUTO: u32 = 255;
pub const MIN_COLUMNS: u32 = 12;
pub const MIN_LINES: u32 = 2;
pub const STATUS_HEIGHT: u32 = 1;
pub const QF_WINHEIGHT: u32 = 10;
pub const CMDBUFFSIZE: u32 = 256;
pub const LSIZE: u32 = 512;
pub const IOSIZE: u32 = 1025;
pub const DIALOG_MSG_SIZE: u32 = 1000;
pub const MSG_BUF_LEN: u32 = 480;
pub const MSG_BUF_CLEN: u32 = 80;
pub const FOLD_TEXT_LEN: u32 = 51;
pub const TBUFSZ: u32 = 2048;
pub const MAXMAPLEN: u32 = 50;
pub const UNDO_HASH_SIZE: u32 = 32;
pub const WRITEBIN: &[u8; 2usize] = b"w\0";
pub const READBIN: &[u8; 2usize] = b"r\0";
pub const APPENDBIN: &[u8; 2usize] = b"a\0";
pub const O_EXTRA: u32 = 0;
pub const O_NOFOLLOW: u32 = 0;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const SHOWCMD_COLS: u32 = 10;
pub const STL_MAX_ITEM: u32 = 80;
pub const MAX_MCO: u32 = 6;
pub const MB_MAXBYTES: u32 = 21;
pub const DFLT_EFM : & [u8 ; 607usize] = b"%*[^\"]\"%f\"%*\\D%l: %m,\"%f\"%*\\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\, line %l%*\\D%c%*[^ ] %m,%D%*\\a[%*\\d]: Entering directory %*[`']%f',%X%*\\a[%*\\d]: Leaving directory %*[`']%f',%D%*\\a: Entering directory %*[`']%f',%X%*\\a: Leaving directory %*[`']%f',%DMaking %*\\a in %f,%f|%l| %m\0" ;
pub const DFLT_GREPFORMAT: &[u8; 26usize] = b"%f:%l:%m,%f:%l%m,%f  %l%m\0";
pub const FF_DOS: &[u8; 4usize] = b"dos\0";
pub const FF_MAC: &[u8; 4usize] = b"mac\0";
pub const FF_UNIX: &[u8; 5usize] = b"unix\0";
pub const DFLT_FF: &[u8; 5usize] = b"unix\0";
pub const DFLT_FFS_VIM: &[u8; 9usize] = b"unix,dos\0";
pub const DFLT_FFS_VI: &[u8; 1usize] = b"\0";
pub const DFLT_TEXTAUTO: u32 = 0;
pub const ENC_UCSBOM: &[u8; 8usize] = b"ucs-bom\0";
pub const ENC_DFLT: &[u8; 6usize] = b"utf-8\0";
pub const EOL_UNKNOWN: i32 = -1;
pub const EOL_UNIX: u32 = 0;
pub const EOL_DOS: u32 = 1;
pub const EOL_MAC: u32 = 2;
pub const FO_WRAP: u8 = 116u8;
pub const FO_WRAP_COMS: u8 = 99u8;
pub const FO_RET_COMS: u8 = 114u8;
pub const FO_OPEN_COMS: u8 = 111u8;
pub const FO_Q_COMS: u8 = 113u8;
pub const FO_Q_NUMBER: u8 = 110u8;
pub const FO_Q_SECOND: u8 = 50u8;
pub const FO_INS_VI: u8 = 118u8;
pub const FO_INS_LONG: u8 = 108u8;
pub const FO_INS_BLANK: u8 = 98u8;
pub const FO_MBYTE_BREAK: u8 = 109u8;
pub const FO_MBYTE_JOIN: u8 = 77u8;
pub const FO_MBYTE_JOIN2: u8 = 66u8;
pub const FO_ONE_LETTER: u8 = 49u8;
pub const FO_WHITE_PAR: u8 = 119u8;
pub const FO_AUTO: u8 = 97u8;
pub const FO_REMOVE_COMS: u8 = 106u8;
pub const FO_PERIOD_ABBR: u8 = 112u8;
pub const DFLT_FO_VI: &[u8; 3usize] = b"vt\0";
pub const DFLT_FO_VIM: &[u8; 4usize] = b"tcq\0";
pub const FO_ALL: &[u8; 20usize] = b"tcroq2vlb1mMBn,awjp\0";
pub const CPO_ALTREAD: u8 = 97u8;
pub const CPO_ALTWRITE: u8 = 65u8;
pub const CPO_BAR: u8 = 98u8;
pub const CPO_BSLASH: u8 = 66u8;
pub const CPO_SEARCH: u8 = 99u8;
pub const CPO_CONCAT: u8 = 67u8;
pub const CPO_DOTTAG: u8 = 100u8;
pub const CPO_DIGRAPH: u8 = 68u8;
pub const CPO_EXECBUF: u8 = 101u8;
pub const CPO_EMPTYREGION: u8 = 69u8;
pub const CPO_FNAMER: u8 = 102u8;
pub const CPO_FNAMEW: u8 = 70u8;
pub const CPO_GOTO1: u8 = 103u8;
pub const CPO_INSEND: u8 = 72u8;
pub const CPO_INTMOD: u8 = 105u8;
pub const CPO_INDENT: u8 = 73u8;
pub const CPO_JOINSP: u8 = 106u8;
pub const CPO_ENDOFSENT: u8 = 74u8;
pub const CPO_KEYCODE: u8 = 107u8;
pub const CPO_KOFFSET: u8 = 75u8;
pub const CPO_LITERAL: u8 = 108u8;
pub const CPO_LISTWM: u8 = 76u8;
pub const CPO_SHOWMATCH: u8 = 109u8;
pub const CPO_MATCHBSL: u8 = 77u8;
pub const CPO_NUMCOL: u8 = 110u8;
pub const CPO_LINEOFF: u8 = 111u8;
pub const CPO_OVERNEW: u8 = 79u8;
pub const CPO_LISP: u8 = 112u8;
pub const CPO_FNAMEAPP: u8 = 80u8;
pub const CPO_JOINCOL: u8 = 113u8;
pub const CPO_REDO: u8 = 114u8;
pub const CPO_REMMARK: u8 = 82u8;
pub const CPO_BUFOPT: u8 = 115u8;
pub const CPO_BUFOPTGLOB: u8 = 83u8;
pub const CPO_TAGPAT: u8 = 116u8;
pub const CPO_UNDO: u8 = 117u8;
pub const CPO_BACKSPACE: u8 = 118u8;
pub const CPO_CW: u8 = 119u8;
pub const CPO_FWRITE: u8 = 87u8;
pub const CPO_ESC: u8 = 120u8;
pub const CPO_REPLCNT: u8 = 88u8;
pub const CPO_YANK: u8 = 121u8;
pub const CPO_KEEPRO: u8 = 90u8;
pub const CPO_DOLLAR: u8 = 36u8;
pub const CPO_FILTER: u8 = 33u8;
pub const CPO_MATCH: u8 = 37u8;
pub const CPO_STAR: u8 = 42u8;
pub const CPO_PLUS: u8 = 43u8;
pub const CPO_MINUS: u8 = 45u8;
pub const CPO_SPECI: u8 = 60u8;
pub const CPO_REGAPPEND: u8 = 62u8;
pub const CPO_HASH: u8 = 35u8;
pub const CPO_PARA: u8 = 123u8;
pub const CPO_TSIZE: u8 = 124u8;
pub const CPO_PRESERVE: u8 = 38u8;
pub const CPO_SUBPERCENT: u8 = 47u8;
pub const CPO_BACKSL: u8 = 92u8;
pub const CPO_CHDIR: u8 = 46u8;
pub const CPO_SCOLON: u8 = 59u8;
pub const CPO_VIM: &[u8; 8usize] = b"aABceFs\0";
pub const CPO_VI: &[u8; 53usize] = b"aAbBcCdDeEfFgHiIjJkKlLmMnoOpPqrRsStuvwWxXyZ$!%*-+<>;\0";
pub const CPO_ALL: &[u8; 60usize] =
    b"aAbBcCdDeEfFgHiIjJkKlLmMnoOpPqrRsStuvwWxXyZ$!%*-+<>#{|&/\\.;\0";
pub const WW_ALL: &[u8; 11usize] = b"bshl<>[],~\0";
pub const MOUSE_NORMAL: u8 = 110u8;
pub const MOUSE_VISUAL: u8 = 118u8;
pub const MOUSE_INSERT: u8 = 105u8;
pub const MOUSE_COMMAND: u8 = 99u8;
pub const MOUSE_HELP: u8 = 104u8;
pub const MOUSE_RETURN: u8 = 114u8;
pub const MOUSE_A: &[u8; 6usize] = b"nvich\0";
pub const MOUSE_ALL: &[u8; 8usize] = b"anvichr\0";
pub const MOUSE_NONE: u8 = 32u8;
pub const MOUSE_NONEF: u8 = 120u8;
pub const COCU_ALL: &[u8; 5usize] = b"nvic\0";
pub const SHM_RO: u8 = 114u8;
pub const SHM_MOD: u8 = 109u8;
pub const SHM_FILE: u8 = 102u8;
pub const SHM_LAST: u8 = 105u8;
pub const SHM_TEXT: u8 = 120u8;
pub const SHM_LINES: u8 = 108u8;
pub const SHM_NEW: u8 = 110u8;
pub const SHM_WRI: u8 = 119u8;
pub const SHM_A: &[u8; 9usize] = b"rmfixlnw\0";
pub const SHM_WRITE: u8 = 87u8;
pub const SHM_TRUNC: u8 = 116u8;
pub const SHM_TRUNCALL: u8 = 84u8;
pub const SHM_OVER: u8 = 111u8;
pub const SHM_OVERALL: u8 = 79u8;
pub const SHM_SEARCH: u8 = 115u8;
pub const SHM_ATTENTION: u8 = 65u8;
pub const SHM_INTRO: u8 = 73u8;
pub const SHM_COMPLETIONMENU: u8 = 99u8;
pub const SHM_RECORDING: u8 = 113u8;
pub const SHM_FILEINFO: u8 = 70u8;
pub const SHM_SEARCHCOUNT: u8 = 83u8;
pub const SHM_POSIX: &[u8; 3usize] = b"AS\0";
pub const SHM_ALL: &[u8; 22usize] = b"rmfixlnwaWtToOsAIcqFS\0";
pub const GO_TERMINAL: u8 = 33u8;
pub const GO_ASEL: u8 = 97u8;
pub const GO_ASELML: u8 = 65u8;
pub const GO_BOT: u8 = 98u8;
pub const GO_CONDIALOG: u8 = 99u8;
pub const GO_TABLINE: u8 = 101u8;
pub const GO_FORG: u8 = 102u8;
pub const GO_GREY: u8 = 103u8;
pub const GO_HORSCROLL: u8 = 104u8;
pub const GO_ICON: u8 = 105u8;
pub const GO_LEFT: u8 = 108u8;
pub const GO_VLEFT: u8 = 76u8;
pub const GO_MENUS: u8 = 109u8;
pub const GO_NOSYSMENU: u8 = 77u8;
pub const GO_POINTER: u8 = 112u8;
pub const GO_ASELPLUS: u8 = 80u8;
pub const GO_RIGHT: u8 = 114u8;
pub const GO_VRIGHT: u8 = 82u8;
pub const GO_TEAROFF: u8 = 116u8;
pub const GO_TOOLBAR: u8 = 84u8;
pub const GO_FOOTER: u8 = 70u8;
pub const GO_VERTICAL: u8 = 118u8;
pub const GO_KEEPWINSIZE: u8 = 107u8;
pub const GO_ALL: &[u8; 21usize] = b"!aAbcefFghilmMprtTvk\0";
pub const COM_NEST: u8 = 110u8;
pub const COM_BLANK: u8 = 98u8;
pub const COM_START: u8 = 115u8;
pub const COM_MIDDLE: u8 = 109u8;
pub const COM_END: u8 = 101u8;
pub const COM_AUTO_END: u8 = 120u8;
pub const COM_FIRST: u8 = 102u8;
pub const COM_LEFT: u8 = 108u8;
pub const COM_RIGHT: u8 = 114u8;
pub const COM_NOBACK: u8 = 79u8;
pub const COM_ALL: &[u8; 11usize] = b"nbsmexflrO\0";
pub const COM_MAX_LEN: u32 = 50;
pub const STL_FILEPATH: u8 = 102u8;
pub const STL_FULLPATH: u8 = 70u8;
pub const STL_FILENAME: u8 = 116u8;
pub const STL_COLUMN: u8 = 99u8;
pub const STL_VIRTCOL: u8 = 118u8;
pub const STL_VIRTCOL_ALT: u8 = 86u8;
pub const STL_LINE: u8 = 108u8;
pub const STL_NUMLINES: u8 = 76u8;
pub const STL_BUFNO: u8 = 110u8;
pub const STL_KEYMAP: u8 = 107u8;
pub const STL_OFFSET: u8 = 111u8;
pub const STL_OFFSET_X: u8 = 79u8;
pub const STL_BYTEVAL: u8 = 98u8;
pub const STL_BYTEVAL_X: u8 = 66u8;
pub const STL_ROFLAG: u8 = 114u8;
pub const STL_ROFLAG_ALT: u8 = 82u8;
pub const STL_HELPFLAG: u8 = 104u8;
pub const STL_HELPFLAG_ALT: u8 = 72u8;
pub const STL_FILETYPE: u8 = 121u8;
pub const STL_FILETYPE_ALT: u8 = 89u8;
pub const STL_PREVIEWFLAG: u8 = 119u8;
pub const STL_PREVIEWFLAG_ALT: u8 = 87u8;
pub const STL_MODIFIED: u8 = 109u8;
pub const STL_MODIFIED_ALT: u8 = 77u8;
pub const STL_QUICKFIX: u8 = 113u8;
pub const STL_PERCENTAGE: u8 = 112u8;
pub const STL_ALTPERCENT: u8 = 80u8;
pub const STL_ARGLISTSTAT: u8 = 97u8;
pub const STL_PAGENUM: u8 = 78u8;
pub const STL_VIM_EXPR: u8 = 123u8;
pub const STL_MIDDLEMARK: u8 = 61u8;
pub const STL_TRUNCMARK: u8 = 60u8;
pub const STL_USER_HL: u8 = 42u8;
pub const STL_HIGHLIGHT: u8 = 35u8;
pub const STL_TABPAGENR: u8 = 84u8;
pub const STL_TABCLOSENR: u8 = 88u8;
pub const WIM_FULL: u32 = 1;
pub const WIM_LONGEST: u32 = 2;
pub const WIM_LIST: u32 = 4;
pub const BS_INDENT: u8 = 105u8;
pub const BS_EOL: u8 = 111u8;
pub const BS_START: u8 = 115u8;
pub const LISPWORD_VALUE : & [u8 ; 746usize] = b"defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object\0" ;
pub const BKC_YES: u32 = 1;
pub const BKC_AUTO: u32 = 2;
pub const BKC_NO: u32 = 4;
pub const BKC_BREAKSYMLINK: u32 = 8;
pub const BKC_BREAKHARDLINK: u32 = 16;
pub const BO_ALL: u32 = 1;
pub const BO_BS: u32 = 2;
pub const BO_CRSR: u32 = 4;
pub const BO_COMPL: u32 = 8;
pub const BO_COPY: u32 = 16;
pub const BO_CTRLG: u32 = 32;
pub const BO_ERROR: u32 = 64;
pub const BO_ESC: u32 = 128;
pub const BO_EX: u32 = 256;
pub const BO_HANGUL: u32 = 512;
pub const BO_IM: u32 = 1024;
pub const BO_LANG: u32 = 2048;
pub const BO_MESS: u32 = 4096;
pub const BO_MATCH: u32 = 8192;
pub const BO_OPER: u32 = 16384;
pub const BO_REG: u32 = 32768;
pub const BO_SH: u32 = 65536;
pub const BO_SPELL: u32 = 131072;
pub const BO_WILD: u32 = 262144;
pub const CMP_INTERNAL: u32 = 1;
pub const CMP_KEEPASCII: u32 = 2;
pub const DY_LASTLINE: u32 = 1;
pub const DY_TRUNCATE: u32 = 2;
pub const DY_UHEX: u32 = 4;
pub const FDO_ALL: u32 = 1;
pub const FDO_BLOCK: u32 = 2;
pub const FDO_HOR: u32 = 4;
pub const FDO_MARK: u32 = 8;
pub const FDO_PERCENT: u32 = 16;
pub const FDO_QUICKFIX: u32 = 32;
pub const FDO_SEARCH: u32 = 64;
pub const FDO_TAG: u32 = 128;
pub const FDO_INSERT: u32 = 256;
pub const FDO_UNDO: u32 = 512;
pub const FDO_JUMP: u32 = 1024;
pub const SSOP_BUFFERS: u32 = 1;
pub const SSOP_WINPOS: u32 = 2;
pub const SSOP_RESIZE: u32 = 4;
pub const SSOP_WINSIZE: u32 = 8;
pub const SSOP_LOCALOPTIONS: u32 = 16;
pub const SSOP_OPTIONS: u32 = 32;
pub const SSOP_HELP: u32 = 64;
pub const SSOP_BLANK: u32 = 128;
pub const SSOP_GLOBALS: u32 = 256;
pub const SSOP_SLASH: u32 = 512;
pub const SSOP_UNIX: u32 = 1024;
pub const SSOP_SESDIR: u32 = 2048;
pub const SSOP_CURDIR: u32 = 4096;
pub const SSOP_FOLDS: u32 = 8192;
pub const SSOP_CURSOR: u32 = 16384;
pub const SSOP_TABPAGES: u32 = 32768;
pub const SSOP_TERMINAL: u32 = 65536;
pub const SWB_USEOPEN: u32 = 1;
pub const SWB_USETAB: u32 = 2;
pub const SWB_SPLIT: u32 = 4;
pub const SWB_NEWTAB: u32 = 8;
pub const SWB_VSPLIT: u32 = 16;
pub const TC_FOLLOWIC: u32 = 1;
pub const TC_IGNORE: u32 = 2;
pub const TC_MATCH: u32 = 4;
pub const TC_FOLLOWSCS: u32 = 8;
pub const TC_SMART: u32 = 16;
pub const VE_BLOCK: u32 = 5;
pub const VE_INSERT: u32 = 6;
pub const VE_ALL: u32 = 4;
pub const VE_ONEMORE: u32 = 8;
pub const NO_LOCAL_UNDOLEVEL: i32 = -123456;
pub const SDS_MAX_PREALLOC: u32 = 1048576;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const SDS_TYPE_5: u32 = 0;
pub const SDS_TYPE_8: u32 = 1;
pub const SDS_TYPE_16: u32 = 2;
pub const SDS_TYPE_32: u32 = 3;
pub const SDS_TYPE_64: u32 = 4;
pub const SDS_TYPE_MASK: u32 = 7;
pub const SDS_TYPE_BITS: u32 = 3;
pub const NSUBEXP: u32 = 10;
pub const NFA_MAX_BRACES: u32 = 20;
pub const NFA_MAX_STATES: u32 = 100000;
pub const NFA_TOO_EXPENSIVE: i32 = -1;
pub const AUTOMATIC_ENGINE: u32 = 0;
pub const BACKTRACKING_ENGINE: u32 = 1;
pub const NFA_ENGINE: u32 = 2;
pub const JUMPLISTSIZE: u32 = 100;
pub const TAGSTACKSIZE: u32 = 20;
pub const UH_CHANGED: u32 = 1;
pub const UH_EMPTYBUF: u32 = 2;
pub const MHT_INIT_SIZE: u32 = 64;
pub const BH_DIRTY: u32 = 1;
pub const BH_LOCKED: u32 = 2;
pub const XP_BS_NONE: u32 = 0;
pub const XP_BS_ONE: u32 = 1;
pub const XP_BS_THREE: u32 = 2;
pub const MF_SEED_LEN: u32 = 8;
pub const ML_CHNK_ADDLINE: u32 = 1;
pub const ML_CHNK_DELLINE: u32 = 2;
pub const ML_CHNK_UPDLINE: u32 = 3;
pub const ML_EMPTY: u32 = 1;
pub const ML_LINE_DIRTY: u32 = 2;
pub const ML_LOCKED_DIRTY: u32 = 4;
pub const ML_LOCKED_POS: u32 = 8;
pub const TP_FLAG_CONT_NEXT: u32 = 1;
pub const TP_FLAG_CONT_PREV: u32 = 2;
pub const PT_FLAG_INS_START_INCL: u32 = 1;
pub const PT_FLAG_INS_END_INCL: u32 = 2;
pub const PT_FLAG_COMBINE: u32 = 4;
pub const CSTACK_LEN: u32 = 50;
pub const CSF_TRUE: u32 = 1;
pub const CSF_ACTIVE: u32 = 2;
pub const CSF_ELSE: u32 = 4;
pub const CSF_WHILE: u32 = 8;
pub const CSF_FOR: u32 = 16;
pub const CSF_TRY: u32 = 256;
pub const CSF_FINALLY: u32 = 512;
pub const CSF_THROWN: u32 = 1024;
pub const CSF_CAUGHT: u32 = 2048;
pub const CSF_SILENT: u32 = 4096;
pub const CSTP_NONE: u32 = 0;
pub const CSTP_ERROR: u32 = 1;
pub const CSTP_INTERRUPT: u32 = 2;
pub const CSTP_THROW: u32 = 4;
pub const CSTP_BREAK: u32 = 8;
pub const CSTP_CONTINUE: u32 = 16;
pub const CSTP_RETURN: u32 = 24;
pub const CSTP_FINISH: u32 = 32;
pub const CSL_HAD_LOOP: u32 = 1;
pub const CSL_HAD_ENDLOOP: u32 = 2;
pub const CSL_HAD_CONT: u32 = 4;
pub const CSL_HAD_FINA: u32 = 8;
pub const CONV_NONE: u32 = 0;
pub const CONV_TO_UTF8: u32 = 1;
pub const CONV_9_TO_UTF8: u32 = 2;
pub const CONV_TO_LATIN1: u32 = 3;
pub const CONV_TO_LATIN9: u32 = 4;
pub const CONV_ICONV: u32 = 5;
pub const HT_INIT_SIZE: u32 = 16;
pub const VAR_SCOPE: u32 = 1;
pub const VAR_DEF_SCOPE: u32 = 2;
pub const VAR_LOCKED: u32 = 1;
pub const VAR_FIXED: u32 = 2;
pub const DI_FLAGS_RO: u32 = 1;
pub const DI_FLAGS_RO_SBX: u32 = 2;
pub const DI_FLAGS_FIX: u32 = 4;
pub const DI_FLAGS_LOCK: u32 = 8;
pub const DI_FLAGS_ALLOC: u32 = 16;
pub const MAX_FUNC_ARGS: u32 = 20;
pub const VAR_SHORT_LEN: u32 = 20;
pub const FIXVAR_CNT: u32 = 12;
pub const INVALID_FD: i32 = -1;
pub const JO_MODE: u32 = 1;
pub const JO_IN_MODE: u32 = 2;
pub const JO_OUT_MODE: u32 = 4;
pub const JO_ERR_MODE: u32 = 8;
pub const JO_CALLBACK: u32 = 16;
pub const JO_OUT_CALLBACK: u32 = 32;
pub const JO_ERR_CALLBACK: u32 = 64;
pub const JO_CLOSE_CALLBACK: u32 = 128;
pub const JO_WAITTIME: u32 = 256;
pub const JO_TIMEOUT: u32 = 512;
pub const JO_OUT_TIMEOUT: u32 = 1024;
pub const JO_ERR_TIMEOUT: u32 = 2048;
pub const JO_PART: u32 = 4096;
pub const JO_ID: u32 = 8192;
pub const JO_STOPONEXIT: u32 = 16384;
pub const JO_EXIT_CB: u32 = 32768;
pub const JO_OUT_IO: u32 = 65536;
pub const JO_ERR_IO: u32 = 131072;
pub const JO_IN_IO: u32 = 262144;
pub const JO_OUT_NAME: u32 = 524288;
pub const JO_ERR_NAME: u32 = 1048576;
pub const JO_IN_NAME: u32 = 2097152;
pub const JO_IN_TOP: u32 = 4194304;
pub const JO_IN_BOT: u32 = 8388608;
pub const JO_OUT_BUF: u32 = 16777216;
pub const JO_ERR_BUF: u32 = 33554432;
pub const JO_IN_BUF: u32 = 67108864;
pub const JO_CHANNEL: u32 = 134217728;
pub const JO_BLOCK_WRITE: u32 = 268435456;
pub const JO_OUT_MODIFIABLE: u32 = 536870912;
pub const JO_ERR_MODIFIABLE: u32 = 1073741824;
pub const JO_ALL: u32 = 2147483647;
pub const JO2_OUT_MSG: u32 = 1;
pub const JO2_ERR_MSG: u32 = 2;
pub const JO2_TERM_NAME: u32 = 4;
pub const JO2_TERM_FINISH: u32 = 8;
pub const JO2_ENV: u32 = 16;
pub const JO2_CWD: u32 = 32;
pub const JO2_TERM_ROWS: u32 = 64;
pub const JO2_TERM_COLS: u32 = 128;
pub const JO2_VERTICAL: u32 = 256;
pub const JO2_CURWIN: u32 = 512;
pub const JO2_HIDDEN: u32 = 1024;
pub const JO2_TERM_OPENCMD: u32 = 2048;
pub const JO2_EOF_CHARS: u32 = 4096;
pub const JO2_NORESTORE: u32 = 8192;
pub const JO2_TERM_KILL: u32 = 16384;
pub const JO2_ANSI_COLORS: u32 = 32768;
pub const JO2_TTY_TYPE: u32 = 65536;
pub const JO_MODE_ALL: u32 = 15;
pub const JO_CB_ALL: u32 = 240;
pub const JO_TIMEOUT_ALL: u32 = 3584;
pub const SYNSPL_DEFAULT: u32 = 0;
pub const SYNSPL_TOP: u32 = 1;
pub const SYNSPL_NOTOP: u32 = 2;
pub const VIM_SIZEOF_INT: u32 = 4;
pub const B_IMODE_USE_INSERT: i32 = -1;
pub const B_IMODE_NONE: u32 = 0;
pub const B_IMODE_LMAP: u32 = 1;
pub const B_IMODE_IM: u32 = 2;
pub const B_IMODE_LAST: u32 = 2;
pub const BUF_HAS_QF_ENTRY: u32 = 1;
pub const BUF_HAS_LL_ENTRY: u32 = 2;
pub const DB_COUNT: u32 = 8;
pub const SNAP_HELP_IDX: u32 = 0;
pub const SNAP_AUCMD_IDX: u32 = 1;
pub const SNAP_COUNT: u32 = 2;
pub const FR_LEAF: u32 = 0;
pub const FR_ROW: u32 = 1;
pub const FR_COL: u32 = 2;
pub const MAXPOSMATCH: u32 = 8;
pub const CA_COMMAND_BUSY: u32 = 1;
pub const CA_NO_ADJ_OP_END: u32 = 2;
pub const PRINT_NUMBER_WIDTH: u32 = 8;
pub const MAX_ARG_CMDS: u32 = 10;
pub const WIN_HOR: u32 = 1;
pub const WIN_VER: u32 = 2;
pub const WIN_TABS: u32 = 3;
pub const PROF_NONE: u32 = 0;
pub const PROF_YES: u32 = 1;
pub const PROF_PAUSED: u32 = 2;
pub const VALID_PATH: u32 = 1;
pub const VALID_HEAD: u32 = 2;
pub const VV_COUNT: u32 = 0;
pub const VV_COUNT1: u32 = 1;
pub const VV_PREVCOUNT: u32 = 2;
pub const VV_ERRMSG: u32 = 3;
pub const VV_WARNINGMSG: u32 = 4;
pub const VV_STATUSMSG: u32 = 5;
pub const VV_SHELL_ERROR: u32 = 6;
pub const VV_THIS_SESSION: u32 = 7;
pub const VV_VERSION: u32 = 8;
pub const VV_LNUM: u32 = 9;
pub const VV_TERMRESPONSE: u32 = 10;
pub const VV_FNAME: u32 = 11;
pub const VV_LANG: u32 = 12;
pub const VV_LC_TIME: u32 = 13;
pub const VV_CTYPE: u32 = 14;
pub const VV_CC_FROM: u32 = 15;
pub const VV_CC_TO: u32 = 16;
pub const VV_FNAME_IN: u32 = 17;
pub const VV_FNAME_OUT: u32 = 18;
pub const VV_FNAME_NEW: u32 = 19;
pub const VV_FNAME_DIFF: u32 = 20;
pub const VV_CMDARG: u32 = 21;
pub const VV_FOLDSTART: u32 = 22;
pub const VV_FOLDEND: u32 = 23;
pub const VV_FOLDDASHES: u32 = 24;
pub const VV_FOLDLEVEL: u32 = 25;
pub const VV_PROGNAME: u32 = 26;
pub const VV_SEND_SERVER: u32 = 27;
pub const VV_DYING: u32 = 28;
pub const VV_EXCEPTION: u32 = 29;
pub const VV_THROWPOINT: u32 = 30;
pub const VV_REG: u32 = 31;
pub const VV_CMDBANG: u32 = 32;
pub const VV_INSERTMODE: u32 = 33;
pub const VV_VAL: u32 = 34;
pub const VV_KEY: u32 = 35;
pub const VV_PROFILING: u32 = 36;
pub const VV_FCS_REASON: u32 = 37;
pub const VV_FCS_CHOICE: u32 = 38;
pub const VV_BEVAL_BUFNR: u32 = 39;
pub const VV_BEVAL_WINNR: u32 = 40;
pub const VV_BEVAL_WINID: u32 = 41;
pub const VV_BEVAL_LNUM: u32 = 42;
pub const VV_BEVAL_COL: u32 = 43;
pub const VV_BEVAL_TEXT: u32 = 44;
pub const VV_SCROLLSTART: u32 = 45;
pub const VV_SWAPNAME: u32 = 46;
pub const VV_SWAPCHOICE: u32 = 47;
pub const VV_SWAPCOMMAND: u32 = 48;
pub const VV_CHAR: u32 = 49;
pub const VV_MOUSE_WIN: u32 = 50;
pub const VV_MOUSE_WINID: u32 = 51;
pub const VV_MOUSE_LNUM: u32 = 52;
pub const VV_MOUSE_COL: u32 = 53;
pub const VV_OP: u32 = 54;
pub const VV_SEARCHFORWARD: u32 = 55;
pub const VV_HLSEARCH: u32 = 56;
pub const VV_OLDFILES: u32 = 57;
pub const VV_WINDOWID: u32 = 58;
pub const VV_PROGPATH: u32 = 59;
pub const VV_COMPLETED_ITEM: u32 = 60;
pub const VV_OPTION_NEW: u32 = 61;
pub const VV_OPTION_OLD: u32 = 62;
pub const VV_OPTION_TYPE: u32 = 63;
pub const VV_ERRORS: u32 = 64;
pub const VV_FALSE: u32 = 65;
pub const VV_TRUE: u32 = 66;
pub const VV_NULL: u32 = 67;
pub const VV_NONE: u32 = 68;
pub const VV_VIM_DID_ENTER: u32 = 69;
pub const VV_TESTING: u32 = 70;
pub const VV_TYPE_NUMBER: u32 = 71;
pub const VV_TYPE_STRING: u32 = 72;
pub const VV_TYPE_FUNC: u32 = 73;
pub const VV_TYPE_LIST: u32 = 74;
pub const VV_TYPE_DICT: u32 = 75;
pub const VV_TYPE_FLOAT: u32 = 76;
pub const VV_TYPE_BOOL: u32 = 77;
pub const VV_TYPE_NONE: u32 = 78;
pub const VV_TYPE_JOB: u32 = 79;
pub const VV_TYPE_CHANNEL: u32 = 80;
pub const VV_TYPE_BLOB: u32 = 81;
pub const VV_TERMRFGRESP: u32 = 82;
pub const VV_TERMRBGRESP: u32 = 83;
pub const VV_TERMU7RESP: u32 = 84;
pub const VV_TERMSTYLERESP: u32 = 85;
pub const VV_TERMBLINKRESP: u32 = 86;
pub const VV_EVENT: u32 = 87;
pub const VV_LEN: u32 = 88;
pub const VVAL_FALSE: u32 = 0;
pub const VVAL_TRUE: u32 = 1;
pub const VVAL_NONE: u32 = 2;
pub const VVAL_NULL: u32 = 3;
pub const VAR_TYPE_NUMBER: u32 = 0;
pub const VAR_TYPE_STRING: u32 = 1;
pub const VAR_TYPE_FUNC: u32 = 2;
pub const VAR_TYPE_LIST: u32 = 3;
pub const VAR_TYPE_DICT: u32 = 4;
pub const VAR_TYPE_FLOAT: u32 = 5;
pub const VAR_TYPE_BOOL: u32 = 6;
pub const VAR_TYPE_NONE: u32 = 7;
pub const VAR_TYPE_JOB: u32 = 8;
pub const VAR_TYPE_CHANNEL: u32 = 9;
pub const VAR_TYPE_BLOB: u32 = 10;
pub const RANGE: u32 = 1;
pub const BANG: u32 = 2;
pub const EXTRA: u32 = 4;
pub const XFILE: u32 = 8;
pub const NOSPC: u32 = 16;
pub const DFLALL: u32 = 32;
pub const WHOLEFOLD: u32 = 64;
pub const NEEDARG: u32 = 128;
pub const TRLBAR: u32 = 256;
pub const REGSTR: u32 = 512;
pub const COUNT: u32 = 1024;
pub const NOTRLCOM: u32 = 2048;
pub const ZEROR: u32 = 4096;
pub const USECTRLV: u32 = 8192;
pub const EDITCMD: u32 = 16384;
pub const BUFNAME: u32 = 32768;
pub const BUFUNL: u32 = 65536;
pub const ARGOPT: u32 = 131072;
pub const SBOXOK: u32 = 262144;
pub const CMDWIN: u32 = 524288;
pub const MODIFY: u32 = 1048576;
pub const EXFLAGS: u32 = 2097152;
pub const RESTRICT: u32 = 4194304;
pub const FILES: u32 = 12;
pub const WORD1: u32 = 20;
pub const FILE1: u32 = 28;
pub const FORCE_BIN: u32 = 1;
pub const FORCE_NOBIN: u32 = 2;
pub const EXFLAG_LIST: u32 = 1;
pub const EXFLAG_NR: u32 = 2;
pub const EXFLAG_PRINT: u32 = 4;
pub const CLIP_UNNAMED: u32 = 1;
pub const CLIP_UNNAMED_PLUS: u32 = 2;
pub const DBCS_JPN: u32 = 932;
pub const DBCS_JPNU: u32 = 9932;
pub const DBCS_KOR: u32 = 949;
pub const DBCS_KORU: u32 = 9949;
pub const DBCS_CHS: u32 = 936;
pub const DBCS_CHSU: u32 = 9936;
pub const DBCS_CHT: u32 = 950;
pub const DBCS_CHTU: u32 = 9950;
pub const DBCS_2BYTE: u32 = 1;
pub const DBCS_DEBUG: i32 = -1;
pub const NSCRIPT: u32 = 15;
pub const ENC_8BIT: u32 = 1;
pub const ENC_DBCS: u32 = 2;
pub const ENC_UNICODE: u32 = 4;
pub const ENC_ENDIAN_B: u32 = 16;
pub const ENC_ENDIAN_L: u32 = 32;
pub const ENC_2BYTE: u32 = 64;
pub const ENC_4BYTE: u32 = 128;
pub const ENC_2WORD: u32 = 256;
pub const ENC_LATIN1: u32 = 512;
pub const ENC_LATIN9: u32 = 1024;
pub const ENC_MACROMAN: u32 = 2048;
pub const SIGN_BYTE: u32 = 1;
pub const SIGNAL_BLOCK: i32 = -1;
pub const SIGNAL_UNBLOCK: i32 = -2;
pub const VGR_GLOBAL: u32 = 1;
pub const VGR_NOJUMP: u32 = 2;
pub const BAD_REPLACE: u8 = 63u8;
pub const BAD_KEEP: i32 = -1;
pub const BAD_DROP: i32 = -2;
pub const DOSO_NONE: u32 = 0;
pub const DOSO_VIMRC: u32 = 1;
pub const DOSO_GVIMRC: u32 = 2;
pub const VIF_WANT_INFO: u32 = 1;
pub const VIF_WANT_MARKS: u32 = 2;
pub const VIF_FORCEIT: u32 = 4;
pub const VIF_GET_OLDFILES: u32 = 8;
pub const BFA_DEL: u32 = 1;
pub const BFA_WIPE: u32 = 2;
pub const BFA_KEEP_UNDO: u32 = 4;
pub const MSCR_DOWN: u32 = 0;
pub const MSCR_UP: u32 = 1;
pub const MSCR_LEFT: i32 = -1;
pub const MSCR_RIGHT: i32 = -2;
pub const KEYLEN_PART_KEY: i32 = -1;
pub const KEYLEN_PART_MAP: i32 = -2;
pub const KEYLEN_REMOVED: u32 = 9999;
pub const FILEINFO_OK: u32 = 0;
pub const FILEINFO_ENC_FAIL: u32 = 1;
pub const FILEINFO_READ_FAIL: u32 = 2;
pub const FILEINFO_INFO_FAIL: u32 = 3;
pub const SOPT_BOOL: u32 = 1;
pub const SOPT_NUM: u32 = 2;
pub const SOPT_STRING: u32 = 4;
pub const SOPT_GLOBAL: u32 = 8;
pub const SOPT_WIN: u32 = 16;
pub const SOPT_BUF: u32 = 32;
pub const SOPT_UNSET: u32 = 64;
pub const SREQ_GLOBAL: u32 = 0;
pub const SREQ_WIN: u32 = 1;
pub const SREQ_BUF: u32 = 2;
pub const GREG_NO_EXPR: u32 = 1;
pub const GREG_EXPR_SRC: u32 = 2;
pub const GREG_LIST: u32 = 4;
pub const AUTOLOAD_CHAR: u8 = 35u8;
pub const MAX_OPEN_CHANNELS: u32 = 0;
pub const JSON_JS: u32 = 1;
pub const JSON_NO_NONE: u32 = 2;
pub const JSON_NL: u32 = 4;
pub const DIP_ALL: u32 = 1;
pub const DIP_DIR: u32 = 2;
pub const DIP_ERR: u32 = 4;
pub const DIP_START: u32 = 8;
pub const DIP_OPT: u32 = 16;
pub const DIP_NORTP: u32 = 32;
pub const DIP_NOAFTER: u32 = 64;
pub const DIP_AFTER: u32 = 128;
pub const LOWEST_WIN_ID: u32 = 1000;
pub const COPYID_INC: u32 = 2;
pub const COPYID_MASK: i32 = -2;
pub const TFN_INT: u32 = 1;
pub const TFN_QUIET: u32 = 2;
pub const TFN_NO_AUTOLOAD: u32 = 4;
pub const TFN_NO_DEREF: u32 = 8;
pub const TFN_READ_ONLY: u32 = 16;
pub const GLV_QUIET: u32 = 2;
pub const GLV_NO_AUTOLOAD: u32 = 4;
pub const GLV_READ_ONLY: u32 = 16;
pub const DO_NOT_FREE_CNT: u32 = 99999;
pub const ERROR_UNKNOWN: u32 = 0;
pub const ERROR_TOOMANY: u32 = 1;
pub const ERROR_TOOFEW: u32 = 2;
pub const ERROR_SCRIPT: u32 = 3;
pub const ERROR_DICT: u32 = 4;
pub const ERROR_NONE: u32 = 5;
pub const ERROR_OTHER: u32 = 6;
pub const ERROR_DELETED: u32 = 7;
pub const FNE_INCL_BR: u32 = 1;
pub const FNE_CHECK_START: u32 = 2;
pub const REPLACE_CR_NCHAR: i32 = -1;
pub const REPLACE_NL_NCHAR: i32 = -2;
pub const TERM_START_NOJOB: u32 = 1;
pub const TERM_START_FORCEIT: u32 = 2;
pub const TERM_START_SYSTEM: u32 = 4;
pub const SAVE_RESTORE_TITLE: u32 = 1;
pub const SAVE_RESTORE_ICON: u32 = 2;
pub const SAVE_RESTORE_BOTH: u32 = 3;
pub const APC_SAVE_FOR_UNDO: u32 = 1;
pub const APC_SUBSTITUTE: u32 = 2;
pub type char_u = ::std::os::raw::c_uchar;
pub type short_u = ::std::os::raw::c_ushort;
pub type int_u = ::std::os::raw::c_uint;
pub type long_long_T = ::std::os::raw::c_longlong;
pub type long_long_u_T = ::std::os::raw::c_ulonglong;
pub type long_u = ::std::os::raw::c_ulong;
pub type long_i = ::std::os::raw::c_long;
pub type off_T = ::std::os::raw::c_long;
pub type schar_T = char_u;
pub type sattr_T = ::std::os::raw::c_ushort;
pub type u8char_T = ::std::os::raw::c_uint;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type size_t = __darwin_size_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__nranges as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sgetrune as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sputrune as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__invalid_rune as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype_ext as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower_ext as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper_ext as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable_len as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__ncharclasses as *const _ as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__charclasses as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type ssize_t = __darwin_ssize_t;
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const key_extra_KE_NAME: key_extra = 3;
pub const key_extra_KE_S_UP: key_extra = 4;
pub const key_extra_KE_S_DOWN: key_extra = 5;
pub const key_extra_KE_S_F1: key_extra = 6;
pub const key_extra_KE_S_F2: key_extra = 7;
pub const key_extra_KE_S_F3: key_extra = 8;
pub const key_extra_KE_S_F4: key_extra = 9;
pub const key_extra_KE_S_F5: key_extra = 10;
pub const key_extra_KE_S_F6: key_extra = 11;
pub const key_extra_KE_S_F7: key_extra = 12;
pub const key_extra_KE_S_F8: key_extra = 13;
pub const key_extra_KE_S_F9: key_extra = 14;
pub const key_extra_KE_S_F10: key_extra = 15;
pub const key_extra_KE_S_F11: key_extra = 16;
pub const key_extra_KE_S_F12: key_extra = 17;
pub const key_extra_KE_S_F13: key_extra = 18;
pub const key_extra_KE_S_F14: key_extra = 19;
pub const key_extra_KE_S_F15: key_extra = 20;
pub const key_extra_KE_S_F16: key_extra = 21;
pub const key_extra_KE_S_F17: key_extra = 22;
pub const key_extra_KE_S_F18: key_extra = 23;
pub const key_extra_KE_S_F19: key_extra = 24;
pub const key_extra_KE_S_F20: key_extra = 25;
pub const key_extra_KE_S_F21: key_extra = 26;
pub const key_extra_KE_S_F22: key_extra = 27;
pub const key_extra_KE_S_F23: key_extra = 28;
pub const key_extra_KE_S_F24: key_extra = 29;
pub const key_extra_KE_S_F25: key_extra = 30;
pub const key_extra_KE_S_F26: key_extra = 31;
pub const key_extra_KE_S_F27: key_extra = 32;
pub const key_extra_KE_S_F28: key_extra = 33;
pub const key_extra_KE_S_F29: key_extra = 34;
pub const key_extra_KE_S_F30: key_extra = 35;
pub const key_extra_KE_S_F31: key_extra = 36;
pub const key_extra_KE_S_F32: key_extra = 37;
pub const key_extra_KE_S_F33: key_extra = 38;
pub const key_extra_KE_S_F34: key_extra = 39;
pub const key_extra_KE_S_F35: key_extra = 40;
pub const key_extra_KE_S_F36: key_extra = 41;
pub const key_extra_KE_S_F37: key_extra = 42;
pub const key_extra_KE_MOUSE: key_extra = 43;
pub const key_extra_KE_LEFTMOUSE: key_extra = 44;
pub const key_extra_KE_LEFTDRAG: key_extra = 45;
pub const key_extra_KE_LEFTRELEASE: key_extra = 46;
pub const key_extra_KE_MIDDLEMOUSE: key_extra = 47;
pub const key_extra_KE_MIDDLEDRAG: key_extra = 48;
pub const key_extra_KE_MIDDLERELEASE: key_extra = 49;
pub const key_extra_KE_RIGHTMOUSE: key_extra = 50;
pub const key_extra_KE_RIGHTDRAG: key_extra = 51;
pub const key_extra_KE_RIGHTRELEASE: key_extra = 52;
pub const key_extra_KE_IGNORE: key_extra = 53;
pub const key_extra_KE_TAB: key_extra = 54;
pub const key_extra_KE_S_TAB_OLD: key_extra = 55;
pub const key_extra_KE_SNIFF_UNUSED: key_extra = 56;
pub const key_extra_KE_XF1: key_extra = 57;
pub const key_extra_KE_XF2: key_extra = 58;
pub const key_extra_KE_XF3: key_extra = 59;
pub const key_extra_KE_XF4: key_extra = 60;
pub const key_extra_KE_XEND: key_extra = 61;
pub const key_extra_KE_ZEND: key_extra = 62;
pub const key_extra_KE_XHOME: key_extra = 63;
pub const key_extra_KE_ZHOME: key_extra = 64;
pub const key_extra_KE_XUP: key_extra = 65;
pub const key_extra_KE_XDOWN: key_extra = 66;
pub const key_extra_KE_XLEFT: key_extra = 67;
pub const key_extra_KE_XRIGHT: key_extra = 68;
pub const key_extra_KE_LEFTMOUSE_NM: key_extra = 69;
pub const key_extra_KE_LEFTRELEASE_NM: key_extra = 70;
pub const key_extra_KE_S_XF1: key_extra = 71;
pub const key_extra_KE_S_XF2: key_extra = 72;
pub const key_extra_KE_S_XF3: key_extra = 73;
pub const key_extra_KE_S_XF4: key_extra = 74;
pub const key_extra_KE_MOUSEDOWN: key_extra = 75;
pub const key_extra_KE_MOUSEUP: key_extra = 76;
pub const key_extra_KE_MOUSELEFT: key_extra = 77;
pub const key_extra_KE_MOUSERIGHT: key_extra = 78;
pub const key_extra_KE_KINS: key_extra = 79;
pub const key_extra_KE_KDEL: key_extra = 80;
pub const key_extra_KE_CSI: key_extra = 81;
pub const key_extra_KE_SNR: key_extra = 82;
pub const key_extra_KE_PLUG: key_extra = 83;
pub const key_extra_KE_CMDWIN: key_extra = 84;
pub const key_extra_KE_C_LEFT: key_extra = 85;
pub const key_extra_KE_C_RIGHT: key_extra = 86;
pub const key_extra_KE_C_HOME: key_extra = 87;
pub const key_extra_KE_C_END: key_extra = 88;
pub const key_extra_KE_X1MOUSE: key_extra = 89;
pub const key_extra_KE_X1DRAG: key_extra = 90;
pub const key_extra_KE_X1RELEASE: key_extra = 91;
pub const key_extra_KE_X2MOUSE: key_extra = 92;
pub const key_extra_KE_X2DRAG: key_extra = 93;
pub const key_extra_KE_X2RELEASE: key_extra = 94;
pub const key_extra_KE_DROP: key_extra = 95;
pub const key_extra_KE_CURSORHOLD: key_extra = 96;
pub const key_extra_KE_NOP: key_extra = 97;
pub const key_extra_KE_FOCUSGAINED: key_extra = 98;
pub const key_extra_KE_FOCUSLOST: key_extra = 99;
pub const key_extra_KE_MOUSEMOVE: key_extra = 100;
pub const key_extra_KE_CANCEL: key_extra = 101;
pub type key_extra = ::std::os::raw::c_uint;
pub const SpecialKey_KS_NAME: SpecialKey = 0;
pub const SpecialKey_KS_CE: SpecialKey = 1;
pub const SpecialKey_KS_AL: SpecialKey = 2;
pub const SpecialKey_KS_CAL: SpecialKey = 3;
pub const SpecialKey_KS_DL: SpecialKey = 4;
pub const SpecialKey_KS_CDL: SpecialKey = 5;
pub const SpecialKey_KS_CS: SpecialKey = 6;
pub const SpecialKey_KS_CL: SpecialKey = 7;
pub const SpecialKey_KS_CD: SpecialKey = 8;
pub const SpecialKey_KS_UT: SpecialKey = 9;
pub const SpecialKey_KS_DA: SpecialKey = 10;
pub const SpecialKey_KS_DB: SpecialKey = 11;
pub const SpecialKey_KS_VI: SpecialKey = 12;
pub const SpecialKey_KS_VE: SpecialKey = 13;
pub const SpecialKey_KS_VS: SpecialKey = 14;
pub const SpecialKey_KS_CVS: SpecialKey = 15;
pub const SpecialKey_KS_CSH: SpecialKey = 16;
pub const SpecialKey_KS_CRC: SpecialKey = 17;
pub const SpecialKey_KS_CRS: SpecialKey = 18;
pub const SpecialKey_KS_ME: SpecialKey = 19;
pub const SpecialKey_KS_MR: SpecialKey = 20;
pub const SpecialKey_KS_MD: SpecialKey = 21;
pub const SpecialKey_KS_SE: SpecialKey = 22;
pub const SpecialKey_KS_SO: SpecialKey = 23;
pub const SpecialKey_KS_CZH: SpecialKey = 24;
pub const SpecialKey_KS_CZR: SpecialKey = 25;
pub const SpecialKey_KS_UE: SpecialKey = 26;
pub const SpecialKey_KS_US: SpecialKey = 27;
pub const SpecialKey_KS_UCE: SpecialKey = 28;
pub const SpecialKey_KS_UCS: SpecialKey = 29;
pub const SpecialKey_KS_STE: SpecialKey = 30;
pub const SpecialKey_KS_STS: SpecialKey = 31;
pub const SpecialKey_KS_MS: SpecialKey = 32;
pub const SpecialKey_KS_CM: SpecialKey = 33;
pub const SpecialKey_KS_SR: SpecialKey = 34;
pub const SpecialKey_KS_CRI: SpecialKey = 35;
pub const SpecialKey_KS_VB: SpecialKey = 36;
pub const SpecialKey_KS_KS: SpecialKey = 37;
pub const SpecialKey_KS_KE: SpecialKey = 38;
pub const SpecialKey_KS_TI: SpecialKey = 39;
pub const SpecialKey_KS_TE: SpecialKey = 40;
pub const SpecialKey_KS_BC: SpecialKey = 41;
pub const SpecialKey_KS_CCS: SpecialKey = 42;
pub const SpecialKey_KS_CCO: SpecialKey = 43;
pub const SpecialKey_KS_CSF: SpecialKey = 44;
pub const SpecialKey_KS_CSB: SpecialKey = 45;
pub const SpecialKey_KS_XS: SpecialKey = 46;
pub const SpecialKey_KS_XN: SpecialKey = 47;
pub const SpecialKey_KS_MB: SpecialKey = 48;
pub const SpecialKey_KS_CAF: SpecialKey = 49;
pub const SpecialKey_KS_CAB: SpecialKey = 50;
pub const SpecialKey_KS_LE: SpecialKey = 51;
pub const SpecialKey_KS_ND: SpecialKey = 52;
pub const SpecialKey_KS_CIS: SpecialKey = 53;
pub const SpecialKey_KS_CIE: SpecialKey = 54;
pub const SpecialKey_KS_CSC: SpecialKey = 55;
pub const SpecialKey_KS_CEC: SpecialKey = 56;
pub const SpecialKey_KS_TS: SpecialKey = 57;
pub const SpecialKey_KS_FS: SpecialKey = 58;
pub const SpecialKey_KS_CWP: SpecialKey = 59;
pub const SpecialKey_KS_CGP: SpecialKey = 60;
pub const SpecialKey_KS_CWS: SpecialKey = 61;
pub const SpecialKey_KS_CRV: SpecialKey = 62;
pub const SpecialKey_KS_RFG: SpecialKey = 63;
pub const SpecialKey_KS_RBG: SpecialKey = 64;
pub const SpecialKey_KS_CSI: SpecialKey = 65;
pub const SpecialKey_KS_CEI: SpecialKey = 66;
pub const SpecialKey_KS_CSR: SpecialKey = 67;
pub const SpecialKey_KS_CSV: SpecialKey = 68;
pub const SpecialKey_KS_OP: SpecialKey = 69;
pub const SpecialKey_KS_U7: SpecialKey = 70;
pub const SpecialKey_KS_8F: SpecialKey = 71;
pub const SpecialKey_KS_8B: SpecialKey = 72;
pub const SpecialKey_KS_CBE: SpecialKey = 73;
pub const SpecialKey_KS_CBD: SpecialKey = 74;
pub const SpecialKey_KS_CPS: SpecialKey = 75;
pub const SpecialKey_KS_CPE: SpecialKey = 76;
pub const SpecialKey_KS_CST: SpecialKey = 77;
pub const SpecialKey_KS_CRT: SpecialKey = 78;
pub const SpecialKey_KS_SSI: SpecialKey = 79;
pub const SpecialKey_KS_SRI: SpecialKey = 80;
pub type SpecialKey = ::std::os::raw::c_uint;
extern "C" {
    pub static mut term_strings: [*mut char_u; 0usize];
}
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type __gnuc_va_list = __builtin_va_list;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type max_align_t = u128;
pub const btype_T_BVAL_NR: btype_T = 0;
pub const btype_T_BVAL_STRING: btype_T = 1;
pub const btype_T_BVAL_EMPTY: btype_T = 2;
pub type btype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bval_T {
    pub bv_type: btype_T,
    pub bv_nr: ::std::os::raw::c_long,
    pub bv_string: *mut char_u,
    pub bv_len: ::std::os::raw::c_int,
    pub bv_allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bval_T() {
    assert_eq!(
        ::std::mem::size_of::<bval_T>(),
        32usize,
        concat!("Size of: ", stringify!(bval_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bval_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bval_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bval_T>())).bv_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bval_T>())).bv_nr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bval_T>())).bv_string as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bval_T>())).bv_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bval_T>())).bv_allocated as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bval_T),
            "::",
            stringify!(bv_allocated)
        )
    );
}
pub const auto_event_EVENT_BUFADD: auto_event = 0;
pub const auto_event_EVENT_BUFDELETE: auto_event = 1;
pub const auto_event_EVENT_BUFENTER: auto_event = 2;
pub const auto_event_EVENT_BUFFILEPOST: auto_event = 3;
pub const auto_event_EVENT_BUFFILEPRE: auto_event = 4;
pub const auto_event_EVENT_BUFHIDDEN: auto_event = 5;
pub const auto_event_EVENT_BUFLEAVE: auto_event = 6;
pub const auto_event_EVENT_BUFNEW: auto_event = 7;
pub const auto_event_EVENT_BUFNEWFILE: auto_event = 8;
pub const auto_event_EVENT_BUFREADCMD: auto_event = 9;
pub const auto_event_EVENT_BUFREADPOST: auto_event = 10;
pub const auto_event_EVENT_BUFREADPRE: auto_event = 11;
pub const auto_event_EVENT_BUFUNLOAD: auto_event = 12;
pub const auto_event_EVENT_BUFWINENTER: auto_event = 13;
pub const auto_event_EVENT_BUFWINLEAVE: auto_event = 14;
pub const auto_event_EVENT_BUFWIPEOUT: auto_event = 15;
pub const auto_event_EVENT_BUFWRITECMD: auto_event = 16;
pub const auto_event_EVENT_BUFWRITEPOST: auto_event = 17;
pub const auto_event_EVENT_BUFWRITEPRE: auto_event = 18;
pub const auto_event_EVENT_CMDLINECHANGED: auto_event = 19;
pub const auto_event_EVENT_CMDLINEENTER: auto_event = 20;
pub const auto_event_EVENT_CMDLINELEAVE: auto_event = 21;
pub const auto_event_EVENT_CMDUNDEFINED: auto_event = 22;
pub const auto_event_EVENT_CMDWINENTER: auto_event = 23;
pub const auto_event_EVENT_CMDWINLEAVE: auto_event = 24;
pub const auto_event_EVENT_COLORSCHEME: auto_event = 25;
pub const auto_event_EVENT_COLORSCHEMEPRE: auto_event = 26;
pub const auto_event_EVENT_COMPLETECHANGED: auto_event = 27;
pub const auto_event_EVENT_COMPLETEDONE: auto_event = 28;
pub const auto_event_EVENT_CURSORHOLD: auto_event = 29;
pub const auto_event_EVENT_CURSORHOLDI: auto_event = 30;
pub const auto_event_EVENT_CURSORMOVED: auto_event = 31;
pub const auto_event_EVENT_CURSORMOVEDI: auto_event = 32;
pub const auto_event_EVENT_DIFFUPDATED: auto_event = 33;
pub const auto_event_EVENT_DIRCHANGED: auto_event = 34;
pub const auto_event_EVENT_ENCODINGCHANGED: auto_event = 35;
pub const auto_event_EVENT_EXITPRE: auto_event = 36;
pub const auto_event_EVENT_FILEAPPENDCMD: auto_event = 37;
pub const auto_event_EVENT_FILEAPPENDPOST: auto_event = 38;
pub const auto_event_EVENT_FILEAPPENDPRE: auto_event = 39;
pub const auto_event_EVENT_FILECHANGEDRO: auto_event = 40;
pub const auto_event_EVENT_FILECHANGEDSHELL: auto_event = 41;
pub const auto_event_EVENT_FILECHANGEDSHELLPOST: auto_event = 42;
pub const auto_event_EVENT_FILEREADCMD: auto_event = 43;
pub const auto_event_EVENT_FILEREADPOST: auto_event = 44;
pub const auto_event_EVENT_FILEREADPRE: auto_event = 45;
pub const auto_event_EVENT_FILETYPE: auto_event = 46;
pub const auto_event_EVENT_FILEWRITECMD: auto_event = 47;
pub const auto_event_EVENT_FILEWRITEPOST: auto_event = 48;
pub const auto_event_EVENT_FILEWRITEPRE: auto_event = 49;
pub const auto_event_EVENT_FILTERREADPOST: auto_event = 50;
pub const auto_event_EVENT_FILTERREADPRE: auto_event = 51;
pub const auto_event_EVENT_FILTERWRITEPOST: auto_event = 52;
pub const auto_event_EVENT_FILTERWRITEPRE: auto_event = 53;
pub const auto_event_EVENT_FOCUSGAINED: auto_event = 54;
pub const auto_event_EVENT_FOCUSLOST: auto_event = 55;
pub const auto_event_EVENT_FUNCUNDEFINED: auto_event = 56;
pub const auto_event_EVENT_GUIENTER: auto_event = 57;
pub const auto_event_EVENT_GUIFAILED: auto_event = 58;
pub const auto_event_EVENT_INSERTCHANGE: auto_event = 59;
pub const auto_event_EVENT_INSERTCHARPRE: auto_event = 60;
pub const auto_event_EVENT_INSERTENTER: auto_event = 61;
pub const auto_event_EVENT_INSERTLEAVE: auto_event = 62;
pub const auto_event_EVENT_MENUPOPUP: auto_event = 63;
pub const auto_event_EVENT_OPTIONSET: auto_event = 64;
pub const auto_event_EVENT_QUICKFIXCMDPOST: auto_event = 65;
pub const auto_event_EVENT_QUICKFIXCMDPRE: auto_event = 66;
pub const auto_event_EVENT_QUITPRE: auto_event = 67;
pub const auto_event_EVENT_REMOTEREPLY: auto_event = 68;
pub const auto_event_EVENT_SESSIONLOADPOST: auto_event = 69;
pub const auto_event_EVENT_SHELLCMDPOST: auto_event = 70;
pub const auto_event_EVENT_SHELLFILTERPOST: auto_event = 71;
pub const auto_event_EVENT_SOURCECMD: auto_event = 72;
pub const auto_event_EVENT_SOURCEPRE: auto_event = 73;
pub const auto_event_EVENT_SOURCEPOST: auto_event = 74;
pub const auto_event_EVENT_SPELLFILEMISSING: auto_event = 75;
pub const auto_event_EVENT_STDINREADPOST: auto_event = 76;
pub const auto_event_EVENT_STDINREADPRE: auto_event = 77;
pub const auto_event_EVENT_SWAPEXISTS: auto_event = 78;
pub const auto_event_EVENT_SYNTAX: auto_event = 79;
pub const auto_event_EVENT_TABCLOSED: auto_event = 80;
pub const auto_event_EVENT_TABENTER: auto_event = 81;
pub const auto_event_EVENT_TABLEAVE: auto_event = 82;
pub const auto_event_EVENT_TABNEW: auto_event = 83;
pub const auto_event_EVENT_TERMCHANGED: auto_event = 84;
pub const auto_event_EVENT_TERMINALOPEN: auto_event = 85;
pub const auto_event_EVENT_TERMRESPONSE: auto_event = 86;
pub const auto_event_EVENT_TEXTCHANGED: auto_event = 87;
pub const auto_event_EVENT_TEXTCHANGEDI: auto_event = 88;
pub const auto_event_EVENT_TEXTCHANGEDP: auto_event = 89;
pub const auto_event_EVENT_TEXTYANKPOST: auto_event = 90;
pub const auto_event_EVENT_USER: auto_event = 91;
pub const auto_event_EVENT_VIMENTER: auto_event = 92;
pub const auto_event_EVENT_VIMLEAVE: auto_event = 93;
pub const auto_event_EVENT_VIMLEAVEPRE: auto_event = 94;
pub const auto_event_EVENT_VIMRESIZED: auto_event = 95;
pub const auto_event_EVENT_WINENTER: auto_event = 96;
pub const auto_event_EVENT_WINLEAVE: auto_event = 97;
pub const auto_event_EVENT_WINNEW: auto_event = 98;
pub const auto_event_NUM_EVENTS: auto_event = 99;
pub type auto_event = ::std::os::raw::c_uint;
pub use self::auto_event as event_T;
pub const hlf_T_HLF_8: hlf_T = 0;
pub const hlf_T_HLF_EOB: hlf_T = 1;
pub const hlf_T_HLF_AT: hlf_T = 2;
pub const hlf_T_HLF_D: hlf_T = 3;
pub const hlf_T_HLF_E: hlf_T = 4;
pub const hlf_T_HLF_H: hlf_T = 5;
pub const hlf_T_HLF_I: hlf_T = 6;
pub const hlf_T_HLF_L: hlf_T = 7;
pub const hlf_T_HLF_M: hlf_T = 8;
pub const hlf_T_HLF_CM: hlf_T = 9;
pub const hlf_T_HLF_N: hlf_T = 10;
pub const hlf_T_HLF_CLN: hlf_T = 11;
pub const hlf_T_HLF_R: hlf_T = 12;
pub const hlf_T_HLF_S: hlf_T = 13;
pub const hlf_T_HLF_SNC: hlf_T = 14;
pub const hlf_T_HLF_C: hlf_T = 15;
pub const hlf_T_HLF_T: hlf_T = 16;
pub const hlf_T_HLF_V: hlf_T = 17;
pub const hlf_T_HLF_VNC: hlf_T = 18;
pub const hlf_T_HLF_W: hlf_T = 19;
pub const hlf_T_HLF_WM: hlf_T = 20;
pub const hlf_T_HLF_FL: hlf_T = 21;
pub const hlf_T_HLF_FC: hlf_T = 22;
pub const hlf_T_HLF_ADD: hlf_T = 23;
pub const hlf_T_HLF_CHD: hlf_T = 24;
pub const hlf_T_HLF_DED: hlf_T = 25;
pub const hlf_T_HLF_TXD: hlf_T = 26;
pub const hlf_T_HLF_CONCEAL: hlf_T = 27;
pub const hlf_T_HLF_SC: hlf_T = 28;
pub const hlf_T_HLF_SPB: hlf_T = 29;
pub const hlf_T_HLF_SPC: hlf_T = 30;
pub const hlf_T_HLF_SPR: hlf_T = 31;
pub const hlf_T_HLF_SPL: hlf_T = 32;
pub const hlf_T_HLF_PNI: hlf_T = 33;
pub const hlf_T_HLF_PSI: hlf_T = 34;
pub const hlf_T_HLF_PSB: hlf_T = 35;
pub const hlf_T_HLF_PST: hlf_T = 36;
pub const hlf_T_HLF_TP: hlf_T = 37;
pub const hlf_T_HLF_TPS: hlf_T = 38;
pub const hlf_T_HLF_TPF: hlf_T = 39;
pub const hlf_T_HLF_CUC: hlf_T = 40;
pub const hlf_T_HLF_CUL: hlf_T = 41;
pub const hlf_T_HLF_MC: hlf_T = 42;
pub const hlf_T_HLF_QFL: hlf_T = 43;
pub const hlf_T_HLF_ST: hlf_T = 44;
pub const hlf_T_HLF_STNC: hlf_T = 45;
pub const hlf_T_HLF_COUNT: hlf_T = 46;
pub type hlf_T = ::std::os::raw::c_uint;
pub type UINT32_T = ::std::os::raw::c_uint;
pub type linenr_T = ::std::os::raw::c_long;
pub type colnr_T = ::std::os::raw::c_int;
pub type disptick_T = ::std::os::raw::c_ushort;
pub type vim_acl_T = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn vim_memset(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type proftime_T = ::std::os::raw::c_int;
pub type time_T = ::std::os::raw::c_long;
pub type sock_T = ::std::os::raw::c_int;
extern "C" {
    pub static mut p_ambw: *mut char_u;
}
extern "C" {
    pub static mut p_emoji: *mut char_u;
}
extern "C" {
    pub static mut p_ar: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_aw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_awa: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_bs: *mut char_u;
}
extern "C" {
    pub static mut p_bg: *mut char_u;
}
extern "C" {
    pub static mut p_bk: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_bkc: *mut char_u;
}
extern "C" {
    pub static mut bkc_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_bdir: *mut char_u;
}
extern "C" {
    pub static mut p_bex: *mut char_u;
}
extern "C" {
    pub static mut p_bo: *mut char_u;
}
extern "C" {
    pub static mut bo_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_bsk: *mut char_u;
}
extern "C" {
    pub static mut p_breakat: *mut char_u;
}
extern "C" {
    pub static mut p_cmp: *mut char_u;
}
extern "C" {
    pub static mut cmp_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_enc: *mut char_u;
}
extern "C" {
    pub static mut p_deco: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ccv: *mut char_u;
}
extern "C" {
    pub static mut p_ch: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_codelens: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_cp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_cpo: *mut char_u;
}
extern "C" {
    pub static mut p_debug: *mut char_u;
}
extern "C" {
    pub static mut p_def: *mut char_u;
}
extern "C" {
    pub static mut p_inc: *mut char_u;
}
extern "C" {
    pub static mut p_dip: *mut char_u;
}
extern "C" {
    pub static mut p_dex: *mut char_u;
}
extern "C" {
    pub static mut p_dir: *mut char_u;
}
extern "C" {
    pub static mut p_dy: *mut char_u;
}
extern "C" {
    pub static mut dy_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_ed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ead: *mut char_u;
}
extern "C" {
    pub static mut p_ea: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ep: *mut char_u;
}
extern "C" {
    pub static mut p_eb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ef: *mut char_u;
}
extern "C" {
    pub static mut p_efm: *mut char_u;
}
extern "C" {
    pub static mut p_gefm: *mut char_u;
}
extern "C" {
    pub static mut p_gp: *mut char_u;
}
extern "C" {
    pub static mut p_ei: *mut char_u;
}
extern "C" {
    pub static mut p_ek: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_exrc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_fencs: *mut char_u;
}
extern "C" {
    pub static mut p_ffs: *mut char_u;
}
extern "C" {
    pub static mut p_fic: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fcl: *mut char_u;
}
extern "C" {
    pub static mut p_fdls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fdo: *mut char_u;
}
extern "C" {
    pub static mut fdo_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_fp: *mut char_u;
}
extern "C" {
    pub static mut p_gd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_guifont: *mut char_u;
}
extern "C" {
    pub static mut p_prompt: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hf: *mut char_u;
}
extern "C" {
    pub static mut p_hh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_hlg: *mut char_u;
}
extern "C" {
    pub static mut p_hid: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hl: *mut char_u;
}
extern "C" {
    pub static mut p_hls: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_hi: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_imaf: *mut char_u;
}
extern "C" {
    pub static mut p_imsf: *mut char_u;
}
extern "C" {
    pub static mut p_imcmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_imdisable: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_is: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_im: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_isf: *mut char_u;
}
extern "C" {
    pub static mut p_isi: *mut char_u;
}
extern "C" {
    pub static mut p_isp: *mut char_u;
}
extern "C" {
    pub static mut p_js: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_keydisplay: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_kp: *mut char_u;
}
extern "C" {
    pub static mut p_km: *mut char_u;
}
extern "C" {
    pub static mut p_ls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_stal: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_linespace: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_lcs: *mut char_u;
}
extern "C" {
    pub static mut p_lz: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_lpl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_magic: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_menc: *mut char_u;
}
extern "C" {
    pub static mut p_mef: *mut char_u;
}
extern "C" {
    pub static mut p_mp: *mut char_u;
}
extern "C" {
    pub static mut p_mat: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mco: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mfd: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmd: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmp: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mmt: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_minimap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_mle: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mls: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_mouse: *mut char_u;
}
extern "C" {
    pub static mut p_mousem: *mut char_u;
}
extern "C" {
    pub static mut p_mouset: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_opfunc: *mut char_u;
}
extern "C" {
    pub static mut p_para: *mut char_u;
}
extern "C" {
    pub static mut p_paste: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_pt: *mut char_u;
}
extern "C" {
    pub static mut p_pex: *mut char_u;
}
extern "C" {
    pub static mut p_pm: *mut char_u;
}
extern "C" {
    pub static mut p_path: *mut char_u;
}
extern "C" {
    pub static mut p_cdpath: *mut char_u;
}
extern "C" {
    pub static mut p_remap: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_re: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_report: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_pvh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_pp: *mut char_u;
}
extern "C" {
    pub static mut p_rtp: *mut char_u;
}
extern "C" {
    pub static mut p_sj: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_so: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_sbo: *mut char_u;
}
extern "C" {
    pub static mut p_sections: *mut char_u;
}
extern "C" {
    pub static mut p_secure: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sel: *mut char_u;
}
extern "C" {
    pub static mut p_slm: *mut char_u;
}
extern "C" {
    pub static mut p_ssop: *mut char_u;
}
extern "C" {
    pub static mut ssop_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_sh: *mut char_u;
}
extern "C" {
    pub static mut p_shcf: *mut char_u;
}
extern "C" {
    pub static mut p_sp: *mut char_u;
}
extern "C" {
    pub static mut p_shq: *mut char_u;
}
extern "C" {
    pub static mut p_sxq: *mut char_u;
}
extern "C" {
    pub static mut p_sxe: *mut char_u;
}
extern "C" {
    pub static mut p_srr: *mut char_u;
}
extern "C" {
    pub static mut p_stmp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_shm: *mut char_u;
}
extern "C" {
    pub static mut p_sbr: *mut char_u;
}
extern "C" {
    pub static mut p_sft: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sm: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_smd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ss: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_siso: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_scs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sta: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_smoothscroll: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tpm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_spr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_sol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_su: *mut char_u;
}
extern "C" {
    pub static mut p_sws: *mut char_u;
}
extern "C" {
    pub static mut p_swb: *mut char_u;
}
extern "C" {
    pub static mut swb_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_tbs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tc: *mut char_u;
}
extern "C" {
    pub static mut tc_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_tl: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_tr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tags: *mut char_u;
}
extern "C" {
    pub static mut p_tgst: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tenc: *mut char_u;
}
extern "C" {
    pub static mut p_termfont: *mut char_u;
}
extern "C" {
    pub static mut p_terse: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ta: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_to: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_timeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ttimeout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ttm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_tbi: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_tf: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ttyscroll: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_udir: *mut char_u;
}
extern "C" {
    pub static mut p_ul: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ur: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_uc: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ut: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_fcs: *mut char_u;
}
extern "C" {
    pub static mut p_vcp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_viminfo: *mut char_u;
}
extern "C" {
    pub static mut p_viminfofile: *mut char_u;
}
extern "C" {
    pub static mut p_vdir: *mut char_u;
}
extern "C" {
    pub static mut p_vop: *mut char_u;
}
extern "C" {
    pub static mut vop_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_vb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ve: *mut char_u;
}
extern "C" {
    pub static mut ve_flags: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut p_verbose: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_vfile: *mut char_u;
}
extern "C" {
    pub static mut p_warn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wop: *mut char_u;
}
extern "C" {
    pub static mut p_window: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wig: *mut char_u;
}
extern "C" {
    pub static mut p_wiv: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_ww: *mut char_u;
}
extern "C" {
    pub static mut p_wc: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wcm: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wic: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wim: *mut char_u;
}
extern "C" {
    pub static mut p_wh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wmh: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wmw: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_wiw: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut p_ws: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_write: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wa: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wb: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut p_wd: ::std::os::raw::c_long;
}
pub const BV_AI: ::std::os::raw::c_uint = 0;
pub const BV_AR: ::std::os::raw::c_uint = 1;
pub const BV_BH: ::std::os::raw::c_uint = 2;
pub const BV_BKC: ::std::os::raw::c_uint = 3;
pub const BV_BT: ::std::os::raw::c_uint = 4;
pub const BV_EFM: ::std::os::raw::c_uint = 5;
pub const BV_GP: ::std::os::raw::c_uint = 6;
pub const BV_MP: ::std::os::raw::c_uint = 7;
pub const BV_BIN: ::std::os::raw::c_uint = 8;
pub const BV_BL: ::std::os::raw::c_uint = 9;
pub const BV_BOMB: ::std::os::raw::c_uint = 10;
pub const BV_CI: ::std::os::raw::c_uint = 11;
pub const BV_CM: ::std::os::raw::c_uint = 12;
pub const BV_CMS: ::std::os::raw::c_uint = 13;
pub const BV_COM: ::std::os::raw::c_uint = 14;
pub const BV_DEF: ::std::os::raw::c_uint = 15;
pub const BV_INC: ::std::os::raw::c_uint = 16;
pub const BV_EOL: ::std::os::raw::c_uint = 17;
pub const BV_FIXEOL: ::std::os::raw::c_uint = 18;
pub const BV_EP: ::std::os::raw::c_uint = 19;
pub const BV_ET: ::std::os::raw::c_uint = 20;
pub const BV_FENC: ::std::os::raw::c_uint = 21;
pub const BV_FP: ::std::os::raw::c_uint = 22;
pub const BV_BEXPR: ::std::os::raw::c_uint = 23;
pub const BV_FEX: ::std::os::raw::c_uint = 24;
pub const BV_FF: ::std::os::raw::c_uint = 25;
pub const BV_FLP: ::std::os::raw::c_uint = 26;
pub const BV_FO: ::std::os::raw::c_uint = 27;
pub const BV_FT: ::std::os::raw::c_uint = 28;
pub const BV_IMI: ::std::os::raw::c_uint = 29;
pub const BV_IMS: ::std::os::raw::c_uint = 30;
pub const BV_INDE: ::std::os::raw::c_uint = 31;
pub const BV_INDK: ::std::os::raw::c_uint = 32;
pub const BV_INEX: ::std::os::raw::c_uint = 33;
pub const BV_INF: ::std::os::raw::c_uint = 34;
pub const BV_ISK: ::std::os::raw::c_uint = 35;
pub const BV_KP: ::std::os::raw::c_uint = 36;
pub const BV_MENC: ::std::os::raw::c_uint = 37;
pub const BV_MA: ::std::os::raw::c_uint = 38;
pub const BV_ML: ::std::os::raw::c_uint = 39;
pub const BV_MOD: ::std::os::raw::c_uint = 40;
pub const BV_MPS: ::std::os::raw::c_uint = 41;
pub const BV_NF: ::std::os::raw::c_uint = 42;
pub const BV_PATH: ::std::os::raw::c_uint = 43;
pub const BV_PI: ::std::os::raw::c_uint = 44;
pub const BV_QE: ::std::os::raw::c_uint = 45;
pub const BV_RO: ::std::os::raw::c_uint = 46;
pub const BV_SN: ::std::os::raw::c_uint = 47;
pub const BV_STS: ::std::os::raw::c_uint = 48;
pub const BV_SUA: ::std::os::raw::c_uint = 49;
pub const BV_SW: ::std::os::raw::c_uint = 50;
pub const BV_SWF: ::std::os::raw::c_uint = 51;
pub const BV_TFU: ::std::os::raw::c_uint = 52;
pub const BV_TAGS: ::std::os::raw::c_uint = 53;
pub const BV_TC: ::std::os::raw::c_uint = 54;
pub const BV_TS: ::std::os::raw::c_uint = 55;
pub const BV_TW: ::std::os::raw::c_uint = 56;
pub const BV_TX: ::std::os::raw::c_uint = 57;
pub const BV_UDF: ::std::os::raw::c_uint = 58;
pub const BV_UL: ::std::os::raw::c_uint = 59;
pub const BV_WM: ::std::os::raw::c_uint = 60;
pub const BV_COUNT: ::std::os::raw::c_uint = 61;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const WV_LIST: ::std::os::raw::c_uint = 0;
pub const WV_CRBIND: ::std::os::raw::c_uint = 1;
pub const WV_BRI: ::std::os::raw::c_uint = 2;
pub const WV_BRIOPT: ::std::os::raw::c_uint = 3;
pub const WV_WCR: ::std::os::raw::c_uint = 4;
pub const WV_DIFF: ::std::os::raw::c_uint = 5;
pub const WV_FDC: ::std::os::raw::c_uint = 6;
pub const WV_FEN: ::std::os::raw::c_uint = 7;
pub const WV_FDI: ::std::os::raw::c_uint = 8;
pub const WV_FDL: ::std::os::raw::c_uint = 9;
pub const WV_FDM: ::std::os::raw::c_uint = 10;
pub const WV_FML: ::std::os::raw::c_uint = 11;
pub const WV_FDN: ::std::os::raw::c_uint = 12;
pub const WV_FDE: ::std::os::raw::c_uint = 13;
pub const WV_FDT: ::std::os::raw::c_uint = 14;
pub const WV_FMR: ::std::os::raw::c_uint = 15;
pub const WV_LBR: ::std::os::raw::c_uint = 16;
pub const WV_NU: ::std::os::raw::c_uint = 17;
pub const WV_RNU: ::std::os::raw::c_uint = 18;
pub const WV_NUW: ::std::os::raw::c_uint = 19;
pub const WV_PVW: ::std::os::raw::c_uint = 20;
pub const WV_SCBIND: ::std::os::raw::c_uint = 21;
pub const WV_SCROLL: ::std::os::raw::c_uint = 22;
pub const WV_SISO: ::std::os::raw::c_uint = 23;
pub const WV_SO: ::std::os::raw::c_uint = 24;
pub const WV_WFH: ::std::os::raw::c_uint = 25;
pub const WV_WFW: ::std::os::raw::c_uint = 26;
pub const WV_WRAP: ::std::os::raw::c_uint = 27;
pub const WV_COUNT: ::std::os::raw::c_uint = 28;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut SDS_NOINIT: *const ::std::os::raw::c_char;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type sds = *mut ::std::os::raw::c_char;
#[repr(C, packed)]
#[derive(Debug)]
pub struct sdshdr5 {
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr5() {
    assert_eq!(
        ::std::mem::size_of::<sdshdr5>(),
        1usize,
        concat!("Size of: ", stringify!(sdshdr5))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr5>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr5>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr5),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr5>())).buf as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr5),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct sdshdr8 {
    pub len: u8,
    pub alloc: u8,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr8() {
    assert_eq!(
        ::std::mem::size_of::<sdshdr8>(),
        3usize,
        concat!("Size of: ", stringify!(sdshdr8))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr8>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr8>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr8>())).alloc as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr8>())).flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr8>())).buf as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr8),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct sdshdr16 {
    pub len: u16,
    pub alloc: u16,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr16() {
    assert_eq!(
        ::std::mem::size_of::<sdshdr16>(),
        5usize,
        concat!("Size of: ", stringify!(sdshdr16))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr16>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr16>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr16>())).alloc as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr16>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr16>())).buf as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr16),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct sdshdr32 {
    pub len: u32,
    pub alloc: u32,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr32() {
    assert_eq!(
        ::std::mem::size_of::<sdshdr32>(),
        9usize,
        concat!("Size of: ", stringify!(sdshdr32))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr32>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr32>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr32>())).alloc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr32>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr32>())).buf as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr32),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct sdshdr64 {
    pub len: u64,
    pub alloc: u64,
    pub flags: ::std::os::raw::c_uchar,
    pub buf: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sdshdr64() {
    assert_eq!(
        ::std::mem::size_of::<sdshdr64>(),
        17usize,
        concat!("Size of: ", stringify!(sdshdr64))
    );
    assert_eq!(
        ::std::mem::align_of::<sdshdr64>(),
        1usize,
        concat!("Alignment of ", stringify!(sdshdr64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr64>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr64>())).alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr64>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdshdr64>())).buf as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(sdshdr64),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    pub fn sdsnewlen(init: *const ::std::os::raw::c_void, initlen: size_t) -> sds;
}
extern "C" {
    pub fn sdsnew(init: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdsempty() -> sds;
}
extern "C" {
    pub fn sdsdup(s: sds) -> sds;
}
extern "C" {
    pub fn sdsfree(s: sds);
}
extern "C" {
    pub fn sdsgrowzero(s: sds, len: size_t) -> sds;
}
extern "C" {
    pub fn sdscatlen(s: sds, t: *const ::std::os::raw::c_void, len: size_t) -> sds;
}
extern "C" {
    pub fn sdscat(s: sds, t: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdscatsds(s: sds, t: sds) -> sds;
}
extern "C" {
    pub fn sdscpylen(s: sds, t: *const ::std::os::raw::c_char, len: size_t) -> sds;
}
extern "C" {
    pub fn sdscpy(s: sds, t: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdscatvprintf(s: sds, fmt: *const ::std::os::raw::c_char, ap: *mut __va_list_tag)
        -> sds;
}
extern "C" {
    pub fn sdscatprintf(s: sds, fmt: *const ::std::os::raw::c_char, ...) -> sds;
}
extern "C" {
    pub fn sdscatfmt(s: sds, fmt: *const ::std::os::raw::c_char, ...) -> sds;
}
extern "C" {
    pub fn sdstrim(s: sds, cset: *const ::std::os::raw::c_char) -> sds;
}
extern "C" {
    pub fn sdsrange(s: sds, start: ssize_t, end: ssize_t);
}
extern "C" {
    pub fn sdsupdatelen(s: sds);
}
extern "C" {
    pub fn sdsclear(s: sds);
}
extern "C" {
    pub fn sdscmp(s1: sds, s2: sds) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdssplitlen(
        s: *const ::std::os::raw::c_char,
        len: ssize_t,
        sep: *const ::std::os::raw::c_char,
        seplen: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut sds;
}
extern "C" {
    pub fn sdsfreesplitres(tokens: *mut sds, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdstolower(s: sds);
}
extern "C" {
    pub fn sdstoupper(s: sds);
}
extern "C" {
    pub fn sdsfromlonglong(value: ::std::os::raw::c_longlong) -> sds;
}
extern "C" {
    pub fn sdscatrepr(s: sds, p: *const ::std::os::raw::c_char, len: size_t) -> sds;
}
extern "C" {
    pub fn sdssplitargs(
        line: *const ::std::os::raw::c_char,
        argc: *mut ::std::os::raw::c_int,
    ) -> *mut sds;
}
extern "C" {
    pub fn sdsmapchars(
        s: sds,
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        setlen: size_t,
    ) -> sds;
}
extern "C" {
    pub fn sdsjoin(
        argv: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        sep: *mut ::std::os::raw::c_char,
    ) -> sds;
}
extern "C" {
    pub fn sdsjoinsds(
        argv: *mut sds,
        argc: ::std::os::raw::c_int,
        sep: *const ::std::os::raw::c_char,
        seplen: size_t,
    ) -> sds;
}
extern "C" {
    pub fn sdsMakeRoomFor(s: sds, addlen: size_t) -> sds;
}
extern "C" {
    pub fn sdsIncrLen(s: sds, incr: ssize_t);
}
extern "C" {
    pub fn sdsRemoveFreeSpace(s: sds) -> sds;
}
extern "C" {
    pub fn sdsAllocSize(s: sds) -> size_t;
}
extern "C" {
    pub fn sdsAllocPtr(s: sds) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_malloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sds_free(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
    pub coladd: colnr_T,
}
#[test]
fn bindgen_test_layout_pos_T() {
    assert_eq!(
        ::std::mem::size_of::<pos_T>(),
        16usize,
        concat!("Size of: ", stringify!(pos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pos_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_T>())).lnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_T>())).col as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_T>())).coladd as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_T),
            "::",
            stringify!(coladd)
        )
    );
}
pub type buf_T = file_buffer;
pub const msgPriority_T_MSG_INFO: msgPriority_T = 0;
pub const msgPriority_T_MSG_WARNING: msgPriority_T = 1;
pub const msgPriority_T_MSG_ERROR: msgPriority_T = 2;
pub type msgPriority_T = ::std::os::raw::c_uint;
pub const windowSplit_T_SPLIT_HORIZONTAL: windowSplit_T = 0;
pub const windowSplit_T_SPLIT_HORIZONTAL_NEW: windowSplit_T = 1;
pub const windowSplit_T_SPLIT_VERTICAL: windowSplit_T = 2;
pub const windowSplit_T_SPLIT_VERTICAL_NEW: windowSplit_T = 3;
pub const windowSplit_T_SPLIT_TAB: windowSplit_T = 4;
pub const windowSplit_T_SPLIT_TAB_NEW: windowSplit_T = 5;
pub type windowSplit_T = ::std::os::raw::c_uint;
pub const windowMovement_T_WIN_CURSOR_LEFT: windowMovement_T = 0;
pub const windowMovement_T_WIN_CURSOR_RIGHT: windowMovement_T = 1;
pub const windowMovement_T_WIN_CURSOR_UP: windowMovement_T = 2;
pub const windowMovement_T_WIN_CURSOR_DOWN: windowMovement_T = 3;
pub const windowMovement_T_WIN_MOVE_FULL_LEFT: windowMovement_T = 4;
pub const windowMovement_T_WIN_MOVE_FULL_RIGHT: windowMovement_T = 5;
pub const windowMovement_T_WIN_MOVE_FULL_UP: windowMovement_T = 6;
pub const windowMovement_T_WIN_MOVE_FULL_DOWN: windowMovement_T = 7;
pub const windowMovement_T_WIN_CURSOR_TOP_LEFT: windowMovement_T = 8;
pub const windowMovement_T_WIN_CURSOR_BOTTOM_RIGHT: windowMovement_T = 9;
pub const windowMovement_T_WIN_CURSOR_PREVIOUS: windowMovement_T = 10;
pub const windowMovement_T_WIN_MOVE_ROTATE_DOWNWARDS: windowMovement_T = 11;
pub const windowMovement_T_WIN_MOVE_ROTATE_UPWARDS: windowMovement_T = 12;
pub type windowMovement_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exCommand_T {
    pub cmd: *mut char_u,
    pub forceit: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_exCommand_T() {
    assert_eq!(
        ::std::mem::size_of::<exCommand_T>(),
        16usize,
        concat!("Size of: ", stringify!(exCommand_T))
    );
    assert_eq!(
        ::std::mem::align_of::<exCommand_T>(),
        8usize,
        concat!("Alignment of ", stringify!(exCommand_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exCommand_T>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exCommand_T>())).forceit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(forceit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exCommand_T>())).regname as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(exCommand_T),
            "::",
            stringify!(regname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yankInfo_T {
    pub op_char: ::std::os::raw::c_int,
    pub extra_op_char: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub blockType: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub numLines: ::std::os::raw::c_int,
    pub lines: *mut *mut char_u,
}
#[test]
fn bindgen_test_layout_yankInfo_T() {
    assert_eq!(
        ::std::mem::size_of::<yankInfo_T>(),
        64usize,
        concat!("Size of: ", stringify!(yankInfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<yankInfo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(yankInfo_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).op_char as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(op_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).extra_op_char as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(extra_op_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).regname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).blockType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(blockType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).end as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).numLines as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(numLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yankInfo_T>())).lines as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yankInfo_T),
            "::",
            stringify!(lines)
        )
    );
}
pub const gotoTarget_T_DEFINITION: gotoTarget_T = 0;
pub const gotoTarget_T_DECLARATION: gotoTarget_T = 1;
pub const gotoTarget_T_IMPLEMENTATION: gotoTarget_T = 2;
pub const gotoTarget_T_TYPEDEFINITION: gotoTarget_T = 3;
pub const gotoTarget_T_HOVER: gotoTarget_T = 4;
pub const gotoTarget_T_OUTLINE: gotoTarget_T = 5;
pub const gotoTarget_T_MESSAGES: gotoTarget_T = 6;
pub type gotoTarget_T = ::std::os::raw::c_uint;
pub const clearTarget_T_CLEAR_MESSAGES: clearTarget_T = 0;
pub type clearTarget_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clearRequest_T {
    pub count: ::std::os::raw::c_int,
    pub target: clearTarget_T,
}
#[test]
fn bindgen_test_layout_clearRequest_T() {
    assert_eq!(
        ::std::mem::size_of::<clearRequest_T>(),
        8usize,
        concat!("Size of: ", stringify!(clearRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<clearRequest_T>(),
        4usize,
        concat!("Alignment of ", stringify!(clearRequest_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clearRequest_T>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clearRequest_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clearRequest_T>())).target as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clearRequest_T),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gotoRequest_T {
    pub count: ::std::os::raw::c_int,
    pub location: pos_T,
    pub target: gotoTarget_T,
}
#[test]
fn bindgen_test_layout_gotoRequest_T() {
    assert_eq!(
        ::std::mem::size_of::<gotoRequest_T>(),
        32usize,
        concat!("Size of: ", stringify!(gotoRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<gotoRequest_T>(),
        8usize,
        concat!("Alignment of ", stringify!(gotoRequest_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gotoRequest_T>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gotoRequest_T>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gotoRequest_T>())).target as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gotoRequest_T),
            "::",
            stringify!(target)
        )
    );
}
pub const scrollDirection_T_SCROLL_CURSOR_CENTERV: scrollDirection_T = 0;
pub const scrollDirection_T_SCROLL_CURSOR_CENTERH: scrollDirection_T = 1;
pub const scrollDirection_T_SCROLL_CURSOR_TOP: scrollDirection_T = 2;
pub const scrollDirection_T_SCROLL_CURSOR_BOTTOM: scrollDirection_T = 3;
pub const scrollDirection_T_SCROLL_CURSOR_LEFT: scrollDirection_T = 4;
pub const scrollDirection_T_SCROLL_CURSOR_RIGHT: scrollDirection_T = 5;
pub const scrollDirection_T_SCROLL_LINE_UP: scrollDirection_T = 6;
pub const scrollDirection_T_SCROLL_LINE_DOWN: scrollDirection_T = 7;
pub const scrollDirection_T_SCROLL_HALFPAGE_DOWN: scrollDirection_T = 8;
pub const scrollDirection_T_SCROLL_HALFPAGE_UP: scrollDirection_T = 9;
pub const scrollDirection_T_SCROLL_PAGE_DOWN: scrollDirection_T = 10;
pub const scrollDirection_T_SCROLL_PAGE_UP: scrollDirection_T = 11;
pub const scrollDirection_T_SCROLL_HALFPAGE_LEFT: scrollDirection_T = 12;
pub const scrollDirection_T_SCROLL_HALFPAGE_RIGHT: scrollDirection_T = 13;
pub const scrollDirection_T_SCROLL_COLUMN_LEFT: scrollDirection_T = 14;
pub const scrollDirection_T_SCROLL_COLUMN_RIGHT: scrollDirection_T = 15;
pub type scrollDirection_T = ::std::os::raw::c_uint;
pub const subMode_T_SM_NONE: subMode_T = 0;
pub const subMode_T_SM_INSERT_LITERAL: subMode_T = 1;
pub type subMode_T = ::std::os::raw::c_uint;
pub const tabPageKind_T_GOTO: tabPageKind_T = 0;
pub const tabPageKind_T_MOVE: tabPageKind_T = 1;
pub const tabPageKind_T_CLOSE: tabPageKind_T = 2;
pub const tabPageKind_T_ONLY: tabPageKind_T = 3;
pub type tabPageKind_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tabPageRequest_T {
    pub kind: tabPageKind_T,
    pub arg: ::std::os::raw::c_int,
    pub relative: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tabPageRequest_T() {
    assert_eq!(
        ::std::mem::size_of::<tabPageRequest_T>(),
        12usize,
        concat!("Size of: ", stringify!(tabPageRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tabPageRequest_T>(),
        4usize,
        concat!("Alignment of ", stringify!(tabPageRequest_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabPageRequest_T>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabPageRequest_T>())).arg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabPageRequest_T>())).relative as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tabPageRequest_T),
            "::",
            stringify!(relative)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct terminalRequest_t {
    pub cmd: *mut char_u,
    pub rows: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub curwin: ::std::os::raw::c_int,
    pub finish: ::std::os::raw::c_char,
    pub hidden: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_terminalRequest_t() {
    assert_eq!(
        ::std::mem::size_of::<terminalRequest_t>(),
        32usize,
        concat!("Size of: ", stringify!(terminalRequest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<terminalRequest_t>(),
        8usize,
        concat!("Alignment of ", stringify!(terminalRequest_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<terminalRequest_t>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<terminalRequest_t>())).rows as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<terminalRequest_t>())).cols as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<terminalRequest_t>())).curwin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(curwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<terminalRequest_t>())).finish as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<terminalRequest_t>())).hidden as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(terminalRequest_t),
            "::",
            stringify!(hidden)
        )
    );
}
pub const formatRequestType_T_INDENTATION: formatRequestType_T = 0;
pub const formatRequestType_T_FORMATTING: formatRequestType_T = 1;
pub type formatRequestType_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct formatRequest_T {
    pub formatType: formatRequestType_T,
    pub returnCursor: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub buf: *mut buf_T,
    pub cmd: *mut char_u,
}
#[test]
fn bindgen_test_layout_formatRequest_T() {
    assert_eq!(
        ::std::mem::size_of::<formatRequest_T>(),
        56usize,
        concat!("Size of: ", stringify!(formatRequest_T))
    );
    assert_eq!(
        ::std::mem::align_of::<formatRequest_T>(),
        8usize,
        concat!("Alignment of ", stringify!(formatRequest_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formatRequest_T>())).formatType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(formatType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formatRequest_T>())).returnCursor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(returnCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formatRequest_T>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formatRequest_T>())).end as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formatRequest_T>())).buf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<formatRequest_T>())).cmd as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(formatRequest_T),
            "::",
            stringify!(cmd)
        )
    );
}
pub type ClipboardGetCallback = ::std::option::Option<
    unsafe extern "C" fn(
        regname: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
        blockType: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type ColorSchemeChangedCallback =
    ::std::option::Option<unsafe extern "C" fn(colorScheme: *mut char_u) -> ::std::os::raw::c_int>;
pub type CursorAddCallback = ::std::option::Option<unsafe extern "C" fn(cursor: pos_T)>;
pub type ColorSchemeCompletionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        filter: *mut char_u,
        num_colorschemes: *mut ::std::os::raw::c_int,
        colorschemes: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type FormatCallback =
    ::std::option::Option<unsafe extern "C" fn(formatRequest: *mut formatRequest_T)>;
pub type AutoIndentCallback = ::std::option::Option<
    unsafe extern "C" fn(
        lnum: ::std::os::raw::c_int,
        buf: *mut buf_T,
        prevLine: *mut char_u,
        currentLine: *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type MacroStartRecordCallback =
    ::std::option::Option<unsafe extern "C" fn(regname: ::std::os::raw::c_int)>;
pub type MacroStopRecordCallback = ::std::option::Option<
    unsafe extern "C" fn(regname: ::std::os::raw::c_int, regvalue: *mut char_u),
>;
pub type VoidCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type WindowSplitCallback =
    ::std::option::Option<unsafe extern "C" fn(splitType: windowSplit_T, fname: *mut char_u)>;
pub type WindowMovementCallback = ::std::option::Option<
    unsafe extern "C" fn(movementType: windowMovement_T, count: ::std::os::raw::c_int),
>;
pub type YankCallback = ::std::option::Option<unsafe extern "C" fn(yankInfo: *mut yankInfo_T)>;
pub type TerminalCallback =
    ::std::option::Option<unsafe extern "C" fn(terminalRequest: *mut terminalRequest_t)>;
pub type ClearCallback = ::std::option::Option<unsafe extern "C" fn(clearInfo: clearRequest_T)>;
pub type GotoCallback =
    ::std::option::Option<unsafe extern "C" fn(gotoInfo: gotoRequest_T) -> ::std::os::raw::c_int>;
pub type ScrollCallback = ::std::option::Option<
    unsafe extern "C" fn(dir: scrollDirection_T, count: ::std::os::raw::c_long),
>;
pub type TabPageCallback = ::std::option::Option<
    unsafe extern "C" fn(tabPageInfo: tabPageRequest_T) -> ::std::os::raw::c_int,
>;
pub type FunctionGetCharCallback = ::std::option::Option<
    unsafe extern "C" fn(
        mode: ::std::os::raw::c_int,
        character: *mut ::std::os::raw::c_char,
        modMask: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const screenLineMotion_T_MOTION_H: screenLineMotion_T = 0;
pub const screenLineMotion_T_MOTION_L: screenLineMotion_T = 1;
pub const screenLineMotion_T_MOTION_M: screenLineMotion_T = 2;
pub type screenLineMotion_T = ::std::os::raw::c_uint;
pub type CursorMoveScreenLineCallback = ::std::option::Option<
    unsafe extern "C" fn(
        motion: screenLineMotion_T,
        count: ::std::os::raw::c_int,
        startLine: linenr_T,
        destLine: *mut linenr_T,
    ),
>;
pub type CursorMoveScreenPositionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        direction: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        lnum: linenr_T,
        cursor: colnr_T,
        curswant: colnr_T,
        destLnum: *mut linenr_T,
        destCol: *mut colnr_T,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_T {
    pub contents: sds,
    pub title: sds,
    pub priority: msgPriority_T,
}
#[test]
fn bindgen_test_layout_msg_T() {
    assert_eq!(
        ::std::mem::size_of::<msg_T>(),
        24usize,
        concat!("Size of: ", stringify!(msg_T))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_T>(),
        8usize,
        concat!("Alignment of ", stringify!(msg_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_T>())).contents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_T>())).title as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_T>())).priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_T),
            "::",
            stringify!(priority)
        )
    );
}
pub const executionStatus_T_HANDLED: executionStatus_T = 0;
pub const executionStatus_T_COMPLETED: executionStatus_T = 1;
pub const executionStatus_T_UNHANDLED: executionStatus_T = 2;
pub const executionStatus_T_COMPLETED_UNHANDLED: executionStatus_T = 3;
pub type executionStatus_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lpos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
}
#[test]
fn bindgen_test_layout_lpos_T() {
    assert_eq!(
        ::std::mem::size_of::<lpos_T>(),
        16usize,
        concat!("Size of: ", stringify!(lpos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<lpos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(lpos_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lpos_T>())).lnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lpos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lpos_T>())).col as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lpos_T),
            "::",
            stringify!(col)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct growarray {
    pub ga_len: ::std::os::raw::c_int,
    pub ga_maxlen: ::std::os::raw::c_int,
    pub ga_itemsize: ::std::os::raw::c_int,
    pub ga_growsize: ::std::os::raw::c_int,
    pub ga_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_growarray() {
    assert_eq!(
        ::std::mem::size_of::<growarray>(),
        24usize,
        concat!("Size of: ", stringify!(growarray))
    );
    assert_eq!(
        ::std::mem::align_of::<growarray>(),
        8usize,
        concat!("Alignment of ", stringify!(growarray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<growarray>())).ga_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<growarray>())).ga_maxlen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<growarray>())).ga_itemsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<growarray>())).ga_growsize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_growsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<growarray>())).ga_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(growarray),
            "::",
            stringify!(ga_data)
        )
    );
}
pub type garray_T = growarray;
pub type win_T = window_S;
pub type wininfo_T = wininfo_S;
pub type frame_T = frame_S;
pub type scid_T = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct terminal_S {
    _unused: [u8; 0],
}
pub type term_T = terminal_S;
pub type AutoCommandCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: event_T, buf: *mut buf_T)>;
pub type CustomCommandCallback =
    ::std::option::Option<unsafe extern "C" fn(eap: *mut exCommand_T) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctx_T {
    pub sc_sid: scid_T,
    pub sc_seq: ::std::os::raw::c_int,
    pub sc_lnum: linenr_T,
    pub sc_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sctx_T() {
    assert_eq!(
        ::std::mem::size_of::<sctx_T>(),
        24usize,
        concat!("Size of: ", stringify!(sctx_T))
    );
    assert_eq!(
        ::std::mem::align_of::<sctx_T>(),
        8usize,
        concat!("Alignment of ", stringify!(sctx_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctx_T>())).sc_sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctx_T>())).sc_seq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctx_T>())).sc_lnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sctx_T>())).sc_version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sctx_T),
            "::",
            stringify!(sc_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufref_T {
    pub br_buf: *mut buf_T,
    pub br_fnum: ::std::os::raw::c_int,
    pub br_buf_free_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bufref_T() {
    assert_eq!(
        ::std::mem::size_of::<bufref_T>(),
        16usize,
        concat!("Size of: ", stringify!(bufref_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bufref_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bufref_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufref_T>())).br_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufref_T>())).br_fnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_fnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufref_T>())).br_buf_free_count as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bufref_T),
            "::",
            stringify!(br_buf_free_count)
        )
    );
}
pub type regengine_T = regengine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regprog {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regprog() {
    assert_eq!(
        ::std::mem::size_of::<regprog>(),
        24usize,
        concat!("Size of: ", stringify!(regprog))
    );
    assert_eq!(
        ::std::mem::align_of::<regprog>(),
        8usize,
        concat!("Alignment of ", stringify!(regprog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regprog>())).engine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regprog>())).regflags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regprog>())).re_engine as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regprog>())).re_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regprog>())).re_in_use as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regprog),
            "::",
            stringify!(re_in_use)
        )
    );
}
pub type regprog_T = regprog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_regprog_T {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
    pub regstart: ::std::os::raw::c_int,
    pub reganch: char_u,
    pub regmust: *mut char_u,
    pub regmlen: ::std::os::raw::c_int,
    pub program: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_bt_regprog_T() {
    assert_eq!(
        ::std::mem::size_of::<bt_regprog_T>(),
        48usize,
        concat!("Size of: ", stringify!(bt_regprog_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_regprog_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_regprog_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).engine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).regflags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).re_engine as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).re_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).re_in_use as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(re_in_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).regstart as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).reganch as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).regmust as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regmust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).regmlen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(regmlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bt_regprog_T>())).program as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_regprog_T),
            "::",
            stringify!(program)
        )
    );
}
pub type nfa_state_T = nfa_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfa_state {
    pub c: ::std::os::raw::c_int,
    pub out: *mut nfa_state_T,
    pub out1: *mut nfa_state_T,
    pub id: ::std::os::raw::c_int,
    pub lastlist: [::std::os::raw::c_int; 2usize],
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_nfa_state() {
    assert_eq!(
        ::std::mem::size_of::<nfa_state>(),
        40usize,
        concat!("Size of: ", stringify!(nfa_state))
    );
    assert_eq!(
        ::std::mem::align_of::<nfa_state>(),
        8usize,
        concat!("Alignment of ", stringify!(nfa_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_state>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_state>())).out as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_state>())).out1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(out1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_state>())).id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_state>())).lastlist as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(lastlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_state>())).val as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_state),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfa_regprog_T {
    pub engine: *mut regengine_T,
    pub regflags: ::std::os::raw::c_uint,
    pub re_engine: ::std::os::raw::c_uint,
    pub re_flags: ::std::os::raw::c_uint,
    pub re_in_use: ::std::os::raw::c_int,
    pub start: *mut nfa_state_T,
    pub reganch: ::std::os::raw::c_int,
    pub regstart: ::std::os::raw::c_int,
    pub match_text: *mut char_u,
    pub has_zend: ::std::os::raw::c_int,
    pub has_backref: ::std::os::raw::c_int,
    pub pattern: *mut char_u,
    pub nsubexp: ::std::os::raw::c_int,
    pub nstate: ::std::os::raw::c_int,
    pub state: [nfa_state_T; 1usize],
}
#[test]
fn bindgen_test_layout_nfa_regprog_T() {
    assert_eq!(
        ::std::mem::size_of::<nfa_regprog_T>(),
        112usize,
        concat!("Size of: ", stringify!(nfa_regprog_T))
    );
    assert_eq!(
        ::std::mem::align_of::<nfa_regprog_T>(),
        8usize,
        concat!("Alignment of ", stringify!(nfa_regprog_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).engine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).regflags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(regflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).re_engine as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).re_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).re_in_use as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(re_in_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).reganch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).regstart as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).match_text as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(match_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).has_zend as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(has_zend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).has_backref as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(has_backref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).pattern as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).nsubexp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(nsubexp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).nstate as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(nstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfa_regprog_T>())).state as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nfa_regprog_T),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_T {
    pub regprog: *mut regprog_T,
    pub startp: [*mut char_u; 10usize],
    pub endp: [*mut char_u; 10usize],
    pub rm_ic: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regmatch_T() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_T>(),
        176usize,
        concat!("Size of: ", stringify!(regmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_T>())).regprog as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(regprog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_T>())).startp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(startp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_T>())).endp as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(endp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_T>())).rm_ic as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_T),
            "::",
            stringify!(rm_ic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmmatch_T {
    pub regprog: *mut regprog_T,
    pub startpos: [lpos_T; 10usize],
    pub endpos: [lpos_T; 10usize],
    pub rmm_ic: ::std::os::raw::c_int,
    pub rmm_maxcol: colnr_T,
}
#[test]
fn bindgen_test_layout_regmmatch_T() {
    assert_eq!(
        ::std::mem::size_of::<regmmatch_T>(),
        336usize,
        concat!("Size of: ", stringify!(regmmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<regmmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(regmmatch_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmmatch_T>())).regprog as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(regprog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmmatch_T>())).startpos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(startpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmmatch_T>())).endpos as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(endpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmmatch_T>())).rmm_ic as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(rmm_ic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmmatch_T>())).rmm_maxcol as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(regmmatch_T),
            "::",
            stringify!(rmm_maxcol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_extmatch_T {
    pub refcnt: ::std::os::raw::c_short,
    pub matches: [*mut char_u; 10usize],
}
#[test]
fn bindgen_test_layout_reg_extmatch_T() {
    assert_eq!(
        ::std::mem::size_of::<reg_extmatch_T>(),
        88usize,
        concat!("Size of: ", stringify!(reg_extmatch_T))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_extmatch_T>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_extmatch_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_extmatch_T>())).refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_extmatch_T),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_extmatch_T>())).matches as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_extmatch_T),
            "::",
            stringify!(matches)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regengine {
    pub regcomp: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut char_u, arg2: ::std::os::raw::c_int) -> *mut regprog_T,
    >,
    pub regfree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut regprog_T)>,
    pub regexec_nl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut regmatch_T,
            arg2: *mut char_u,
            arg3: colnr_T,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub regexec_multi: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut regmmatch_T,
            arg2: *mut win_T,
            arg3: *mut buf_T,
            arg4: linenr_T,
            arg5: colnr_T,
            arg6: *mut proftime_T,
            arg7: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
    >,
    pub expr: *mut char_u,
}
#[test]
fn bindgen_test_layout_regengine() {
    assert_eq!(
        ::std::mem::size_of::<regengine>(),
        40usize,
        concat!("Size of: ", stringify!(regengine))
    );
    assert_eq!(
        ::std::mem::align_of::<regengine>(),
        8usize,
        concat!("Alignment of ", stringify!(regengine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regengine>())).regcomp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regcomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regengine>())).regfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regengine>())).regexec_nl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regexec_nl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regengine>())).regexec_multi as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(regexec_multi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regengine>())).expr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regengine),
            "::",
            stringify!(expr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct filemark {
    pub mark: pos_T,
    pub fnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_filemark() {
    assert_eq!(
        ::std::mem::size_of::<filemark>(),
        24usize,
        concat!("Size of: ", stringify!(filemark))
    );
    assert_eq!(
        ::std::mem::align_of::<filemark>(),
        8usize,
        concat!("Alignment of ", stringify!(filemark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filemark>())).mark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(filemark),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<filemark>())).fnum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(filemark),
            "::",
            stringify!(fnum)
        )
    );
}
pub type fmark_T = filemark;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xfilemark {
    pub fmark: fmark_T,
    pub fname: *mut char_u,
    pub time_set: time_T,
}
#[test]
fn bindgen_test_layout_xfilemark() {
    assert_eq!(
        ::std::mem::size_of::<xfilemark>(),
        40usize,
        concat!("Size of: ", stringify!(xfilemark))
    );
    assert_eq!(
        ::std::mem::align_of::<xfilemark>(),
        8usize,
        concat!("Alignment of ", stringify!(xfilemark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfilemark>())).fmark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(fmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfilemark>())).fname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfilemark>())).time_set as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xfilemark),
            "::",
            stringify!(time_set)
        )
    );
}
pub type xfmark_T = xfilemark;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taggy {
    pub tagname: *mut char_u,
    pub fmark: fmark_T,
    pub cur_match: ::std::os::raw::c_int,
    pub cur_fnum: ::std::os::raw::c_int,
    pub user_data: *mut char_u,
}
#[test]
fn bindgen_test_layout_taggy() {
    assert_eq!(
        ::std::mem::size_of::<taggy>(),
        48usize,
        concat!("Size of: ", stringify!(taggy))
    );
    assert_eq!(
        ::std::mem::align_of::<taggy>(),
        8usize,
        concat!("Alignment of ", stringify!(taggy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taggy>())).tagname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taggy>())).fmark as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(fmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taggy>())).cur_match as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(cur_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taggy>())).cur_fnum as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(cur_fnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taggy>())).user_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(taggy),
            "::",
            stringify!(user_data)
        )
    );
}
pub type taggy_T = taggy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winopt_T {
    pub wo_bri: ::std::os::raw::c_int,
    pub wo_briopt: *mut char_u,
    pub wo_wcr: *mut char_u,
    pub wo_diff: ::std::os::raw::c_int,
    pub wo_fdc: ::std::os::raw::c_long,
    pub wo_fdc_save: ::std::os::raw::c_int,
    pub wo_fen: ::std::os::raw::c_int,
    pub wo_fen_save: ::std::os::raw::c_int,
    pub wo_fdi: *mut char_u,
    pub wo_fdl: ::std::os::raw::c_long,
    pub wo_fdl_save: ::std::os::raw::c_int,
    pub wo_fdm: *mut char_u,
    pub wo_fdm_save: *mut char_u,
    pub wo_fml: ::std::os::raw::c_long,
    pub wo_fdn: ::std::os::raw::c_long,
    pub wo_fde: *mut char_u,
    pub wo_fdt: *mut char_u,
    pub wo_fmr: *mut char_u,
    pub wo_lbr: ::std::os::raw::c_int,
    pub wo_list: ::std::os::raw::c_int,
    pub wo_nu: ::std::os::raw::c_int,
    pub wo_rnu: ::std::os::raw::c_int,
    pub wo_nuw: ::std::os::raw::c_long,
    pub wo_wfh: ::std::os::raw::c_int,
    pub wo_wfw: ::std::os::raw::c_int,
    pub wo_pvw: ::std::os::raw::c_int,
    pub wo_scr: ::std::os::raw::c_long,
    pub wo_scb: ::std::os::raw::c_int,
    pub wo_diff_saved: ::std::os::raw::c_int,
    pub wo_scb_save: ::std::os::raw::c_int,
    pub wo_wrap: ::std::os::raw::c_int,
    pub wo_wrap_save: ::std::os::raw::c_int,
    pub wo_crb: ::std::os::raw::c_int,
    pub wo_crb_save: ::std::os::raw::c_int,
    pub wo_script_ctx: [sctx_T; 28usize],
}
#[test]
fn bindgen_test_layout_winopt_T() {
    assert_eq!(
        ::std::mem::size_of::<winopt_T>(),
        888usize,
        concat!("Size of: ", stringify!(winopt_T))
    );
    assert_eq!(
        ::std::mem::align_of::<winopt_T>(),
        8usize,
        concat!("Alignment of ", stringify!(winopt_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_bri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_bri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_briopt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_briopt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_wcr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wcr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_diff as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_diff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdc_save as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdc_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fen_save as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fen_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdi as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdl as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdl_save as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdl_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdm as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdm_save as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdm_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fml as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdn as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fde as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fde)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fdt as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fdt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_fmr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_fmr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_lbr as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_lbr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_list as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_nu as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_nu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_rnu as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_rnu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_nuw as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_nuw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_wfh as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wfh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_wfw as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wfw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_pvw as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_pvw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_scr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_scb as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_diff_saved as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_diff_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_scb_save as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_scb_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_wrap as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_wrap_save as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_wrap_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_crb as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_crb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_crb_save as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_crb_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winopt_T>())).wo_script_ctx as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(winopt_T),
            "::",
            stringify!(wo_script_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wininfo_S {
    pub wi_next: *mut wininfo_T,
    pub wi_prev: *mut wininfo_T,
    pub wi_win: *mut win_T,
    pub wi_fpos: pos_T,
    pub wi_optset: ::std::os::raw::c_int,
    pub wi_opt: winopt_T,
    pub wi_fold_manual: ::std::os::raw::c_int,
    pub wi_folds: garray_T,
}
#[test]
fn bindgen_test_layout_wininfo_S() {
    assert_eq!(
        ::std::mem::size_of::<wininfo_S>(),
        968usize,
        concat!("Size of: ", stringify!(wininfo_S))
    );
    assert_eq!(
        ::std::mem::align_of::<wininfo_S>(),
        8usize,
        concat!("Alignment of ", stringify!(wininfo_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_win as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_fpos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_fpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_optset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_optset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_opt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_fold_manual as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_fold_manual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wininfo_S>())).wi_folds as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(wininfo_S),
            "::",
            stringify!(wi_folds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct foldinfo {
    pub fi_level: ::std::os::raw::c_int,
    pub fi_lnum: ::std::os::raw::c_int,
    pub fi_low_level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_foldinfo() {
    assert_eq!(
        ::std::mem::size_of::<foldinfo>(),
        12usize,
        concat!("Size of: ", stringify!(foldinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<foldinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(foldinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<foldinfo>())).fi_level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<foldinfo>())).fi_lnum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<foldinfo>())).fi_low_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(foldinfo),
            "::",
            stringify!(fi_low_level)
        )
    );
}
pub type foldinfo_T = foldinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct visualinfo_T {
    pub vi_start: pos_T,
    pub vi_end: pos_T,
    pub vi_mode: ::std::os::raw::c_int,
    pub vi_curswant: colnr_T,
}
#[test]
fn bindgen_test_layout_visualinfo_T() {
    assert_eq!(
        ::std::mem::size_of::<visualinfo_T>(),
        40usize,
        concat!("Size of: ", stringify!(visualinfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<visualinfo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(visualinfo_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<visualinfo_T>())).vi_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<visualinfo_T>())).vi_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<visualinfo_T>())).vi_mode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<visualinfo_T>())).vi_curswant as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(visualinfo_T),
            "::",
            stringify!(vi_curswant)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct undoline_T {
    pub ul_line: *mut char_u,
    pub ul_len: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_undoline_T() {
    assert_eq!(
        ::std::mem::size_of::<undoline_T>(),
        16usize,
        concat!("Size of: ", stringify!(undoline_T))
    );
    assert_eq!(
        ::std::mem::align_of::<undoline_T>(),
        8usize,
        concat!("Alignment of ", stringify!(undoline_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<undoline_T>())).ul_line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(undoline_T),
            "::",
            stringify!(ul_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<undoline_T>())).ul_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(undoline_T),
            "::",
            stringify!(ul_len)
        )
    );
}
pub type u_entry_T = u_entry;
pub type u_header_T = u_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u_entry {
    pub ue_next: *mut u_entry_T,
    pub ue_top: linenr_T,
    pub ue_bot: linenr_T,
    pub ue_lcount: linenr_T,
    pub ue_array: *mut undoline_T,
    pub ue_size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_entry() {
    assert_eq!(
        ::std::mem::size_of::<u_entry>(),
        48usize,
        concat!("Size of: ", stringify!(u_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<u_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(u_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_entry>())).ue_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_entry>())).ue_top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_entry>())).ue_bot as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_bot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_entry>())).ue_lcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_lcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_entry>())).ue_array as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_entry>())).ue_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_entry),
            "::",
            stringify!(ue_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct u_header {
    pub uh_next: u_header__bindgen_ty_1,
    pub uh_prev: u_header__bindgen_ty_2,
    pub uh_alt_next: u_header__bindgen_ty_3,
    pub uh_alt_prev: u_header__bindgen_ty_4,
    pub uh_seq: ::std::os::raw::c_long,
    pub uh_walk: ::std::os::raw::c_int,
    pub uh_entry: *mut u_entry_T,
    pub uh_getbot_entry: *mut u_entry_T,
    pub uh_cursor: pos_T,
    pub uh_cursor_vcol: ::std::os::raw::c_long,
    pub uh_flags: ::std::os::raw::c_int,
    pub uh_namedm: [pos_T; 26usize],
    pub uh_visual: visualinfo_T,
    pub uh_time: time_T,
    pub uh_save_nr: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_1 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_1>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_1),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_2 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_2>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_2),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_2>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_2),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_3 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_3>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_3),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_3>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_3),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u_header__bindgen_ty_4 {
    pub ptr: *mut u_header_T,
    pub seq: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_header__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<u_header__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(u_header__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_4>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_4),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header__bindgen_ty_4>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header__bindgen_ty_4),
            "::",
            stringify!(seq)
        )
    );
}
#[test]
fn bindgen_test_layout_u_header() {
    assert_eq!(
        ::std::mem::size_of::<u_header>(),
        568usize,
        concat!("Size of: ", stringify!(u_header))
    );
    assert_eq!(
        ::std::mem::align_of::<u_header>(),
        8usize,
        concat!("Alignment of ", stringify!(u_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_alt_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_alt_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_alt_prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_alt_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_seq as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_walk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_entry as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_getbot_entry as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_getbot_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_cursor as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_cursor_vcol as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_cursor_vcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_flags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_namedm as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_namedm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_visual as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_visual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_time as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_header>())).uh_save_nr as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(u_header),
            "::",
            stringify!(uh_save_nr)
        )
    );
}
pub type minfo_T = m_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m_info {
    pub m_size: long_u,
    pub m_next: *mut minfo_T,
}
#[test]
fn bindgen_test_layout_m_info() {
    assert_eq!(
        ::std::mem::size_of::<m_info>(),
        16usize,
        concat!("Size of: ", stringify!(m_info))
    );
    assert_eq!(
        ::std::mem::align_of::<m_info>(),
        8usize,
        concat!("Alignment of ", stringify!(m_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<m_info>())).m_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m_info),
            "::",
            stringify!(m_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<m_info>())).m_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m_info),
            "::",
            stringify!(m_next)
        )
    );
}
pub type bhdr_T = block_hdr;
pub type memfile_T = memfile;
pub type blocknr_T = ::std::os::raw::c_long;
pub type mf_hashitem_T = mf_hashitem_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mf_hashitem_S {
    pub mhi_next: *mut mf_hashitem_T,
    pub mhi_prev: *mut mf_hashitem_T,
    pub mhi_key: blocknr_T,
}
#[test]
fn bindgen_test_layout_mf_hashitem_S() {
    assert_eq!(
        ::std::mem::size_of::<mf_hashitem_S>(),
        24usize,
        concat!("Size of: ", stringify!(mf_hashitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<mf_hashitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(mf_hashitem_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashitem_S>())).mhi_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashitem_S>())).mhi_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashitem_S>())).mhi_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashitem_S),
            "::",
            stringify!(mhi_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mf_hashtab_S {
    pub mht_mask: long_u,
    pub mht_count: long_u,
    pub mht_buckets: *mut *mut mf_hashitem_T,
    pub mht_small_buckets: [*mut mf_hashitem_T; 64usize],
    pub mht_fixed: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mf_hashtab_S() {
    assert_eq!(
        ::std::mem::size_of::<mf_hashtab_S>(),
        544usize,
        concat!("Size of: ", stringify!(mf_hashtab_S))
    );
    assert_eq!(
        ::std::mem::align_of::<mf_hashtab_S>(),
        8usize,
        concat!("Alignment of ", stringify!(mf_hashtab_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashtab_S>())).mht_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashtab_S>())).mht_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashtab_S>())).mht_buckets as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashtab_S>())).mht_small_buckets as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_small_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mf_hashtab_S>())).mht_fixed as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(mf_hashtab_S),
            "::",
            stringify!(mht_fixed)
        )
    );
}
pub type mf_hashtab_T = mf_hashtab_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_hdr {
    pub bh_hashitem: mf_hashitem_T,
    pub bh_next: *mut bhdr_T,
    pub bh_prev: *mut bhdr_T,
    pub bh_data: *mut char_u,
    pub bh_page_count: ::std::os::raw::c_int,
    pub bh_flags: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_block_hdr() {
    assert_eq!(
        ::std::mem::size_of::<block_hdr>(),
        56usize,
        concat!("Size of: ", stringify!(block_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<block_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(block_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_hdr>())).bh_hashitem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_hashitem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_hdr>())).bh_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_hdr>())).bh_prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_hdr>())).bh_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_hdr>())).bh_page_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_page_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_hdr>())).bh_flags as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(block_hdr),
            "::",
            stringify!(bh_flags)
        )
    );
}
pub type NR_TRANS = nr_trans;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nr_trans {
    pub nt_hashitem: mf_hashitem_T,
    pub nt_new_bnum: blocknr_T,
}
#[test]
fn bindgen_test_layout_nr_trans() {
    assert_eq!(
        ::std::mem::size_of::<nr_trans>(),
        32usize,
        concat!("Size of: ", stringify!(nr_trans))
    );
    assert_eq!(
        ::std::mem::align_of::<nr_trans>(),
        8usize,
        concat!("Alignment of ", stringify!(nr_trans))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nr_trans>())).nt_hashitem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nr_trans),
            "::",
            stringify!(nt_hashitem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nr_trans>())).nt_new_bnum as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nr_trans),
            "::",
            stringify!(nt_new_bnum)
        )
    );
}
pub type buffblock_T = buffblock;
pub type buffheader_T = buffheader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffblock {
    pub b_next: *mut buffblock_T,
    pub b_str: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_buffblock() {
    assert_eq!(
        ::std::mem::size_of::<buffblock>(),
        16usize,
        concat!("Size of: ", stringify!(buffblock))
    );
    assert_eq!(
        ::std::mem::align_of::<buffblock>(),
        8usize,
        concat!("Alignment of ", stringify!(buffblock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffblock>())).b_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffblock),
            "::",
            stringify!(b_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffblock>())).b_str as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(buffblock),
            "::",
            stringify!(b_str)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffheader {
    pub bh_first: buffblock_T,
    pub bh_curr: *mut buffblock_T,
    pub bh_index: ::std::os::raw::c_int,
    pub bh_space: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_buffheader() {
    assert_eq!(
        ::std::mem::size_of::<buffheader>(),
        32usize,
        concat!("Size of: ", stringify!(buffheader))
    );
    assert_eq!(
        ::std::mem::align_of::<buffheader>(),
        8usize,
        concat!("Alignment of ", stringify!(buffheader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffheader>())).bh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffheader>())).bh_curr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_curr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffheader>())).bh_index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffheader>())).bh_space as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(buffheader),
            "::",
            stringify!(bh_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct save_redo_T {
    pub sr_redobuff: buffheader_T,
    pub sr_old_redobuff: buffheader_T,
}
#[test]
fn bindgen_test_layout_save_redo_T() {
    assert_eq!(
        ::std::mem::size_of::<save_redo_T>(),
        64usize,
        concat!("Size of: ", stringify!(save_redo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<save_redo_T>(),
        8usize,
        concat!("Alignment of ", stringify!(save_redo_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_redo_T>())).sr_redobuff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(save_redo_T),
            "::",
            stringify!(sr_redobuff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_redo_T>())).sr_old_redobuff as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(save_redo_T),
            "::",
            stringify!(sr_old_redobuff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct expand {
    pub xp_context: ::std::os::raw::c_int,
    pub xp_pattern: *mut char_u,
    pub xp_pattern_len: ::std::os::raw::c_int,
    pub xp_arg: *mut char_u,
    pub xp_script_ctx: sctx_T,
    pub xp_backslash: ::std::os::raw::c_int,
    pub xp_shell: ::std::os::raw::c_int,
    pub xp_numfiles: ::std::os::raw::c_int,
    pub xp_files: *mut *mut char_u,
    pub xp_line: *mut char_u,
    pub xp_col: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_expand() {
    assert_eq!(
        ::std::mem::size_of::<expand>(),
        96usize,
        concat!("Size of: ", stringify!(expand))
    );
    assert_eq!(
        ::std::mem::align_of::<expand>(),
        8usize,
        concat!("Alignment of ", stringify!(expand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_pattern as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_pattern_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_pattern_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_arg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_script_ctx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_script_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_backslash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_backslash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_shell as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_shell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_numfiles as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_numfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_files as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_line as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<expand>())).xp_col as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(expand),
            "::",
            stringify!(xp_col)
        )
    );
}
pub type expand_T = expand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdline_info {
    pub cmdbuff: *mut char_u,
    pub cmdbufflen: ::std::os::raw::c_int,
    pub cmdlen: ::std::os::raw::c_int,
    pub cmdpos: ::std::os::raw::c_int,
    pub cmdfirstc: ::std::os::raw::c_int,
    pub cmdindent: ::std::os::raw::c_int,
    pub cmdprompt: *mut char_u,
    pub cmdattr: ::std::os::raw::c_int,
    pub overstrike: ::std::os::raw::c_int,
    pub xpc: *mut expand_T,
    pub xp_context: ::std::os::raw::c_int,
    pub xp_arg: *mut char_u,
    pub input_fn: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmdline_info() {
    assert_eq!(
        ::std::mem::size_of::<cmdline_info>(),
        80usize,
        concat!("Size of: ", stringify!(cmdline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdline_info>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdline_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdbuff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdbuff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdbufflen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdbufflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdlen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdpos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdfirstc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdfirstc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdindent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdindent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdprompt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdprompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).cmdattr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(cmdattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).overstrike as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(overstrike)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).xpc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xpc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).xp_context as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xp_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).xp_arg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(xp_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdline_info>())).input_fn as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdline_info),
            "::",
            stringify!(input_fn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdmod_T {
    pub hide: ::std::os::raw::c_int,
    pub browse: ::std::os::raw::c_int,
    pub split: ::std::os::raw::c_int,
    pub tab: ::std::os::raw::c_int,
    pub keepalt: ::std::os::raw::c_int,
    pub keepmarks: ::std::os::raw::c_int,
    pub keepjumps: ::std::os::raw::c_int,
    pub lockmarks: ::std::os::raw::c_int,
    pub keeppatterns: ::std::os::raw::c_int,
    pub noswapfile: ::std::os::raw::c_int,
    pub save_ei: *mut char_u,
    pub filter_regmatch: regmatch_T,
    pub filter_force: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmdmod_T() {
    assert_eq!(
        ::std::mem::size_of::<cmdmod_T>(),
        232usize,
        concat!("Size of: ", stringify!(cmdmod_T))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdmod_T>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdmod_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).hide as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(hide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).browse as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(browse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).split as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(split)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).tab as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(tab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).keepalt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepalt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).keepmarks as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepmarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).keepjumps as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keepjumps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).lockmarks as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(lockmarks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).keeppatterns as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(keeppatterns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).noswapfile as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(noswapfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).save_ei as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(save_ei)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).filter_regmatch as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(filter_regmatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdmod_T>())).filter_force as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdmod_T),
            "::",
            stringify!(filter_force)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memfile {
    pub mf_fname: *mut char_u,
    pub mf_ffname: *mut char_u,
    pub mf_fd: ::std::os::raw::c_int,
    pub mf_flags: ::std::os::raw::c_int,
    pub mf_reopen: ::std::os::raw::c_int,
    pub mf_free_first: *mut bhdr_T,
    pub mf_used_first: *mut bhdr_T,
    pub mf_used_last: *mut bhdr_T,
    pub mf_used_count: ::std::os::raw::c_uint,
    pub mf_used_count_max: ::std::os::raw::c_uint,
    pub mf_hash: mf_hashtab_T,
    pub mf_trans: mf_hashtab_T,
    pub mf_blocknr_max: blocknr_T,
    pub mf_blocknr_min: blocknr_T,
    pub mf_neg_count: blocknr_T,
    pub mf_infile_count: blocknr_T,
    pub mf_page_size: ::std::os::raw::c_uint,
    pub mf_dirty: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_memfile() {
    assert_eq!(
        ::std::mem::size_of::<memfile>(),
        1192usize,
        concat!("Size of: ", stringify!(memfile))
    );
    assert_eq!(
        ::std::mem::align_of::<memfile>(),
        8usize,
        concat!("Alignment of ", stringify!(memfile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_ffname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_ffname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_fd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_reopen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_reopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_free_first as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_free_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_used_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_used_last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_used_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_used_count_max as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_used_count_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_hash as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_trans as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_trans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_blocknr_max as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_blocknr_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_blocknr_min as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_blocknr_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_neg_count as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_neg_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_infile_count as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_infile_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_page_size as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_page_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memfile>())).mf_dirty as *const _ as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(memfile),
            "::",
            stringify!(mf_dirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct info_pointer {
    pub ip_bnum: blocknr_T,
    pub ip_low: linenr_T,
    pub ip_high: linenr_T,
    pub ip_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_info_pointer() {
    assert_eq!(
        ::std::mem::size_of::<info_pointer>(),
        32usize,
        concat!("Size of: ", stringify!(info_pointer))
    );
    assert_eq!(
        ::std::mem::align_of::<info_pointer>(),
        8usize,
        concat!("Alignment of ", stringify!(info_pointer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<info_pointer>())).ip_bnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_bnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<info_pointer>())).ip_low as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<info_pointer>())).ip_high as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<info_pointer>())).ip_index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(info_pointer),
            "::",
            stringify!(ip_index)
        )
    );
}
pub type infoptr_T = info_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ml_chunksize {
    pub mlcs_numlines: ::std::os::raw::c_int,
    pub mlcs_totalsize: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ml_chunksize() {
    assert_eq!(
        ::std::mem::size_of::<ml_chunksize>(),
        16usize,
        concat!("Size of: ", stringify!(ml_chunksize))
    );
    assert_eq!(
        ::std::mem::align_of::<ml_chunksize>(),
        8usize,
        concat!("Alignment of ", stringify!(ml_chunksize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ml_chunksize>())).mlcs_numlines as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ml_chunksize),
            "::",
            stringify!(mlcs_numlines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ml_chunksize>())).mlcs_totalsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ml_chunksize),
            "::",
            stringify!(mlcs_totalsize)
        )
    );
}
pub type chunksize_T = ml_chunksize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memline {
    pub ml_line_count: linenr_T,
    pub ml_mfp: *mut memfile_T,
    pub ml_flags: ::std::os::raw::c_int,
    pub ml_stack: *mut infoptr_T,
    pub ml_stack_top: ::std::os::raw::c_int,
    pub ml_stack_size: ::std::os::raw::c_int,
    pub ml_line_lnum: linenr_T,
    pub ml_line_ptr: *mut char_u,
    pub ml_line_len: colnr_T,
    pub ml_locked: *mut bhdr_T,
    pub ml_locked_low: linenr_T,
    pub ml_locked_high: linenr_T,
    pub ml_locked_lineadd: ::std::os::raw::c_int,
    pub ml_chunksize: *mut chunksize_T,
    pub ml_numchunks: ::std::os::raw::c_int,
    pub ml_usedchunks: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_memline() {
    assert_eq!(
        ::std::mem::size_of::<memline>(),
        112usize,
        concat!("Size of: ", stringify!(memline))
    );
    assert_eq!(
        ::std::mem::align_of::<memline>(),
        8usize,
        concat!("Alignment of ", stringify!(memline))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_line_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_mfp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_mfp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_stack as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_stack_top as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_stack_size as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_line_lnum as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_line_ptr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_line_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_line_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_locked as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_locked_low as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_locked_high as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_locked_lineadd as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_locked_lineadd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_chunksize as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_chunksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_numchunks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_numchunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<memline>())).ml_usedchunks as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(memline),
            "::",
            stringify!(ml_usedchunks)
        )
    );
}
pub type memline_T = memline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct textprop_S {
    pub tp_col: colnr_T,
    pub tp_len: colnr_T,
    pub tp_id: ::std::os::raw::c_int,
    pub tp_type: ::std::os::raw::c_int,
    pub tp_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_textprop_S() {
    assert_eq!(
        ::std::mem::size_of::<textprop_S>(),
        20usize,
        concat!("Size of: ", stringify!(textprop_S))
    );
    assert_eq!(
        ::std::mem::align_of::<textprop_S>(),
        4usize,
        concat!("Alignment of ", stringify!(textprop_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<textprop_S>())).tp_col as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<textprop_S>())).tp_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<textprop_S>())).tp_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<textprop_S>())).tp_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<textprop_S>())).tp_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(textprop_S),
            "::",
            stringify!(tp_flags)
        )
    );
}
pub type textprop_T = textprop_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proptype_S {
    pub pt_id: ::std::os::raw::c_int,
    pub pt_type: ::std::os::raw::c_int,
    pub pt_hl_id: ::std::os::raw::c_int,
    pub pt_priority: ::std::os::raw::c_int,
    pub pt_flags: ::std::os::raw::c_int,
    pub pt_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_proptype_S() {
    assert_eq!(
        ::std::mem::size_of::<proptype_S>(),
        24usize,
        concat!("Size of: ", stringify!(proptype_S))
    );
    assert_eq!(
        ::std::mem::align_of::<proptype_S>(),
        4usize,
        concat!("Alignment of ", stringify!(proptype_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proptype_S>())).pt_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proptype_S>())).pt_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proptype_S>())).pt_hl_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_hl_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proptype_S>())).pt_priority as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proptype_S>())).pt_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<proptype_S>())).pt_name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(proptype_S),
            "::",
            stringify!(pt_name)
        )
    );
}
pub type proptype_T = proptype_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signgroup_S {
    pub refcount: short_u,
    pub next_sign_id: ::std::os::raw::c_int,
    pub sg_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_signgroup_S() {
    assert_eq!(
        ::std::mem::size_of::<signgroup_S>(),
        12usize,
        concat!("Size of: ", stringify!(signgroup_S))
    );
    assert_eq!(
        ::std::mem::align_of::<signgroup_S>(),
        4usize,
        concat!("Alignment of ", stringify!(signgroup_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signgroup_S>())).refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signgroup_S>())).next_sign_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(next_sign_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signgroup_S>())).sg_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signgroup_S),
            "::",
            stringify!(sg_name)
        )
    );
}
pub type signgroup_T = signgroup_S;
pub type signlist_T = signlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signlist {
    pub id: ::std::os::raw::c_int,
    pub lnum: linenr_T,
    pub typenr: ::std::os::raw::c_int,
    pub group: *mut signgroup_T,
    pub priority: ::std::os::raw::c_int,
    pub next: *mut signlist_T,
    pub prev: *mut signlist_T,
}
#[test]
fn bindgen_test_layout_signlist() {
    assert_eq!(
        ::std::mem::size_of::<signlist>(),
        56usize,
        concat!("Size of: ", stringify!(signlist))
    );
    assert_eq!(
        ::std::mem::align_of::<signlist>(),
        8usize,
        concat!("Alignment of ", stringify!(signlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).lnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).typenr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(typenr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).group as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).priority as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<signlist>())).prev as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(signlist),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arglist {
    pub al_ga: garray_T,
    pub al_refcount: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_arglist() {
    assert_eq!(
        ::std::mem::size_of::<arglist>(),
        32usize,
        concat!("Size of: ", stringify!(arglist))
    );
    assert_eq!(
        ::std::mem::align_of::<arglist>(),
        8usize,
        concat!("Alignment of ", stringify!(arglist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<arglist>())).al_ga as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(al_ga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<arglist>())).al_refcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(al_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<arglist>())).id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(arglist),
            "::",
            stringify!(id)
        )
    );
}
pub type alist_T = arglist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argentry {
    pub ae_fname: *mut char_u,
    pub ae_fnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_argentry() {
    assert_eq!(
        ::std::mem::size_of::<argentry>(),
        16usize,
        concat!("Size of: ", stringify!(argentry))
    );
    assert_eq!(
        ::std::mem::align_of::<argentry>(),
        8usize,
        concat!("Alignment of ", stringify!(argentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<argentry>())).ae_fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argentry),
            "::",
            stringify!(ae_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<argentry>())).ae_fnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argentry),
            "::",
            stringify!(ae_fnum)
        )
    );
}
pub type aentry_T = argentry;
pub type eslist_T = eslist_elem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eslist_elem {
    pub saved_emsg_silent: ::std::os::raw::c_int,
    pub next: *mut eslist_T,
}
#[test]
fn bindgen_test_layout_eslist_elem() {
    assert_eq!(
        ::std::mem::size_of::<eslist_elem>(),
        16usize,
        concat!("Size of: ", stringify!(eslist_elem))
    );
    assert_eq!(
        ::std::mem::align_of::<eslist_elem>(),
        8usize,
        concat!("Alignment of ", stringify!(eslist_elem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eslist_elem>())).saved_emsg_silent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eslist_elem),
            "::",
            stringify!(saved_emsg_silent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eslist_elem>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eslist_elem),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct condstack {
    pub cs_flags: [::std::os::raw::c_short; 50usize],
    pub cs_pending: [::std::os::raw::c_char; 50usize],
    pub cs_pend: condstack__bindgen_ty_1,
    pub cs_forinfo: [*mut ::std::os::raw::c_void; 50usize],
    pub cs_line: [::std::os::raw::c_int; 50usize],
    pub cs_idx: ::std::os::raw::c_int,
    pub cs_looplevel: ::std::os::raw::c_int,
    pub cs_trylevel: ::std::os::raw::c_int,
    pub cs_emsg_silent_list: *mut eslist_T,
    pub cs_lflags: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union condstack__bindgen_ty_1 {
    pub csp_rv: [*mut ::std::os::raw::c_void; 50usize],
    pub csp_ex: [*mut ::std::os::raw::c_void; 50usize],
}
#[test]
fn bindgen_test_layout_condstack__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<condstack__bindgen_ty_1>(),
        400usize,
        concat!("Size of: ", stringify!(condstack__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<condstack__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(condstack__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack__bindgen_ty_1>())).csp_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack__bindgen_ty_1),
            "::",
            stringify!(csp_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack__bindgen_ty_1>())).csp_ex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack__bindgen_ty_1),
            "::",
            stringify!(csp_ex)
        )
    );
}
#[test]
fn bindgen_test_layout_condstack() {
    assert_eq!(
        ::std::mem::size_of::<condstack>(),
        1184usize,
        concat!("Size of: ", stringify!(condstack))
    );
    assert_eq!(
        ::std::mem::align_of::<condstack>(),
        8usize,
        concat!("Alignment of ", stringify!(condstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_pending as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_pend as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_pend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_forinfo as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_forinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_line as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_idx as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_looplevel as *const _ as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_looplevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_trylevel as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_trylevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_emsg_silent_list as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_emsg_silent_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condstack>())).cs_lflags as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(condstack),
            "::",
            stringify!(cs_lflags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msglist {
    pub msg: *mut ::std::os::raw::c_char,
    pub throw_msg: *mut ::std::os::raw::c_char,
    pub next: *mut msglist,
}
#[test]
fn bindgen_test_layout_msglist() {
    assert_eq!(
        ::std::mem::size_of::<msglist>(),
        24usize,
        concat!("Size of: ", stringify!(msglist))
    );
    assert_eq!(
        ::std::mem::align_of::<msglist>(),
        8usize,
        concat!("Alignment of ", stringify!(msglist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msglist>())).msg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msglist>())).throw_msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(throw_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msglist>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msglist),
            "::",
            stringify!(next)
        )
    );
}
pub const except_type_T_ET_USER: except_type_T = 0;
pub const except_type_T_ET_ERROR: except_type_T = 1;
pub const except_type_T_ET_INTERRUPT: except_type_T = 2;
pub type except_type_T = ::std::os::raw::c_uint;
pub type except_T = vim_exception;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vim_exception {
    pub type_: except_type_T,
    pub value: *mut ::std::os::raw::c_char,
    pub messages: *mut msglist,
    pub throw_name: *mut char_u,
    pub throw_lnum: linenr_T,
    pub caught: *mut except_T,
}
#[test]
fn bindgen_test_layout_vim_exception() {
    assert_eq!(
        ::std::mem::size_of::<vim_exception>(),
        48usize,
        concat!("Size of: ", stringify!(vim_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<vim_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(vim_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vim_exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vim_exception>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vim_exception>())).messages as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(messages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vim_exception>())).throw_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(throw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vim_exception>())).throw_lnum as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(throw_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vim_exception>())).caught as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vim_exception),
            "::",
            stringify!(caught)
        )
    );
}
pub type cleanup_T = cleanup_stuff;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cleanup_stuff {
    pub pending: ::std::os::raw::c_int,
    pub exception: *mut except_T,
}
#[test]
fn bindgen_test_layout_cleanup_stuff() {
    assert_eq!(
        ::std::mem::size_of::<cleanup_stuff>(),
        16usize,
        concat!("Size of: ", stringify!(cleanup_stuff))
    );
    assert_eq!(
        ::std::mem::align_of::<cleanup_stuff>(),
        8usize,
        concat!("Alignment of ", stringify!(cleanup_stuff))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cleanup_stuff>())).pending as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cleanup_stuff),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cleanup_stuff>())).exception as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cleanup_stuff),
            "::",
            stringify!(exception)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct attr_entry {
    pub ae_attr: ::std::os::raw::c_short,
    pub ae_u: attr_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union attr_entry__bindgen_ty_1 {
    pub term: attr_entry__bindgen_ty_1__bindgen_ty_1,
    pub cterm: attr_entry__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attr_entry__bindgen_ty_1__bindgen_ty_1 {
    pub start: *mut char_u,
    pub stop: *mut char_u,
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attr_entry__bindgen_ty_1__bindgen_ty_1>())).start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attr_entry__bindgen_ty_1__bindgen_ty_1>())).stop as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(stop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attr_entry__bindgen_ty_1__bindgen_ty_2 {
    pub fg_color: short_u,
    pub bg_color: short_u,
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attr_entry__bindgen_ty_1__bindgen_ty_2>())).fg_color as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<attr_entry__bindgen_ty_1__bindgen_ty_2>())).bg_color as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bg_color)
        )
    );
}
#[test]
fn bindgen_test_layout_attr_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<attr_entry__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(attr_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(attr_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attr_entry__bindgen_ty_1>())).term as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attr_entry__bindgen_ty_1>())).cterm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry__bindgen_ty_1),
            "::",
            stringify!(cterm)
        )
    );
}
#[test]
fn bindgen_test_layout_attr_entry() {
    assert_eq!(
        ::std::mem::size_of::<attr_entry>(),
        24usize,
        concat!("Size of: ", stringify!(attr_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<attr_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(attr_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attr_entry>())).ae_attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry),
            "::",
            stringify!(ae_attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attr_entry>())).ae_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(attr_entry),
            "::",
            stringify!(ae_u)
        )
    );
}
pub type attrentry_T = attr_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct typebuf_T {
    pub tb_buf: *mut char_u,
    pub tb_noremap: *mut char_u,
    pub tb_buflen: ::std::os::raw::c_int,
    pub tb_off: ::std::os::raw::c_int,
    pub tb_len: ::std::os::raw::c_int,
    pub tb_maplen: ::std::os::raw::c_int,
    pub tb_silent: ::std::os::raw::c_int,
    pub tb_no_abbr_cnt: ::std::os::raw::c_int,
    pub tb_change_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_typebuf_T() {
    assert_eq!(
        ::std::mem::size_of::<typebuf_T>(),
        48usize,
        concat!("Size of: ", stringify!(typebuf_T))
    );
    assert_eq!(
        ::std::mem::align_of::<typebuf_T>(),
        8usize,
        concat!("Alignment of ", stringify!(typebuf_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_noremap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_noremap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_buflen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_off as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_maplen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_maplen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_silent as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_silent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_no_abbr_cnt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_no_abbr_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typebuf_T>())).tb_change_cnt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(typebuf_T),
            "::",
            stringify!(tb_change_cnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tasave_T {
    pub save_typebuf: typebuf_T,
    pub typebuf_valid: ::std::os::raw::c_int,
    pub old_char: ::std::os::raw::c_int,
    pub old_mod_mask: ::std::os::raw::c_int,
    pub save_readbuf1: buffheader_T,
    pub save_readbuf2: buffheader_T,
}
#[test]
fn bindgen_test_layout_tasave_T() {
    assert_eq!(
        ::std::mem::size_of::<tasave_T>(),
        128usize,
        concat!("Size of: ", stringify!(tasave_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tasave_T>(),
        8usize,
        concat!("Alignment of ", stringify!(tasave_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tasave_T>())).save_typebuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_typebuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tasave_T>())).typebuf_valid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(typebuf_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tasave_T>())).old_char as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(old_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tasave_T>())).old_mod_mask as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(old_mod_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tasave_T>())).save_readbuf1 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_readbuf1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tasave_T>())).save_readbuf2 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tasave_T),
            "::",
            stringify!(save_readbuf2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vimconv_T {
    pub vc_type: ::std::os::raw::c_int,
    pub vc_factor: ::std::os::raw::c_int,
    pub vc_fail: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vimconv_T() {
    assert_eq!(
        ::std::mem::size_of::<vimconv_T>(),
        12usize,
        concat!("Size of: ", stringify!(vimconv_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vimconv_T>(),
        4usize,
        concat!("Alignment of ", stringify!(vimconv_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vimconv_T>())).vc_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vimconv_T>())).vc_factor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vimconv_T>())).vc_fail as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vimconv_T),
            "::",
            stringify!(vc_fail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vir_T {
    pub vir_line: *mut char_u,
    pub vir_fd: *mut FILE,
    pub vir_conv: vimconv_T,
    pub vir_version: ::std::os::raw::c_int,
    pub vir_barlines: garray_T,
}
#[test]
fn bindgen_test_layout_vir_T() {
    assert_eq!(
        ::std::mem::size_of::<vir_T>(),
        56usize,
        concat!("Size of: ", stringify!(vir_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vir_T>(),
        8usize,
        concat!("Alignment of ", stringify!(vir_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vir_T>())).vir_line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vir_T>())).vir_fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vir_T>())).vir_conv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_conv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vir_T>())).vir_version as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vir_T>())).vir_barlines as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vir_T),
            "::",
            stringify!(vir_barlines)
        )
    );
}
pub type mapblock_T = mapblock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mapblock {
    pub m_next: *mut mapblock_T,
    pub m_keys: *mut char_u,
    pub m_orig_keys: *mut char_u,
    pub m_str: *mut char_u,
    pub m_orig_str: *mut char_u,
    pub m_keylen: ::std::os::raw::c_int,
    pub m_mode: ::std::os::raw::c_int,
    pub m_noremap: ::std::os::raw::c_int,
    pub m_silent: ::std::os::raw::c_char,
    pub m_nowait: ::std::os::raw::c_char,
    pub m_expr: ::std::os::raw::c_char,
    pub m_script_ctx: sctx_T,
}
#[test]
fn bindgen_test_layout_mapblock() {
    assert_eq!(
        ::std::mem::size_of::<mapblock>(),
        80usize,
        concat!("Size of: ", stringify!(mapblock))
    );
    assert_eq!(
        ::std::mem::align_of::<mapblock>(),
        8usize,
        concat!("Alignment of ", stringify!(mapblock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_orig_keys as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_orig_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_str as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_orig_str as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_orig_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_keylen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_keylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_mode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_noremap as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_noremap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_silent as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_silent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_nowait as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_nowait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_expr as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapblock>())).m_script_ctx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mapblock),
            "::",
            stringify!(m_script_ctx)
        )
    );
}
pub type InputMapCallback = ::std::option::Option<unsafe extern "C" fn(mapping: *const mapblock_T)>;
pub type InputUnmapCallback = ::std::option::Option<
    unsafe extern "C" fn(mode: ::std::os::raw::c_int, orig_lhs: *const char_u),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stl_hlrec {
    pub start: *mut char_u,
    pub userhl: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_stl_hlrec() {
    assert_eq!(
        ::std::mem::size_of::<stl_hlrec>(),
        16usize,
        concat!("Size of: ", stringify!(stl_hlrec))
    );
    assert_eq!(
        ::std::mem::align_of::<stl_hlrec>(),
        8usize,
        concat!("Alignment of ", stringify!(stl_hlrec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stl_hlrec>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stl_hlrec),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stl_hlrec>())).userhl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stl_hlrec),
            "::",
            stringify!(userhl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashitem_S {
    pub hi_hash: long_u,
    pub hi_key: *mut char_u,
}
#[test]
fn bindgen_test_layout_hashitem_S() {
    assert_eq!(
        ::std::mem::size_of::<hashitem_S>(),
        16usize,
        concat!("Size of: ", stringify!(hashitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<hashitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(hashitem_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashitem_S>())).hi_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashitem_S),
            "::",
            stringify!(hi_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashitem_S>())).hi_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashitem_S),
            "::",
            stringify!(hi_key)
        )
    );
}
pub type hashitem_T = hashitem_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hashtable_S {
    pub ht_mask: long_u,
    pub ht_used: long_u,
    pub ht_filled: long_u,
    pub ht_locked: ::std::os::raw::c_int,
    pub ht_error: ::std::os::raw::c_int,
    pub ht_array: *mut hashitem_T,
    pub ht_smallarray: [hashitem_T; 16usize],
}
#[test]
fn bindgen_test_layout_hashtable_S() {
    assert_eq!(
        ::std::mem::size_of::<hashtable_S>(),
        296usize,
        concat!("Size of: ", stringify!(hashtable_S))
    );
    assert_eq!(
        ::std::mem::align_of::<hashtable_S>(),
        8usize,
        concat!("Alignment of ", stringify!(hashtable_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_filled as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_locked as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_error as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_array as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hashtable_S>())).ht_smallarray as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hashtable_S),
            "::",
            stringify!(ht_smallarray)
        )
    );
}
pub type hashtab_T = hashtable_S;
pub type hash_T = long_u;
pub type varnumber_T = ::std::os::raw::c_int;
pub type uvarnumber_T = ::std::os::raw::c_uint;
pub type float_T = f64;
pub type list_T = listvar_S;
pub type dict_T = dictvar_S;
pub type partial_T = partial_S;
pub type blob_T = blobvar_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callback_T {
    pub cb_name: *mut char_u,
    pub cb_partial: *mut partial_T,
    pub cb_free_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_callback_T() {
    assert_eq!(
        ::std::mem::size_of::<callback_T>(),
        24usize,
        concat!("Size of: ", stringify!(callback_T))
    );
    assert_eq!(
        ::std::mem::align_of::<callback_T>(),
        8usize,
        concat!("Alignment of ", stringify!(callback_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<callback_T>())).cb_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<callback_T>())).cb_partial as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_partial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<callback_T>())).cb_free_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_T),
            "::",
            stringify!(cb_free_name)
        )
    );
}
pub type job_T = jobvar_S;
pub type readq_T = readq_S;
pub type writeq_T = writeq_S;
pub type jsonq_T = jsonq_S;
pub type cbq_T = cbq_S;
pub type channel_T = channel_S;
pub const vartype_T_VAR_UNKNOWN: vartype_T = 0;
pub const vartype_T_VAR_NUMBER: vartype_T = 1;
pub const vartype_T_VAR_STRING: vartype_T = 2;
pub const vartype_T_VAR_FUNC: vartype_T = 3;
pub const vartype_T_VAR_PARTIAL: vartype_T = 4;
pub const vartype_T_VAR_LIST: vartype_T = 5;
pub const vartype_T_VAR_DICT: vartype_T = 6;
pub const vartype_T_VAR_FLOAT: vartype_T = 7;
pub const vartype_T_VAR_SPECIAL: vartype_T = 8;
pub const vartype_T_VAR_JOB: vartype_T = 9;
pub const vartype_T_VAR_CHANNEL: vartype_T = 10;
pub const vartype_T_VAR_BLOB: vartype_T = 11;
pub type vartype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct typval_T {
    pub v_type: vartype_T,
    pub v_lock: ::std::os::raw::c_char,
    pub vval: typval_T__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union typval_T__bindgen_ty_1 {
    pub v_number: varnumber_T,
    pub v_string: *mut char_u,
    pub v_list: *mut list_T,
    pub v_dict: *mut dict_T,
    pub v_partial: *mut partial_T,
    pub v_blob: *mut blob_T,
}
#[test]
fn bindgen_test_layout_typval_T__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<typval_T__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(typval_T__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<typval_T__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(typval_T__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T__bindgen_ty_1>())).v_number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T__bindgen_ty_1>())).v_string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T__bindgen_ty_1>())).v_list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T__bindgen_ty_1>())).v_dict as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_dict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<typval_T__bindgen_ty_1>())).v_partial as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_partial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T__bindgen_ty_1>())).v_blob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T__bindgen_ty_1),
            "::",
            stringify!(v_blob)
        )
    );
}
#[test]
fn bindgen_test_layout_typval_T() {
    assert_eq!(
        ::std::mem::size_of::<typval_T>(),
        16usize,
        concat!("Size of: ", stringify!(typval_T))
    );
    assert_eq!(
        ::std::mem::align_of::<typval_T>(),
        8usize,
        concat!("Alignment of ", stringify!(typval_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T>())).v_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(v_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T>())).v_lock as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(v_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<typval_T>())).vval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(typval_T),
            "::",
            stringify!(vval)
        )
    );
}
pub type listitem_T = listitem_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct listitem_S {
    pub li_next: *mut listitem_T,
    pub li_prev: *mut listitem_T,
    pub li_tv: typval_T,
}
#[test]
fn bindgen_test_layout_listitem_S() {
    assert_eq!(
        ::std::mem::size_of::<listitem_S>(),
        32usize,
        concat!("Size of: ", stringify!(listitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listitem_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listitem_S>())).li_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listitem_S>())).li_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listitem_S>())).li_tv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listitem_S),
            "::",
            stringify!(li_tv)
        )
    );
}
pub type listwatch_T = listwatch_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listwatch_S {
    pub lw_item: *mut listitem_T,
    pub lw_next: *mut listwatch_T,
}
#[test]
fn bindgen_test_layout_listwatch_S() {
    assert_eq!(
        ::std::mem::size_of::<listwatch_S>(),
        16usize,
        concat!("Size of: ", stringify!(listwatch_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listwatch_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listwatch_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listwatch_S>())).lw_item as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listwatch_S),
            "::",
            stringify!(lw_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listwatch_S>())).lw_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listwatch_S),
            "::",
            stringify!(lw_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listvar_S {
    pub lv_first: *mut listitem_T,
    pub lv_last: *mut listitem_T,
    pub lv_watch: *mut listwatch_T,
    pub lv_idx_item: *mut listitem_T,
    pub lv_copylist: *mut list_T,
    pub lv_used_next: *mut list_T,
    pub lv_used_prev: *mut list_T,
    pub lv_refcount: ::std::os::raw::c_int,
    pub lv_len: ::std::os::raw::c_int,
    pub lv_idx: ::std::os::raw::c_int,
    pub lv_copyID: ::std::os::raw::c_int,
    pub lv_lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_listvar_S() {
    assert_eq!(
        ::std::mem::size_of::<listvar_S>(),
        80usize,
        concat!("Size of: ", stringify!(listvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listvar_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_watch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_watch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_idx_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_idx_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_copylist as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_copylist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_used_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_used_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_used_prev as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_used_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_refcount as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_len as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_idx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_copyID as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_copyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listvar_S>())).lv_lock as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(listvar_S),
            "::",
            stringify!(lv_lock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct staticList10_T {
    pub sl_list: list_T,
    pub sl_items: [listitem_T; 10usize],
}
#[test]
fn bindgen_test_layout_staticList10_T() {
    assert_eq!(
        ::std::mem::size_of::<staticList10_T>(),
        400usize,
        concat!("Size of: ", stringify!(staticList10_T))
    );
    assert_eq!(
        ::std::mem::align_of::<staticList10_T>(),
        8usize,
        concat!("Alignment of ", stringify!(staticList10_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<staticList10_T>())).sl_list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(staticList10_T),
            "::",
            stringify!(sl_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<staticList10_T>())).sl_items as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(staticList10_T),
            "::",
            stringify!(sl_items)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dictitem_S {
    pub di_tv: typval_T,
    pub di_flags: char_u,
    pub di_key: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_dictitem_S() {
    assert_eq!(
        ::std::mem::size_of::<dictitem_S>(),
        24usize,
        concat!("Size of: ", stringify!(dictitem_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictitem_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictitem_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictitem_S>())).di_tv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_tv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictitem_S>())).di_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictitem_S>())).di_key as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem_S),
            "::",
            stringify!(di_key)
        )
    );
}
pub type dictitem_T = dictitem_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dictitem16_S {
    pub di_tv: typval_T,
    pub di_flags: char_u,
    pub di_key: [char_u; 17usize],
}
#[test]
fn bindgen_test_layout_dictitem16_S() {
    assert_eq!(
        ::std::mem::size_of::<dictitem16_S>(),
        40usize,
        concat!("Size of: ", stringify!(dictitem16_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictitem16_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictitem16_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictitem16_S>())).di_tv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_tv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictitem16_S>())).di_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictitem16_S>())).di_key as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dictitem16_S),
            "::",
            stringify!(di_key)
        )
    );
}
pub type dictitem16_T = dictitem16_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dictvar_S {
    pub dv_lock: ::std::os::raw::c_char,
    pub dv_scope: ::std::os::raw::c_char,
    pub dv_refcount: ::std::os::raw::c_int,
    pub dv_copyID: ::std::os::raw::c_int,
    pub dv_hashtab: hashtab_T,
    pub dv_copydict: *mut dict_T,
    pub dv_used_next: *mut dict_T,
    pub dv_used_prev: *mut dict_T,
}
#[test]
fn bindgen_test_layout_dictvar_S() {
    assert_eq!(
        ::std::mem::size_of::<dictvar_S>(),
        336usize,
        concat!("Size of: ", stringify!(dictvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<dictvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(dictvar_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_scope as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_refcount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_copyID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_copyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_hashtab as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_hashtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_copydict as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_copydict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_used_next as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_used_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictvar_S>())).dv_used_prev as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(dictvar_S),
            "::",
            stringify!(dv_used_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blobvar_S {
    pub bv_ga: garray_T,
    pub bv_refcount: ::std::os::raw::c_int,
    pub bv_lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_blobvar_S() {
    assert_eq!(
        ::std::mem::size_of::<blobvar_S>(),
        32usize,
        concat!("Size of: ", stringify!(blobvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<blobvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(blobvar_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blobvar_S>())).bv_ga as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_ga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blobvar_S>())).bv_refcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<blobvar_S>())).bv_lock as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(blobvar_S),
            "::",
            stringify!(bv_lock)
        )
    );
}
pub type funccall_T = funccall_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ufunc_T {
    pub uf_varargs: ::std::os::raw::c_int,
    pub uf_flags: ::std::os::raw::c_int,
    pub uf_calls: ::std::os::raw::c_int,
    pub uf_cleared: ::std::os::raw::c_int,
    pub uf_args: garray_T,
    pub uf_def_args: garray_T,
    pub uf_lines: garray_T,
    pub uf_script_ctx: sctx_T,
    pub uf_refcount: ::std::os::raw::c_int,
    pub uf_scoped: *mut funccall_T,
    pub uf_name: [char_u; 1usize],
}
#[test]
fn bindgen_test_layout_ufunc_T() {
    assert_eq!(
        ::std::mem::size_of::<ufunc_T>(),
        136usize,
        concat!("Size of: ", stringify!(ufunc_T))
    );
    assert_eq!(
        ::std::mem::align_of::<ufunc_T>(),
        8usize,
        concat!("Alignment of ", stringify!(ufunc_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_varargs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_varargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_calls as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_calls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_cleared as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_cleared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_def_args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_def_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_lines as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_script_ctx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_script_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_refcount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_scoped as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_scoped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ufunc_T>())).uf_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ufunc_T),
            "::",
            stringify!(uf_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct funccall_S {
    pub func: *mut ufunc_T,
    pub linenr: ::std::os::raw::c_int,
    pub returned: ::std::os::raw::c_int,
    pub fixvar: [funccall_S__bindgen_ty_1; 12usize],
    pub l_vars: dict_T,
    pub l_vars_var: dictitem_T,
    pub l_avars: dict_T,
    pub l_avars_var: dictitem_T,
    pub l_varlist: list_T,
    pub l_listitems: [listitem_T; 20usize],
    pub rettv: *mut typval_T,
    pub breakpoint: linenr_T,
    pub dbg_tick: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub caller: *mut funccall_T,
    pub fc_refcount: ::std::os::raw::c_int,
    pub fc_copyID: ::std::os::raw::c_int,
    pub fc_funcs: garray_T,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct funccall_S__bindgen_ty_1 {
    pub var: dictitem_T,
    pub room: [char_u; 20usize],
}
#[test]
fn bindgen_test_layout_funccall_S__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<funccall_S__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(funccall_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<funccall_S__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(funccall_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S__bindgen_ty_1>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S__bindgen_ty_1),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S__bindgen_ty_1>())).room as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S__bindgen_ty_1),
            "::",
            stringify!(room)
        )
    );
}
#[test]
fn bindgen_test_layout_funccall_S() {
    assert_eq!(
        ::std::mem::size_of::<funccall_S>(),
        2096usize,
        concat!("Size of: ", stringify!(funccall_S))
    );
    assert_eq!(
        ::std::mem::align_of::<funccall_S>(),
        8usize,
        concat!("Alignment of ", stringify!(funccall_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).linenr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(linenr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).returned as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(returned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).fixvar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fixvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).l_vars as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).l_vars_var as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_vars_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).l_avars as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_avars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).l_avars_var as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_avars_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).l_varlist as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_varlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).l_listitems as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(l_listitems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).rettv as *const _ as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(rettv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).breakpoint as *const _ as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(breakpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).dbg_tick as *const _ as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(dbg_tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).level as *const _ as usize },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).caller as *const _ as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(caller)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).fc_refcount as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).fc_copyID as *const _ as usize },
        2068usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_copyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccall_S>())).fc_funcs as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(funccall_S),
            "::",
            stringify!(fc_funcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct funcdict_T {
    pub fd_dict: *mut dict_T,
    pub fd_newkey: *mut char_u,
    pub fd_di: *mut dictitem_T,
}
#[test]
fn bindgen_test_layout_funcdict_T() {
    assert_eq!(
        ::std::mem::size_of::<funcdict_T>(),
        24usize,
        concat!("Size of: ", stringify!(funcdict_T))
    );
    assert_eq!(
        ::std::mem::align_of::<funcdict_T>(),
        8usize,
        concat!("Alignment of ", stringify!(funcdict_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funcdict_T>())).fd_dict as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funcdict_T>())).fd_newkey as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_newkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funcdict_T>())).fd_di as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(funcdict_T),
            "::",
            stringify!(fd_di)
        )
    );
}
pub type funccal_entry_T = funccal_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct funccal_entry {
    pub top_funccal: *mut ::std::os::raw::c_void,
    pub next: *mut funccal_entry_T,
}
#[test]
fn bindgen_test_layout_funccal_entry() {
    assert_eq!(
        ::std::mem::size_of::<funccal_entry>(),
        16usize,
        concat!("Size of: ", stringify!(funccal_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<funccal_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(funccal_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccal_entry>())).top_funccal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(funccal_entry),
            "::",
            stringify!(top_funccal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<funccal_entry>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(funccal_entry),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partial_S {
    pub pt_refcount: ::std::os::raw::c_int,
    pub pt_name: *mut char_u,
    pub pt_func: *mut ufunc_T,
    pub pt_auto: ::std::os::raw::c_int,
    pub pt_argc: ::std::os::raw::c_int,
    pub pt_argv: *mut typval_T,
    pub pt_dict: *mut dict_T,
}
#[test]
fn bindgen_test_layout_partial_S() {
    assert_eq!(
        ::std::mem::size_of::<partial_S>(),
        48usize,
        concat!("Size of: ", stringify!(partial_S))
    );
    assert_eq!(
        ::std::mem::align_of::<partial_S>(),
        8usize,
        concat!("Alignment of ", stringify!(partial_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_auto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_auto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_argc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_argv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<partial_S>())).pt_dict as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(partial_S),
            "::",
            stringify!(pt_dict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttyinfo_T {
    pub backspace: ::std::os::raw::c_int,
    pub enter: ::std::os::raw::c_int,
    pub interrupt: ::std::os::raw::c_int,
    pub nl_does_cr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ttyinfo_T() {
    assert_eq!(
        ::std::mem::size_of::<ttyinfo_T>(),
        16usize,
        concat!("Size of: ", stringify!(ttyinfo_T))
    );
    assert_eq!(
        ::std::mem::align_of::<ttyinfo_T>(),
        4usize,
        concat!("Alignment of ", stringify!(ttyinfo_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttyinfo_T>())).backspace as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(backspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttyinfo_T>())).enter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttyinfo_T>())).interrupt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(interrupt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttyinfo_T>())).nl_does_cr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyinfo_T),
            "::",
            stringify!(nl_does_cr)
        )
    );
}
pub const jobstatus_T_JOB_FAILED: jobstatus_T = 0;
pub const jobstatus_T_JOB_STARTED: jobstatus_T = 1;
pub const jobstatus_T_JOB_ENDED: jobstatus_T = 2;
pub const jobstatus_T_JOB_FINISHED: jobstatus_T = 3;
pub type jobstatus_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobvar_S {
    pub jv_next: *mut job_T,
    pub jv_prev: *mut job_T,
    pub jv_tty_in: *mut char_u,
    pub jv_tty_out: *mut char_u,
    pub jv_status: jobstatus_T,
    pub jv_stoponexit: *mut char_u,
    pub jv_exitval: ::std::os::raw::c_int,
    pub jv_exit_cb: callback_T,
    pub jv_in_buf: *mut buf_T,
    pub jv_refcount: ::std::os::raw::c_int,
    pub jv_copyID: ::std::os::raw::c_int,
    pub jv_channel: *mut channel_T,
    pub jv_argv: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_jobvar_S() {
    assert_eq!(
        ::std::mem::size_of::<jobvar_S>(),
        112usize,
        concat!("Size of: ", stringify!(jobvar_S))
    );
    assert_eq!(
        ::std::mem::align_of::<jobvar_S>(),
        8usize,
        concat!("Alignment of ", stringify!(jobvar_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_tty_in as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_tty_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_tty_out as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_tty_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_stoponexit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_stoponexit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_exitval as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_exitval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_exit_cb as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_exit_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_in_buf as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_in_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_refcount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_copyID as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_copyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_channel as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobvar_S>())).jv_argv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jobvar_S),
            "::",
            stringify!(jv_argv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readq_S {
    pub rq_buffer: *mut char_u,
    pub rq_buflen: long_u,
    pub rq_next: *mut readq_T,
    pub rq_prev: *mut readq_T,
}
#[test]
fn bindgen_test_layout_readq_S() {
    assert_eq!(
        ::std::mem::size_of::<readq_S>(),
        32usize,
        concat!("Size of: ", stringify!(readq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<readq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(readq_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<readq_S>())).rq_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<readq_S>())).rq_buflen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<readq_S>())).rq_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<readq_S>())).rq_prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(readq_S),
            "::",
            stringify!(rq_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct writeq_S {
    pub wq_ga: garray_T,
    pub wq_next: *mut writeq_T,
    pub wq_prev: *mut writeq_T,
}
#[test]
fn bindgen_test_layout_writeq_S() {
    assert_eq!(
        ::std::mem::size_of::<writeq_S>(),
        40usize,
        concat!("Size of: ", stringify!(writeq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<writeq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(writeq_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<writeq_S>())).wq_ga as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_ga)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<writeq_S>())).wq_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<writeq_S>())).wq_prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(writeq_S),
            "::",
            stringify!(wq_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jsonq_S {
    pub jq_value: *mut typval_T,
    pub jq_next: *mut jsonq_T,
    pub jq_prev: *mut jsonq_T,
    pub jq_no_callback: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jsonq_S() {
    assert_eq!(
        ::std::mem::size_of::<jsonq_S>(),
        32usize,
        concat!("Size of: ", stringify!(jsonq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<jsonq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(jsonq_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jsonq_S>())).jq_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jsonq_S>())).jq_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jsonq_S>())).jq_prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jsonq_S>())).jq_no_callback as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jsonq_S),
            "::",
            stringify!(jq_no_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cbq_S {
    pub cq_callback: callback_T,
    pub cq_seq_nr: ::std::os::raw::c_int,
    pub cq_next: *mut cbq_T,
    pub cq_prev: *mut cbq_T,
}
#[test]
fn bindgen_test_layout_cbq_S() {
    assert_eq!(
        ::std::mem::size_of::<cbq_S>(),
        48usize,
        concat!("Size of: ", stringify!(cbq_S))
    );
    assert_eq!(
        ::std::mem::align_of::<cbq_S>(),
        8usize,
        concat!("Alignment of ", stringify!(cbq_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbq_S>())).cq_callback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbq_S>())).cq_seq_nr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_seq_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbq_S>())).cq_next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cbq_S>())).cq_prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cbq_S),
            "::",
            stringify!(cq_prev)
        )
    );
}
pub const ch_mode_T_MODE_NL: ch_mode_T = 0;
pub const ch_mode_T_MODE_RAW: ch_mode_T = 1;
pub const ch_mode_T_MODE_JSON: ch_mode_T = 2;
pub const ch_mode_T_MODE_JS: ch_mode_T = 3;
pub type ch_mode_T = ::std::os::raw::c_uint;
pub const job_io_T_JIO_PIPE: job_io_T = 0;
pub const job_io_T_JIO_NULL: job_io_T = 1;
pub const job_io_T_JIO_FILE: job_io_T = 2;
pub const job_io_T_JIO_BUFFER: job_io_T = 3;
pub const job_io_T_JIO_OUT: job_io_T = 4;
pub type job_io_T = ::std::os::raw::c_uint;
pub const ch_part_T_PART_SOCK: ch_part_T = 0;
pub const ch_part_T_PART_COUNT: ch_part_T = 1;
pub type ch_part_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chanpart_T {
    pub ch_fd: sock_T,
    pub ch_mode: ch_mode_T,
    pub ch_io: job_io_T,
    pub ch_timeout: ::std::os::raw::c_int,
    pub ch_head: readq_T,
    pub ch_json_head: jsonq_T,
    pub ch_block_id: ::std::os::raw::c_int,
    pub ch_wait_len: size_t,
    pub ch_block_write: ::std::os::raw::c_int,
    pub ch_nonblocking: ::std::os::raw::c_int,
    pub ch_writeque: writeq_T,
    pub ch_cb_head: cbq_T,
    pub ch_callback: callback_T,
    pub ch_bufref: bufref_T,
    pub ch_nomodifiable: ::std::os::raw::c_int,
    pub ch_nomod_error: ::std::os::raw::c_int,
    pub ch_buf_append: ::std::os::raw::c_int,
    pub ch_buf_top: linenr_T,
    pub ch_buf_bot: linenr_T,
}
#[test]
fn bindgen_test_layout_chanpart_T() {
    assert_eq!(
        ::std::mem::size_of::<chanpart_T>(),
        264usize,
        concat!("Size of: ", stringify!(chanpart_T))
    );
    assert_eq!(
        ::std::mem::align_of::<chanpart_T>(),
        8usize,
        concat!("Alignment of ", stringify!(chanpart_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_io as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_timeout as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_head as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_json_head as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_json_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_block_id as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_block_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_wait_len as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_wait_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_block_write as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_block_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_nonblocking as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nonblocking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_writeque as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_writeque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_cb_head as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_cb_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_callback as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_bufref as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_bufref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_nomodifiable as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nomodifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_nomod_error as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_nomod_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_buf_append as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_append)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_buf_top as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chanpart_T>())).ch_buf_bot as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(chanpart_T),
            "::",
            stringify!(ch_buf_bot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_S {
    pub ch_next: *mut channel_T,
    pub ch_prev: *mut channel_T,
    pub ch_id: ::std::os::raw::c_int,
    pub ch_last_msg_id: ::std::os::raw::c_int,
    pub ch_part: [chanpart_T; 1usize],
    pub ch_write_text_mode: ::std::os::raw::c_int,
    pub ch_hostname: *mut ::std::os::raw::c_char,
    pub ch_port: ::std::os::raw::c_int,
    pub ch_to_be_closed: ::std::os::raw::c_int,
    pub ch_to_be_freed: ::std::os::raw::c_int,
    pub ch_error: ::std::os::raw::c_int,
    pub ch_nb_close_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub ch_callback: callback_T,
    pub ch_close_cb: callback_T,
    pub ch_drop_never: ::std::os::raw::c_int,
    pub ch_keep_open: ::std::os::raw::c_int,
    pub ch_nonblock: ::std::os::raw::c_int,
    pub ch_job: *mut job_T,
    pub ch_job_killed: ::std::os::raw::c_int,
    pub ch_anonymous_pipe: ::std::os::raw::c_int,
    pub ch_killing: ::std::os::raw::c_int,
    pub ch_refcount: ::std::os::raw::c_int,
    pub ch_copyID: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_channel_S() {
    assert_eq!(
        ::std::mem::size_of::<channel_S>(),
        424usize,
        concat!("Size of: ", stringify!(channel_S))
    );
    assert_eq!(
        ::std::mem::align_of::<channel_S>(),
        8usize,
        concat!("Alignment of ", stringify!(channel_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_last_msg_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_last_msg_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_part as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_write_text_mode as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_write_text_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_hostname as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_port as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_to_be_closed as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_to_be_closed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_to_be_freed as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_to_be_freed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_error as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_nb_close_cb as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_nb_close_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_callback as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_close_cb as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_close_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_drop_never as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_drop_never)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_keep_open as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_keep_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_nonblock as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_nonblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_job as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_job)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_job_killed as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_job_killed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_anonymous_pipe as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_anonymous_pipe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_killing as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_killing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_refcount as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<channel_S>())).ch_copyID as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_S),
            "::",
            stringify!(ch_copyID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jobopt_T {
    pub jo_set: ::std::os::raw::c_int,
    pub jo_set2: ::std::os::raw::c_int,
    pub jo_mode: ch_mode_T,
    pub jo_in_mode: ch_mode_T,
    pub jo_out_mode: ch_mode_T,
    pub jo_err_mode: ch_mode_T,
    pub jo_noblock: ::std::os::raw::c_int,
    pub jo_io: [job_io_T; 4usize],
    pub jo_io_name_buf: [[char_u; 65usize]; 4usize],
    pub jo_io_name: [*mut char_u; 4usize],
    pub jo_io_buf: [::std::os::raw::c_int; 4usize],
    pub jo_pty: ::std::os::raw::c_int,
    pub jo_modifiable: [::std::os::raw::c_int; 4usize],
    pub jo_message: [::std::os::raw::c_int; 4usize],
    pub jo_channel: *mut channel_T,
    pub jo_in_top: linenr_T,
    pub jo_in_bot: linenr_T,
    pub jo_callback: callback_T,
    pub jo_out_cb: callback_T,
    pub jo_err_cb: callback_T,
    pub jo_close_cb: callback_T,
    pub jo_exit_cb: callback_T,
    pub jo_drop_never: ::std::os::raw::c_int,
    pub jo_waittime: ::std::os::raw::c_int,
    pub jo_timeout: ::std::os::raw::c_int,
    pub jo_out_timeout: ::std::os::raw::c_int,
    pub jo_err_timeout: ::std::os::raw::c_int,
    pub jo_block_write: ::std::os::raw::c_int,
    pub jo_part: ::std::os::raw::c_int,
    pub jo_id: ::std::os::raw::c_int,
    pub jo_soe_buf: [char_u; 65usize],
    pub jo_stoponexit: *mut char_u,
    pub jo_env: *mut dict_T,
    pub jo_cwd_buf: [char_u; 65usize],
    pub jo_cwd: *mut char_u,
    pub jo_term_rows: ::std::os::raw::c_int,
    pub jo_term_cols: ::std::os::raw::c_int,
    pub jo_vertical: ::std::os::raw::c_int,
    pub jo_curwin: ::std::os::raw::c_int,
    pub jo_hidden: ::std::os::raw::c_int,
    pub jo_term_norestore: ::std::os::raw::c_int,
    pub jo_term_name: *mut char_u,
    pub jo_term_opencmd: *mut char_u,
    pub jo_term_finish: ::std::os::raw::c_int,
    pub jo_eof_chars: *mut char_u,
    pub jo_term_kill: *mut char_u,
    pub jo_tty_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jobopt_T() {
    assert_eq!(
        ::std::mem::size_of::<jobopt_T>(),
        808usize,
        concat!("Size of: ", stringify!(jobopt_T))
    );
    assert_eq!(
        ::std::mem::align_of::<jobopt_T>(),
        8usize,
        concat!("Alignment of ", stringify!(jobopt_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_set as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_set2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_set2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_in_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_out_mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_err_mode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_noblock as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_noblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_io as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_io_name_buf as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_name_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_io_name as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_io_buf as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_io_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_pty as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_pty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_modifiable as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_modifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_message as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_channel as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_in_top as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_in_bot as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_in_bot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_callback as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_out_cb as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_err_cb as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_close_cb as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_close_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_exit_cb as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_exit_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_drop_never as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_drop_never)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_waittime as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_waittime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_timeout as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_out_timeout as *const _ as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_out_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_err_timeout as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_err_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_block_write as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_block_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_part as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_id as *const _ as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_soe_buf as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_soe_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_stoponexit as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_stoponexit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_env as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_cwd_buf as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_cwd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_cwd as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_rows as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_cols as *const _ as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_vertical as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_vertical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_curwin as *const _ as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_curwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_hidden as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_norestore as *const _ as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_norestore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_name as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_opencmd as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_opencmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_finish as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_finish)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_eof_chars as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_eof_chars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_term_kill as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_term_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jobopt_T>())).jo_tty_type as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(jobopt_T),
            "::",
            stringify!(jo_tty_type)
        )
    );
}
pub type listener_T = listener_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct listener_S {
    pub lr_next: *mut listener_T,
    pub lr_id: ::std::os::raw::c_int,
    pub lr_callback: callback_T,
}
#[test]
fn bindgen_test_layout_listener_S() {
    assert_eq!(
        ::std::mem::size_of::<listener_S>(),
        40usize,
        concat!("Size of: ", stringify!(listener_S))
    );
    assert_eq!(
        ::std::mem::align_of::<listener_S>(),
        8usize,
        concat!("Alignment of ", stringify!(listener_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listener_S>())).lr_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listener_S>())).lr_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<listener_S>())).lr_callback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(listener_S),
            "::",
            stringify!(lr_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_stack_S {
    pub ht: *mut hashtab_T,
    pub prev: *mut ht_stack_S,
}
#[test]
fn bindgen_test_layout_ht_stack_S() {
    assert_eq!(
        ::std::mem::size_of::<ht_stack_S>(),
        16usize,
        concat!("Size of: ", stringify!(ht_stack_S))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_stack_S>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_stack_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_stack_S>())).ht as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_stack_S),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_stack_S>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_stack_S),
            "::",
            stringify!(prev)
        )
    );
}
pub type ht_stack_T = ht_stack_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_stack_S {
    pub list: *mut list_T,
    pub prev: *mut list_stack_S,
}
#[test]
fn bindgen_test_layout_list_stack_S() {
    assert_eq!(
        ::std::mem::size_of::<list_stack_S>(),
        16usize,
        concat!("Size of: ", stringify!(list_stack_S))
    );
    assert_eq!(
        ::std::mem::align_of::<list_stack_S>(),
        8usize,
        concat!("Alignment of ", stringify!(list_stack_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_stack_S>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_stack_S),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_stack_S>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_stack_S),
            "::",
            stringify!(prev)
        )
    );
}
pub type list_stack_T = list_stack_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dict_iterator_T {
    pub dit_todo: long_u,
    pub dit_hi: *mut hashitem_T,
}
#[test]
fn bindgen_test_layout_dict_iterator_T() {
    assert_eq!(
        ::std::mem::size_of::<dict_iterator_T>(),
        16usize,
        concat!("Size of: ", stringify!(dict_iterator_T))
    );
    assert_eq!(
        ::std::mem::align_of::<dict_iterator_T>(),
        8usize,
        concat!("Alignment of ", stringify!(dict_iterator_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dict_iterator_T>())).dit_todo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dict_iterator_T),
            "::",
            stringify!(dit_todo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dict_iterator_T>())).dit_hi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dict_iterator_T),
            "::",
            stringify!(dit_hi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qf_info_S {
    _unused: [u8; 0],
}
pub type qf_info_T = qf_info_S;
pub type timer_T = timer_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_S {
    pub tr_id: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timer_S() {
    assert_eq!(
        ::std::mem::size_of::<timer_S>(),
        8usize,
        concat!("Size of: ", stringify!(timer_S))
    );
    assert_eq!(
        ::std::mem::align_of::<timer_S>(),
        8usize,
        concat!("Alignment of ", stringify!(timer_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timer_S>())).tr_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timer_S),
            "::",
            stringify!(tr_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct synblock_T {
    pub dummy: ::std::os::raw::c_int,
    pub b_syn_chartab: [char_u; 32usize],
    pub b_syn_isk: *mut char_u,
}
#[test]
fn bindgen_test_layout_synblock_T() {
    assert_eq!(
        ::std::mem::size_of::<synblock_T>(),
        48usize,
        concat!("Size of: ", stringify!(synblock_T))
    );
    assert_eq!(
        ::std::mem::align_of::<synblock_T>(),
        8usize,
        concat!("Alignment of ", stringify!(synblock_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synblock_T>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synblock_T>())).b_syn_chartab as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(b_syn_chartab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<synblock_T>())).b_syn_isk as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(synblock_T),
            "::",
            stringify!(b_syn_isk)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_buffer {
    pub b_ml: memline_T,
    pub b_next: *mut buf_T,
    pub b_prev: *mut buf_T,
    pub b_nwindows: ::std::os::raw::c_int,
    pub b_flags: ::std::os::raw::c_int,
    pub b_locked: ::std::os::raw::c_int,
    pub b_ffname: *mut char_u,
    pub b_sfname: *mut char_u,
    pub b_fname: *mut char_u,
    pub b_fnum: ::std::os::raw::c_int,
    pub b_key: [char_u; 9usize],
    pub b_changed: ::std::os::raw::c_int,
    pub b_ct_di: dictitem16_T,
    pub b_last_changedtick: varnumber_T,
    pub b_saving: ::std::os::raw::c_int,
    pub b_mod_set: ::std::os::raw::c_int,
    pub b_mod_top: linenr_T,
    pub b_mod_bot: linenr_T,
    pub b_mod_xlines: ::std::os::raw::c_long,
    pub b_wininfo: *mut wininfo_T,
    pub b_mtime: ::std::os::raw::c_long,
    pub b_mtime_read: ::std::os::raw::c_long,
    pub b_orig_size: off_T,
    pub b_orig_mode: ::std::os::raw::c_int,
    pub b_last_used: time_T,
    pub b_namedm: [pos_T; 26usize],
    pub b_visual: visualinfo_T,
    pub b_visual_mode_eval: ::std::os::raw::c_int,
    pub b_last_cursor: pos_T,
    pub b_last_insert: pos_T,
    pub b_last_change: pos_T,
    pub b_changelist: [pos_T; 100usize],
    pub b_changelistlen: ::std::os::raw::c_int,
    pub b_new_change: ::std::os::raw::c_int,
    pub b_chartab: [char_u; 32usize],
    pub b_maphash: [*mut mapblock_T; 256usize],
    pub b_first_abbr: *mut mapblock_T,
    pub b_ucmds: garray_T,
    pub b_op_start: pos_T,
    pub b_op_start_orig: pos_T,
    pub b_op_end: pos_T,
    pub b_marks_read: ::std::os::raw::c_int,
    pub b_u_oldhead: *mut u_header_T,
    pub b_u_newhead: *mut u_header_T,
    pub b_u_curhead: *mut u_header_T,
    pub b_u_numhead: ::std::os::raw::c_int,
    pub b_u_synced: ::std::os::raw::c_int,
    pub b_u_seq_last: ::std::os::raw::c_long,
    pub b_u_save_nr_last: ::std::os::raw::c_long,
    pub b_u_seq_cur: ::std::os::raw::c_long,
    pub b_u_time_cur: time_T,
    pub b_u_save_nr_cur: ::std::os::raw::c_long,
    pub b_u_line_ptr: undoline_T,
    pub b_u_line_lnum: linenr_T,
    pub b_u_line_colnr: colnr_T,
    pub b_p_iminsert: ::std::os::raw::c_long,
    pub b_p_imsearch: ::std::os::raw::c_long,
    pub b_p_initialized: ::std::os::raw::c_int,
    pub b_p_script_ctx: [sctx_T; 61usize],
    pub b_p_ai: ::std::os::raw::c_int,
    pub b_p_ai_nopaste: ::std::os::raw::c_int,
    pub b_p_bkc: *mut char_u,
    pub b_bkc_flags: ::std::os::raw::c_uint,
    pub b_p_ci: ::std::os::raw::c_int,
    pub b_p_bin: ::std::os::raw::c_int,
    pub b_p_bomb: ::std::os::raw::c_int,
    pub b_p_bh: *mut char_u,
    pub b_p_bt: *mut char_u,
    pub b_has_qf_entry: ::std::os::raw::c_int,
    pub b_p_bl: ::std::os::raw::c_int,
    pub b_p_com: *mut char_u,
    pub b_p_cms: *mut char_u,
    pub b_p_tfu: *mut char_u,
    pub b_p_eol: ::std::os::raw::c_int,
    pub b_p_fixeol: ::std::os::raw::c_int,
    pub b_p_et: ::std::os::raw::c_int,
    pub b_p_et_nobin: ::std::os::raw::c_int,
    pub b_p_et_nopaste: ::std::os::raw::c_int,
    pub b_p_fenc: *mut char_u,
    pub b_p_ff: *mut char_u,
    pub b_p_ft: *mut char_u,
    pub b_p_fo: *mut char_u,
    pub b_p_flp: *mut char_u,
    pub b_p_inf: ::std::os::raw::c_int,
    pub b_p_isk: *mut char_u,
    pub b_p_def: *mut char_u,
    pub b_p_inc: *mut char_u,
    pub b_p_inex: *mut char_u,
    pub b_p_inex_flags: long_u,
    pub b_p_inde: *mut char_u,
    pub b_p_inde_flags: long_u,
    pub b_p_indk: *mut char_u,
    pub b_p_fp: *mut char_u,
    pub b_p_fex: *mut char_u,
    pub b_p_fex_flags: long_u,
    pub b_p_kp: *mut char_u,
    pub b_p_menc: *mut char_u,
    pub b_p_mps: *mut char_u,
    pub b_p_ml: ::std::os::raw::c_int,
    pub b_p_ml_nobin: ::std::os::raw::c_int,
    pub b_p_ma: ::std::os::raw::c_int,
    pub b_p_nf: *mut char_u,
    pub b_p_pi: ::std::os::raw::c_int,
    pub b_p_qe: *mut char_u,
    pub b_p_ro: ::std::os::raw::c_int,
    pub b_p_sw: ::std::os::raw::c_long,
    pub b_p_sn: ::std::os::raw::c_int,
    pub b_p_sts: ::std::os::raw::c_long,
    pub b_p_sts_nopaste: ::std::os::raw::c_long,
    pub b_p_sua: *mut char_u,
    pub b_p_swf: ::std::os::raw::c_int,
    pub b_p_ts: ::std::os::raw::c_long,
    pub b_p_tx: ::std::os::raw::c_int,
    pub b_p_tw: ::std::os::raw::c_long,
    pub b_p_tw_nobin: ::std::os::raw::c_long,
    pub b_p_tw_nopaste: ::std::os::raw::c_long,
    pub b_p_wm: ::std::os::raw::c_long,
    pub b_p_wm_nobin: ::std::os::raw::c_long,
    pub b_p_wm_nopaste: ::std::os::raw::c_long,
    pub b_p_gp: *mut char_u,
    pub b_p_mp: *mut char_u,
    pub b_p_efm: *mut char_u,
    pub b_p_ep: *mut char_u,
    pub b_p_path: *mut char_u,
    pub b_p_ar: ::std::os::raw::c_int,
    pub b_p_tags: *mut char_u,
    pub b_p_tc: *mut char_u,
    pub b_tc_flags: ::std::os::raw::c_uint,
    pub b_p_ul: ::std::os::raw::c_long,
    pub b_p_udf: ::std::os::raw::c_int,
    pub b_no_eol_lnum: linenr_T,
    pub b_start_eol: ::std::os::raw::c_int,
    pub b_start_ffc: ::std::os::raw::c_int,
    pub b_start_fenc: *mut char_u,
    pub b_bad_char: ::std::os::raw::c_int,
    pub b_start_bomb: ::std::os::raw::c_int,
    pub b_bufvar: dictitem_T,
    pub b_vars: *mut dict_T,
    pub b_listener: *mut listener_T,
    pub b_recorded_changes: *mut list_T,
    pub b_may_swap: ::std::os::raw::c_int,
    pub b_did_warn: ::std::os::raw::c_int,
    pub b_help: ::std::os::raw::c_int,
    pub b_shortname: ::std::os::raw::c_int,
    pub b_mapped_ctrl_c: ::std::os::raw::c_int,
    pub b_diff_failed: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_file_buffer() {
    assert_eq!(
        ::std::mem::size_of::<file_buffer>(),
        6816usize,
        concat!("Size of: ", stringify!(file_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<file_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(file_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_ml as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_next as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_prev as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_nwindows as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_nwindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_flags as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_locked as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_ffname as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ffname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_sfname as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_sfname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_fname as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_fnum as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_fnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_key as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_changed as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_ct_di as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ct_di)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_last_changedtick as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_changedtick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_saving as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_saving)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mod_set as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mod_top as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mod_bot as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_bot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mod_xlines as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mod_xlines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_wininfo as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_wininfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mtime as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mtime_read as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mtime_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_orig_size as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_orig_mode as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_orig_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_last_used as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_namedm as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_namedm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_visual as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_visual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_visual_mode_eval as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_visual_mode_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_last_cursor as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_last_insert as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_insert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_last_change as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_last_change)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_changelist as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_changelistlen as *const _ as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_changelistlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_new_change as *const _ as usize },
        2436usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_new_change)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_chartab as *const _ as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_chartab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_maphash as *const _ as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_maphash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_first_abbr as *const _ as usize },
        4520usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_first_abbr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_ucmds as *const _ as usize },
        4528usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_ucmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_op_start as *const _ as usize },
        4552usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_op_start_orig as *const _ as usize },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_start_orig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_op_end as *const _ as usize },
        4584usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_op_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_marks_read as *const _ as usize },
        4600usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_marks_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_oldhead as *const _ as usize },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_oldhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_newhead as *const _ as usize },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_newhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_curhead as *const _ as usize },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_curhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_numhead as *const _ as usize },
        4632usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_numhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_synced as *const _ as usize },
        4636usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_synced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_seq_last as *const _ as usize },
        4640usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_seq_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_save_nr_last as *const _ as usize },
        4648usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_save_nr_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_seq_cur as *const _ as usize },
        4656usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_seq_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_time_cur as *const _ as usize },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_time_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_save_nr_cur as *const _ as usize },
        4672usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_save_nr_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_line_ptr as *const _ as usize },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_line_lnum as *const _ as usize },
        4696usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_u_line_colnr as *const _ as usize },
        4704usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_u_line_colnr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_iminsert as *const _ as usize },
        4712usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_iminsert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_imsearch as *const _ as usize },
        4720usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_imsearch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_initialized as *const _ as usize },
        4728usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_script_ctx as *const _ as usize },
        4736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_script_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ai as *const _ as usize },
        6200usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ai)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ai_nopaste as *const _ as usize },
        6204usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ai_nopaste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_bkc as *const _ as usize },
        6208usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bkc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_bkc_flags as *const _ as usize },
        6216usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bkc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ci as *const _ as usize },
        6220usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_bin as *const _ as usize },
        6224usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_bomb as *const _ as usize },
        6228usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bomb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_bh as *const _ as usize },
        6232usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_bt as *const _ as usize },
        6240usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_has_qf_entry as *const _ as usize },
        6248usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_has_qf_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_bl as *const _ as usize },
        6252usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_bl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_com as *const _ as usize },
        6256usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_com)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_cms as *const _ as usize },
        6264usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_cms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tfu as *const _ as usize },
        6272usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tfu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_eol as *const _ as usize },
        6280usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_eol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_fixeol as *const _ as usize },
        6284usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fixeol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_et as *const _ as usize },
        6288usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_et_nobin as *const _ as usize },
        6292usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et_nobin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_et_nopaste as *const _ as usize },
        6296usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_et_nopaste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_fenc as *const _ as usize },
        6304usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fenc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ff as *const _ as usize },
        6312usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ft as *const _ as usize },
        6320usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_fo as *const _ as usize },
        6328usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_flp as *const _ as usize },
        6336usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_flp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_inf as *const _ as usize },
        6344usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_isk as *const _ as usize },
        6352usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_isk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_def as *const _ as usize },
        6360usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_inc as *const _ as usize },
        6368usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_inex as *const _ as usize },
        6376usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_inex_flags as *const _ as usize },
        6384usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inex_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_inde as *const _ as usize },
        6392usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inde)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_inde_flags as *const _ as usize },
        6400usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_inde_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_indk as *const _ as usize },
        6408usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_indk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_fp as *const _ as usize },
        6416usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_fex as *const _ as usize },
        6424usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_fex_flags as *const _ as usize },
        6432usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_fex_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_kp as *const _ as usize },
        6440usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_kp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_menc as *const _ as usize },
        6448usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_menc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_mps as *const _ as usize },
        6456usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_mps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ml as *const _ as usize },
        6464usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ml_nobin as *const _ as usize },
        6468usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ml_nobin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ma as *const _ as usize },
        6472usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_nf as *const _ as usize },
        6480usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_nf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_pi as *const _ as usize },
        6488usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_pi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_qe as *const _ as usize },
        6496usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_qe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ro as *const _ as usize },
        6504usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_sw as *const _ as usize },
        6512usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_sn as *const _ as usize },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_sts as *const _ as usize },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_sts_nopaste as *const _ as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sts_nopaste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_sua as *const _ as usize },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_sua)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_swf as *const _ as usize },
        6552usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_swf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ts as *const _ as usize },
        6560usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tx as *const _ as usize },
        6568usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tw as *const _ as usize },
        6576usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tw_nobin as *const _ as usize },
        6584usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw_nobin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tw_nopaste as *const _ as usize },
        6592usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tw_nopaste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_wm as *const _ as usize },
        6600usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_wm_nobin as *const _ as usize },
        6608usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm_nobin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_wm_nopaste as *const _ as usize },
        6616usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_wm_nopaste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_gp as *const _ as usize },
        6624usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_mp as *const _ as usize },
        6632usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_mp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_efm as *const _ as usize },
        6640usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_efm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ep as *const _ as usize },
        6648usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_path as *const _ as usize },
        6656usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ar as *const _ as usize },
        6664usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tags as *const _ as usize },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_tc as *const _ as usize },
        6680usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_tc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_tc_flags as *const _ as usize },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_tc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_ul as *const _ as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_ul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_p_udf as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_p_udf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_no_eol_lnum as *const _ as usize },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_no_eol_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_start_eol as *const _ as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_eol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_start_ffc as *const _ as usize },
        6724usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_ffc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_start_fenc as *const _ as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_fenc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_bad_char as *const _ as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bad_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_start_bomb as *const _ as usize },
        6740usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_start_bomb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_bufvar as *const _ as usize },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_bufvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_vars as *const _ as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_listener as *const _ as usize },
        6776usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_listener)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_recorded_changes as *const _ as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_recorded_changes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_may_swap as *const _ as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_may_swap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_did_warn as *const _ as usize },
        6796usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_did_warn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_help as *const _ as usize },
        6800usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_shortname as *const _ as usize },
        6804usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_shortname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_mapped_ctrl_c as *const _ as usize },
        6808usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_mapped_ctrl_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_buffer>())).b_diff_failed as *const _ as usize },
        6812usize,
        concat!(
            "Offset of field: ",
            stringify!(file_buffer),
            "::",
            stringify!(b_diff_failed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufferUpdate_T {
    pub buf: *mut buf_T,
    pub lnum: linenr_T,
    pub lnume: linenr_T,
    pub xtra: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_bufferUpdate_T() {
    assert_eq!(
        ::std::mem::size_of::<bufferUpdate_T>(),
        32usize,
        concat!("Size of: ", stringify!(bufferUpdate_T))
    );
    assert_eq!(
        ::std::mem::align_of::<bufferUpdate_T>(),
        8usize,
        concat!("Alignment of ", stringify!(bufferUpdate_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferUpdate_T>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferUpdate_T>())).lnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferUpdate_T>())).lnume as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(lnume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferUpdate_T>())).xtra as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferUpdate_T),
            "::",
            stringify!(xtra)
        )
    );
}
pub const writeFailureReason_T_FILE_CHANGED: writeFailureReason_T = 0;
pub type writeFailureReason_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct optionSet_T {
    pub fullname: *mut char_u,
    pub shortname: *mut char_u,
    pub type_: ::std::os::raw::c_int,
    pub numval: ::std::os::raw::c_long,
    pub stringval: *mut char_u,
    pub opt_flags: ::std::os::raw::c_int,
    pub hidden: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_optionSet_T() {
    assert_eq!(
        ::std::mem::size_of::<optionSet_T>(),
        48usize,
        concat!("Size of: ", stringify!(optionSet_T))
    );
    assert_eq!(
        ::std::mem::align_of::<optionSet_T>(),
        8usize,
        concat!("Alignment of ", stringify!(optionSet_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).fullname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(fullname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).shortname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(shortname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).numval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(numval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).stringval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(stringval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).opt_flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(opt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<optionSet_T>())).hidden as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(optionSet_T),
            "::",
            stringify!(hidden)
        )
    );
}
pub type BufferUpdateCallback =
    ::std::option::Option<unsafe extern "C" fn(bufferUpdate: bufferUpdate_T)>;
pub type FileWriteFailureCallback = ::std::option::Option<
    unsafe extern "C" fn(failureReason: writeFailureReason_T, buf: *mut buf_T),
>;
pub type MessageCallback = ::std::option::Option<
    unsafe extern "C" fn(title: *mut char_u, msg: *mut char_u, priority: msgPriority_T),
>;
pub type DirectoryChangedCallback = ::std::option::Option<unsafe extern "C" fn(path: *mut char_u)>;
pub type QuitCallback =
    ::std::option::Option<unsafe extern "C" fn(buf: *mut buf_T, isForced: ::std::os::raw::c_int)>;
pub type OptionSetCallback =
    ::std::option::Option<unsafe extern "C" fn(optionSet: *mut optionSet_T)>;
pub type OutputCallback = ::std::option::Option<
    unsafe extern "C" fn(cmd: *mut char_u, output: *mut char_u, isSilent: ::std::os::raw::c_int),
>;
pub type ToggleCommentsCallback = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut buf_T,
        startLine: linenr_T,
        endLine: linenr_T,
        outCount: *mut linenr_T,
        outLines: *mut *mut *mut char_u,
    ) -> ::std::os::raw::c_int,
>;
pub type diff_T = diffblock_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diffblock_S {
    pub df_next: *mut diff_T,
    pub df_lnum: [linenr_T; 8usize],
    pub df_count: [linenr_T; 8usize],
}
#[test]
fn bindgen_test_layout_diffblock_S() {
    assert_eq!(
        ::std::mem::size_of::<diffblock_S>(),
        136usize,
        concat!("Size of: ", stringify!(diffblock_S))
    );
    assert_eq!(
        ::std::mem::align_of::<diffblock_S>(),
        8usize,
        concat!("Alignment of ", stringify!(diffblock_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<diffblock_S>())).df_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<diffblock_S>())).df_lnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<diffblock_S>())).df_count as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(diffblock_S),
            "::",
            stringify!(df_count)
        )
    );
}
pub type tabpage_T = tabpage_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tabpage_S {
    pub tp_next: *mut tabpage_T,
    pub tp_topframe: *mut frame_T,
    pub tp_curwin: *mut win_T,
    pub tp_prevwin: *mut win_T,
    pub tp_firstwin: *mut win_T,
    pub tp_lastwin: *mut win_T,
    pub tp_old_Rows: ::std::os::raw::c_long,
    pub tp_old_Columns: ::std::os::raw::c_long,
    pub tp_ch_used: ::std::os::raw::c_long,
    pub tp_localdir: *mut char_u,
    pub tp_first_diff: *mut diff_T,
    pub tp_diffbuf: [*mut buf_T; 8usize],
    pub tp_diff_invalid: ::std::os::raw::c_int,
    pub tp_diff_update: ::std::os::raw::c_int,
    pub tp_snapshot: [*mut frame_T; 2usize],
    pub tp_winvar: dictitem_T,
    pub tp_vars: *mut dict_T,
}
#[test]
fn bindgen_test_layout_tabpage_S() {
    assert_eq!(
        ::std::mem::size_of::<tabpage_S>(),
        208usize,
        concat!("Size of: ", stringify!(tabpage_S))
    );
    assert_eq!(
        ::std::mem::align_of::<tabpage_S>(),
        8usize,
        concat!("Alignment of ", stringify!(tabpage_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_topframe as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_topframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_curwin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_curwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_prevwin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_prevwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_firstwin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_firstwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_lastwin as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_lastwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_old_Rows as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_old_Rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_old_Columns as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_old_Columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_ch_used as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_ch_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_localdir as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_localdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_first_diff as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_first_diff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_diffbuf as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diffbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_diff_invalid as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diff_invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_diff_update as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_diff_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_snapshot as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_winvar as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_winvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tabpage_S>())).tp_vars as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(tabpage_S),
            "::",
            stringify!(tp_vars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w_line {
    pub wl_lnum: linenr_T,
    pub wl_size: short_u,
    pub wl_valid: ::std::os::raw::c_char,
    pub wl_folded: ::std::os::raw::c_char,
    pub wl_lastlnum: linenr_T,
}
#[test]
fn bindgen_test_layout_w_line() {
    assert_eq!(
        ::std::mem::size_of::<w_line>(),
        24usize,
        concat!("Size of: ", stringify!(w_line))
    );
    assert_eq!(
        ::std::mem::align_of::<w_line>(),
        8usize,
        concat!("Alignment of ", stringify!(w_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<w_line>())).wl_lnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<w_line>())).wl_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<w_line>())).wl_valid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<w_line>())).wl_folded as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_folded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<w_line>())).wl_lastlnum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(w_line),
            "::",
            stringify!(wl_lastlnum)
        )
    );
}
pub type wline_T = w_line;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct frame_S {
    pub fr_layout: ::std::os::raw::c_char,
    pub fr_width: ::std::os::raw::c_int,
    pub fr_newwidth: ::std::os::raw::c_int,
    pub fr_height: ::std::os::raw::c_int,
    pub fr_newheight: ::std::os::raw::c_int,
    pub fr_parent: *mut frame_T,
    pub fr_next: *mut frame_T,
    pub fr_prev: *mut frame_T,
    pub fr_child: *mut frame_T,
    pub fr_win: *mut win_T,
}
#[test]
fn bindgen_test_layout_frame_S() {
    assert_eq!(
        ::std::mem::size_of::<frame_S>(),
        64usize,
        concat!("Size of: ", stringify!(frame_S))
    );
    assert_eq!(
        ::std::mem::align_of::<frame_S>(),
        8usize,
        concat!("Alignment of ", stringify!(frame_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_layout as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_newwidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_newwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_newheight as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_newheight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_parent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_child as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<frame_S>())).fr_win as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(frame_S),
            "::",
            stringify!(fr_win)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct match_T {
    pub rm: regmmatch_T,
    pub buf: *mut buf_T,
    pub lnum: linenr_T,
    pub attr: ::std::os::raw::c_int,
    pub attr_cur: ::std::os::raw::c_int,
    pub first_lnum: linenr_T,
    pub startcol: colnr_T,
    pub endcol: colnr_T,
    pub is_addpos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_match_T() {
    assert_eq!(
        ::std::mem::size_of::<match_T>(),
        384usize,
        concat!("Size of: ", stringify!(match_T))
    );
    assert_eq!(
        ::std::mem::align_of::<match_T>(),
        8usize,
        concat!("Alignment of ", stringify!(match_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).rm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(rm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).buf as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).lnum as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).attr as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).attr_cur as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(attr_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).first_lnum as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(first_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).startcol as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(startcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).endcol as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(endcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_T>())).is_addpos as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(match_T),
            "::",
            stringify!(is_addpos)
        )
    );
}
#[doc = " Struct used for returning search highlight match positions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchHighlight_T {
    pub start: pos_T,
    pub end: pos_T,
}
#[test]
fn bindgen_test_layout_searchHighlight_T() {
    assert_eq!(
        ::std::mem::size_of::<searchHighlight_T>(),
        32usize,
        concat!("Size of: ", stringify!(searchHighlight_T))
    );
    assert_eq!(
        ::std::mem::align_of::<searchHighlight_T>(),
        8usize,
        concat!("Alignment of ", stringify!(searchHighlight_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<searchHighlight_T>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(searchHighlight_T),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<searchHighlight_T>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(searchHighlight_T),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llpos_T {
    pub lnum: linenr_T,
    pub col: colnr_T,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_llpos_T() {
    assert_eq!(
        ::std::mem::size_of::<llpos_T>(),
        16usize,
        concat!("Size of: ", stringify!(llpos_T))
    );
    assert_eq!(
        ::std::mem::align_of::<llpos_T>(),
        8usize,
        concat!("Alignment of ", stringify!(llpos_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llpos_T>())).lnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llpos_T>())).col as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llpos_T>())).len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llpos_T),
            "::",
            stringify!(len)
        )
    );
}
pub type posmatch_T = posmatch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posmatch {
    pub pos: [llpos_T; 8usize],
    pub cur: ::std::os::raw::c_int,
    pub toplnum: linenr_T,
    pub botlnum: linenr_T,
}
#[test]
fn bindgen_test_layout_posmatch() {
    assert_eq!(
        ::std::mem::size_of::<posmatch>(),
        152usize,
        concat!("Size of: ", stringify!(posmatch))
    );
    assert_eq!(
        ::std::mem::align_of::<posmatch>(),
        8usize,
        concat!("Alignment of ", stringify!(posmatch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<posmatch>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<posmatch>())).cur as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<posmatch>())).toplnum as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(toplnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<posmatch>())).botlnum as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(posmatch),
            "::",
            stringify!(botlnum)
        )
    );
}
pub type matchitem_T = matchitem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct matchitem {
    pub next: *mut matchitem_T,
    pub id: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub pattern: *mut char_u,
    pub hlg_id: ::std::os::raw::c_int,
    pub match_: regmmatch_T,
    pub pos: posmatch_T,
    pub hl: match_T,
}
#[test]
fn bindgen_test_layout_matchitem() {
    assert_eq!(
        ::std::mem::size_of::<matchitem>(),
        904usize,
        concat!("Size of: ", stringify!(matchitem))
    );
    assert_eq!(
        ::std::mem::align_of::<matchitem>(),
        8usize,
        concat!("Alignment of ", stringify!(matchitem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).priority as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).pattern as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).hlg_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(hlg_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).match_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).pos as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matchitem>())).hl as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(matchitem),
            "::",
            stringify!(hl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pos_save_T {
    pub w_topline_save: ::std::os::raw::c_int,
    pub w_topline_corr: ::std::os::raw::c_int,
    pub w_cursor_save: pos_T,
    pub w_cursor_corr: pos_T,
}
#[test]
fn bindgen_test_layout_pos_save_T() {
    assert_eq!(
        ::std::mem::size_of::<pos_save_T>(),
        40usize,
        concat!("Size of: ", stringify!(pos_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pos_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pos_save_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_save_T>())).w_topline_save as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_topline_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_save_T>())).w_topline_corr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_topline_corr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_save_T>())).w_cursor_save as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_cursor_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pos_save_T>())).w_cursor_corr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pos_save_T),
            "::",
            stringify!(w_cursor_corr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct window_S {
    pub w_id: ::std::os::raw::c_int,
    pub w_buffer: *mut buf_T,
    pub w_prev: *mut win_T,
    pub w_next: *mut win_T,
    pub w_closing: ::std::os::raw::c_int,
    pub w_frame: *mut frame_T,
    pub w_cursor: pos_T,
    pub w_curswant: colnr_T,
    pub w_set_curswant: ::std::os::raw::c_int,
    pub w_old_visual_mode: ::std::os::raw::c_char,
    pub w_old_cursor_lnum: linenr_T,
    pub w_old_cursor_fcol: colnr_T,
    pub w_old_cursor_lcol: colnr_T,
    pub w_old_visual_lnum: linenr_T,
    pub w_old_visual_col: colnr_T,
    pub w_old_curswant: colnr_T,
    pub w_topline: linenr_T,
    pub w_topline_was_set: ::std::os::raw::c_char,
    pub w_topfill: ::std::os::raw::c_int,
    pub w_old_topfill: ::std::os::raw::c_int,
    pub w_botfill: ::std::os::raw::c_int,
    pub w_old_botfill: ::std::os::raw::c_int,
    pub w_leftcol: colnr_T,
    pub w_skipcol: colnr_T,
    pub w_winrow: ::std::os::raw::c_int,
    pub w_height: ::std::os::raw::c_int,
    pub w_status_height: ::std::os::raw::c_int,
    pub w_wincol: ::std::os::raw::c_int,
    pub w_width: ::std::os::raw::c_int,
    pub w_vsep_width: ::std::os::raw::c_int,
    pub w_save_cursor: pos_save_T,
    pub w_valid: ::std::os::raw::c_int,
    pub w_valid_cursor: pos_T,
    pub w_valid_leftcol: colnr_T,
    pub w_cline_height: ::std::os::raw::c_int,
    pub w_cline_folded: ::std::os::raw::c_int,
    pub w_cline_row: ::std::os::raw::c_int,
    pub w_virtcol: colnr_T,
    pub w_wrow: ::std::os::raw::c_int,
    pub w_wcol: ::std::os::raw::c_int,
    pub w_botline: linenr_T,
    pub w_empty_rows: ::std::os::raw::c_int,
    pub w_filler_rows: ::std::os::raw::c_int,
    pub w_lines_valid: ::std::os::raw::c_int,
    pub w_lines: *mut wline_T,
    pub w_folds: garray_T,
    pub w_fold_manual: ::std::os::raw::c_char,
    pub w_foldinvalid: ::std::os::raw::c_char,
    pub w_nrwidth: ::std::os::raw::c_int,
    pub w_redr_type: ::std::os::raw::c_int,
    pub w_upd_rows: ::std::os::raw::c_int,
    pub w_redraw_top: linenr_T,
    pub w_redraw_bot: linenr_T,
    pub w_redr_status: ::std::os::raw::c_int,
    pub w_alt_fnum: ::std::os::raw::c_int,
    pub w_alist: *mut alist_T,
    pub w_arg_idx: ::std::os::raw::c_int,
    pub w_arg_idx_invalid: ::std::os::raw::c_int,
    pub w_localdir: *mut char_u,
    pub w_onebuf_opt: winopt_T,
    pub w_allbuf_opt: winopt_T,
    pub w_p_fde_flags: long_u,
    pub w_p_fdt_flags: long_u,
    pub w_p_brimin: ::std::os::raw::c_int,
    pub w_p_brishift: ::std::os::raw::c_int,
    pub w_p_brisbr: ::std::os::raw::c_int,
    pub w_p_siso: ::std::os::raw::c_long,
    pub w_p_so: ::std::os::raw::c_long,
    pub w_scbind_pos: ::std::os::raw::c_long,
    pub w_winvar: dictitem_T,
    pub w_vars: *mut dict_T,
    pub w_pcmark: pos_T,
    pub w_prev_pcmark: pos_T,
    pub w_jumplist: [xfmark_T; 100usize],
    pub w_jumplistlen: ::std::os::raw::c_int,
    pub w_jumplistidx: ::std::os::raw::c_int,
    pub w_changelistidx: ::std::os::raw::c_int,
    pub w_match_head: *mut matchitem_T,
    pub w_next_match_id: ::std::os::raw::c_int,
    pub w_tagstack: [taggy_T; 20usize],
    pub w_tagstackidx: ::std::os::raw::c_int,
    pub w_tagstacklen: ::std::os::raw::c_int,
    pub w_fraction: ::std::os::raw::c_int,
    pub w_prev_fraction_row: ::std::os::raw::c_int,
    pub w_nrwidth_line_count: linenr_T,
    pub w_nuw_cached: ::std::os::raw::c_long,
    pub w_nrwidth_width: ::std::os::raw::c_int,
    pub w_llist: *mut qf_info_T,
    pub w_llist_ref: *mut qf_info_T,
}
#[test]
fn bindgen_test_layout_window_S() {
    assert_eq!(
        ::std::mem::size_of::<window_S>(),
        7336usize,
        concat!("Size of: ", stringify!(window_S))
    );
    assert_eq!(
        ::std::mem::align_of::<window_S>(),
        8usize,
        concat!("Alignment of ", stringify!(window_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_closing as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_closing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_frame as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_cursor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_curswant as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_curswant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_set_curswant as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_set_curswant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_visual_mode as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_cursor_lnum as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_cursor_fcol as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_fcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_cursor_lcol as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_cursor_lcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_visual_lnum as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_visual_col as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_visual_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_curswant as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_curswant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_topline as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_topline_was_set as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topline_was_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_topfill as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_topfill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_topfill as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_topfill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_botfill as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_botfill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_old_botfill as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_old_botfill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_leftcol as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_leftcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_skipcol as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_skipcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_winrow as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_winrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_height as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_status_height as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_status_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_wincol as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wincol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_width as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_vsep_width as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_vsep_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_save_cursor as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_save_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_valid as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_valid_cursor as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_valid_leftcol as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_valid_leftcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_cline_height as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_cline_folded as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_folded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_cline_row as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_cline_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_virtcol as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_virtcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_wrow as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wrow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_wcol as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_wcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_botline as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_botline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_empty_rows as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_empty_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_filler_rows as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_filler_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_lines_valid as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_lines_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_lines as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_folds as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_folds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_fold_manual as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_fold_manual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_foldinvalid as *const _ as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_foldinvalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_nrwidth as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_redr_type as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_upd_rows as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_upd_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_redraw_top as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redraw_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_redraw_bot as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redraw_bot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_redr_status as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_redr_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_alt_fnum as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_alt_fnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_alist as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_alist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_arg_idx as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_arg_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_arg_idx_invalid as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_arg_idx_invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_localdir as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_localdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_onebuf_opt as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_onebuf_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_allbuf_opt as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_allbuf_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_fde_flags as *const _ as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_fde_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_fdt_flags as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_fdt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_brimin as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brimin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_brishift as *const _ as usize },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brishift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_brisbr as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_brisbr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_siso as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_siso)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_p_so as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_p_so)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_scbind_pos as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_scbind_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_winvar as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_winvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_vars as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_pcmark as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_pcmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_prev_pcmark as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev_pcmark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_jumplist as *const _ as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_jumplistlen as *const _ as usize },
        6288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplistlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_jumplistidx as *const _ as usize },
        6292usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_jumplistidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_changelistidx as *const _ as usize },
        6296usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_changelistidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_match_head as *const _ as usize },
        6304usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_match_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_next_match_id as *const _ as usize },
        6312usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_next_match_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_tagstack as *const _ as usize },
        6320usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_tagstackidx as *const _ as usize },
        7280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstackidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_tagstacklen as *const _ as usize },
        7284usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_tagstacklen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_fraction as *const _ as usize },
        7288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_fraction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_prev_fraction_row as *const _ as usize },
        7292usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_prev_fraction_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_nrwidth_line_count as *const _ as usize },
        7296usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth_line_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_nuw_cached as *const _ as usize },
        7304usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nuw_cached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_nrwidth_width as *const _ as usize },
        7312usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_nrwidth_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_llist as *const _ as usize },
        7320usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_llist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_S>())).w_llist_ref as *const _ as usize },
        7328usize,
        concat!(
            "Offset of field: ",
            stringify!(window_S),
            "::",
            stringify!(w_llist_ref)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oparg_S {
    pub op_type: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub motion_type: ::std::os::raw::c_int,
    pub motion_force: ::std::os::raw::c_int,
    pub use_reg_one: ::std::os::raw::c_int,
    pub inclusive: ::std::os::raw::c_int,
    pub end_adjusted: ::std::os::raw::c_int,
    pub start: pos_T,
    pub end: pos_T,
    pub cursor_start: pos_T,
    pub line_count: ::std::os::raw::c_long,
    pub empty: ::std::os::raw::c_int,
    pub is_VIsual: ::std::os::raw::c_int,
    pub block_mode: ::std::os::raw::c_int,
    pub start_vcol: colnr_T,
    pub end_vcol: colnr_T,
    pub prev_opcount: ::std::os::raw::c_long,
    pub prev_count0: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_oparg_S() {
    assert_eq!(
        ::std::mem::size_of::<oparg_S>(),
        128usize,
        concat!("Size of: ", stringify!(oparg_S))
    );
    assert_eq!(
        ::std::mem::align_of::<oparg_S>(),
        8usize,
        concat!("Alignment of ", stringify!(oparg_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).op_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).regname as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).motion_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(motion_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).motion_force as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(motion_force)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).use_reg_one as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(use_reg_one)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).inclusive as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(inclusive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).end_adjusted as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end_adjusted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).cursor_start as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(cursor_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).line_count as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(line_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).empty as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(empty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).is_VIsual as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(is_VIsual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).block_mode as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(block_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).start_vcol as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(start_vcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).end_vcol as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(end_vcol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).prev_opcount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(prev_opcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oparg_S>())).prev_count0 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(oparg_S),
            "::",
            stringify!(prev_count0)
        )
    );
}
pub type oparg_T = oparg_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdarg_S {
    pub oap: *mut oparg_T,
    pub prechar: ::std::os::raw::c_int,
    pub cmdchar: ::std::os::raw::c_int,
    pub nchar: ::std::os::raw::c_int,
    pub ncharC1: ::std::os::raw::c_int,
    pub ncharC2: ::std::os::raw::c_int,
    pub extra_char: ::std::os::raw::c_int,
    pub opcount: ::std::os::raw::c_long,
    pub count0: ::std::os::raw::c_long,
    pub count1: ::std::os::raw::c_long,
    pub arg: ::std::os::raw::c_int,
    pub retval: ::std::os::raw::c_int,
    pub searchbuf: *mut char_u,
}
#[test]
fn bindgen_test_layout_cmdarg_S() {
    assert_eq!(
        ::std::mem::size_of::<cmdarg_S>(),
        72usize,
        concat!("Size of: ", stringify!(cmdarg_S))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdarg_S>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdarg_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).oap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(oap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).prechar as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(prechar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).cmdchar as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(cmdchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).nchar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(nchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).ncharC1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(ncharC1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).ncharC2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(ncharC2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).extra_char as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(extra_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).opcount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(opcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).count0 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(count0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).count1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(count1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).arg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).retval as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdarg_S>())).searchbuf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdarg_S),
            "::",
            stringify!(searchbuf)
        )
    );
}
pub type cmdarg_T = cmdarg_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pendingOp_S {
    pub op_type: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pendingOp_S() {
    assert_eq!(
        ::std::mem::size_of::<pendingOp_S>(),
        16usize,
        concat!("Size of: ", stringify!(pendingOp_S))
    );
    assert_eq!(
        ::std::mem::align_of::<pendingOp_S>(),
        8usize,
        concat!("Alignment of ", stringify!(pendingOp_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pendingOp_S>())).op_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pendingOp_S>())).regname as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pendingOp_S>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pendingOp_S),
            "::",
            stringify!(count)
        )
    );
}
pub type pendingOp_T = pendingOp_S;
pub type state_execute = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        key: ::std::os::raw::c_int,
    ) -> executionStatus_T,
>;
pub type state_cleanup =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
pub type state_pending_operator = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        pendingOp: *mut pendingOp_T,
    ) -> ::std::os::raw::c_int,
>;
pub type sname = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm_T {
    pub context: *mut ::std::os::raw::c_void,
    pub mode: ::std::os::raw::c_int,
    pub subMode: subMode_T,
    pub execute_fn: state_execute,
    pub cleanup_fn: state_cleanup,
    pub pending_operator_fn: state_pending_operator,
    pub prev: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sm_T() {
    assert_eq!(
        ::std::mem::size_of::<sm_T>(),
        48usize,
        concat!("Size of: ", stringify!(sm_T))
    );
    assert_eq!(
        ::std::mem::align_of::<sm_T>(),
        8usize,
        concat!("Alignment of ", stringify!(sm_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).subMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(subMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).execute_fn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(execute_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).cleanup_fn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(cleanup_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).pending_operator_fn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(pending_operator_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sm_T>())).prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sm_T),
            "::",
            stringify!(prev)
        )
    );
}
pub type vimmenu_T = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aco_save_T {
    pub save_curbuf: *mut buf_T,
    pub use_aucmd_win: ::std::os::raw::c_int,
    pub save_curwin: *mut win_T,
    pub new_curwin: *mut win_T,
    pub save_prevwin: *mut win_T,
    pub new_curbuf: bufref_T,
    pub globaldir: *mut char_u,
}
#[test]
fn bindgen_test_layout_aco_save_T() {
    assert_eq!(
        ::std::mem::size_of::<aco_save_T>(),
        64usize,
        concat!("Size of: ", stringify!(aco_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<aco_save_T>(),
        8usize,
        concat!("Alignment of ", stringify!(aco_save_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).save_curbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_curbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).use_aucmd_win as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(use_aucmd_win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).save_curwin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_curwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).new_curwin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(new_curwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).save_prevwin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(save_prevwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).new_curbuf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(new_curbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<aco_save_T>())).globaldir as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(aco_save_T),
            "::",
            stringify!(globaldir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option_table_T {
    pub name: *const ::std::os::raw::c_char,
    pub hasnum: ::std::os::raw::c_int,
    pub number: ::std::os::raw::c_long,
    pub string: *mut char_u,
    pub strlen: ::std::os::raw::c_int,
    pub present: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_option_table_T() {
    assert_eq!(
        ::std::mem::size_of::<option_table_T>(),
        40usize,
        concat!("Size of: ", stringify!(option_table_T))
    );
    assert_eq!(
        ::std::mem::align_of::<option_table_T>(),
        8usize,
        concat!("Alignment of ", stringify!(option_table_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option_table_T>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option_table_T>())).hasnum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(hasnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option_table_T>())).number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option_table_T>())).string as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option_table_T>())).strlen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(strlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option_table_T>())).present as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(option_table_T),
            "::",
            stringify!(present)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prt_text_attr_T {
    pub fg_color: long_u,
    pub bg_color: long_u,
    pub bold: ::std::os::raw::c_int,
    pub italic: ::std::os::raw::c_int,
    pub underline: ::std::os::raw::c_int,
    pub undercurl: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_prt_text_attr_T() {
    assert_eq!(
        ::std::mem::size_of::<prt_text_attr_T>(),
        32usize,
        concat!("Size of: ", stringify!(prt_text_attr_T))
    );
    assert_eq!(
        ::std::mem::align_of::<prt_text_attr_T>(),
        8usize,
        concat!("Alignment of ", stringify!(prt_text_attr_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_text_attr_T>())).fg_color as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_text_attr_T>())).bg_color as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_text_attr_T>())).bold as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(bold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_text_attr_T>())).italic as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(italic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_text_attr_T>())).underline as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(underline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_text_attr_T>())).undercurl as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_text_attr_T),
            "::",
            stringify!(undercurl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prt_settings_T {
    pub n_collated_copies: ::std::os::raw::c_int,
    pub n_uncollated_copies: ::std::os::raw::c_int,
    pub duplex: ::std::os::raw::c_int,
    pub chars_per_line: ::std::os::raw::c_int,
    pub lines_per_page: ::std::os::raw::c_int,
    pub has_color: ::std::os::raw::c_int,
    pub number: prt_text_attr_T,
    pub user_abort: ::std::os::raw::c_int,
    pub jobname: *mut char_u,
}
#[test]
fn bindgen_test_layout_prt_settings_T() {
    assert_eq!(
        ::std::mem::size_of::<prt_settings_T>(),
        72usize,
        concat!("Size of: ", stringify!(prt_settings_T))
    );
    assert_eq!(
        ::std::mem::align_of::<prt_settings_T>(),
        8usize,
        concat!("Alignment of ", stringify!(prt_settings_T))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<prt_settings_T>())).n_collated_copies as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(n_collated_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<prt_settings_T>())).n_uncollated_copies as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(n_uncollated_copies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).duplex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(duplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).chars_per_line as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(chars_per_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).lines_per_page as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(lines_per_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).has_color as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(has_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).number as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).user_abort as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(user_abort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prt_settings_T>())).jobname as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(prt_settings_T),
            "::",
            stringify!(jobname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pumitem_T {
    pub pum_text: *mut char_u,
    pub pum_kind: *mut char_u,
    pub pum_extra: *mut char_u,
    pub pum_info: *mut char_u,
}
#[test]
fn bindgen_test_layout_pumitem_T() {
    assert_eq!(
        ::std::mem::size_of::<pumitem_T>(),
        32usize,
        concat!("Size of: ", stringify!(pumitem_T))
    );
    assert_eq!(
        ::std::mem::align_of::<pumitem_T>(),
        8usize,
        concat!("Alignment of ", stringify!(pumitem_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pumitem_T>())).pum_text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pumitem_T>())).pum_kind as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pumitem_T>())).pum_extra as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pumitem_T>())).pum_info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pumitem_T),
            "::",
            stringify!(pum_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagname_T {
    pub tn_tags: *mut char_u,
    pub tn_np: *mut char_u,
    pub tn_did_filefind_init: ::std::os::raw::c_int,
    pub tn_hf_idx: ::std::os::raw::c_int,
    pub tn_search_ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tagname_T() {
    assert_eq!(
        ::std::mem::size_of::<tagname_T>(),
        32usize,
        concat!("Size of: ", stringify!(tagname_T))
    );
    assert_eq!(
        ::std::mem::align_of::<tagname_T>(),
        8usize,
        concat!("Alignment of ", stringify!(tagname_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagname_T>())).tn_tags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagname_T>())).tn_np as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_np)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagname_T>())).tn_did_filefind_init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_did_filefind_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagname_T>())).tn_hf_idx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_hf_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagname_T>())).tn_search_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagname_T),
            "::",
            stringify!(tn_search_ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct context_sha256_T {
    pub total: [UINT32_T; 2usize],
    pub state: [UINT32_T; 8usize],
    pub buffer: [char_u; 64usize],
}
#[test]
fn bindgen_test_layout_context_sha256_T() {
    assert_eq!(
        ::std::mem::size_of::<context_sha256_T>(),
        104usize,
        concat!("Size of: ", stringify!(context_sha256_T))
    );
    assert_eq!(
        ::std::mem::align_of::<context_sha256_T>(),
        4usize,
        concat!("Alignment of ", stringify!(context_sha256_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_sha256_T>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_sha256_T>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_sha256_T>())).buffer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(context_sha256_T),
            "::",
            stringify!(buffer)
        )
    );
}
pub const exptype_T_TYPE_UNKNOWN: exptype_T = 0;
pub const exptype_T_TYPE_EQUAL: exptype_T = 1;
pub const exptype_T_TYPE_NEQUAL: exptype_T = 2;
pub const exptype_T_TYPE_GREATER: exptype_T = 3;
pub const exptype_T_TYPE_GEQUAL: exptype_T = 4;
pub const exptype_T_TYPE_SMALLER: exptype_T = 5;
pub const exptype_T_TYPE_SEQUAL: exptype_T = 6;
pub const exptype_T_TYPE_MATCH: exptype_T = 7;
pub const exptype_T_TYPE_NOMATCH: exptype_T = 8;
pub type exptype_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct js_reader {
    pub js_buf: *mut char_u,
    pub js_end: *mut char_u,
    pub js_used: ::std::os::raw::c_int,
    pub js_fill:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut js_reader) -> ::std::os::raw::c_int>,
    pub js_cookie: *mut ::std::os::raw::c_void,
    pub js_cookie_arg: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_js_reader() {
    assert_eq!(
        ::std::mem::size_of::<js_reader>(),
        48usize,
        concat!("Size of: ", stringify!(js_reader))
    );
    assert_eq!(
        ::std::mem::align_of::<js_reader>(),
        8usize,
        concat!("Alignment of ", stringify!(js_reader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<js_reader>())).js_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<js_reader>())).js_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<js_reader>())).js_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<js_reader>())).js_fill as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<js_reader>())).js_cookie as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<js_reader>())).js_cookie_arg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(js_reader),
            "::",
            stringify!(js_cookie_arg)
        )
    );
}
pub type js_read_T = js_reader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mparm_T {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub fname: *mut char_u,
    pub evim_mode: ::std::os::raw::c_int,
    pub use_vimrc: *mut char_u,
    pub clean: ::std::os::raw::c_int,
    pub n_commands: ::std::os::raw::c_int,
    pub commands: [*mut char_u; 10usize],
    pub cmds_tofree: [char_u; 10usize],
    pub n_pre_commands: ::std::os::raw::c_int,
    pub pre_commands: [*mut char_u; 10usize],
    pub edit_type: ::std::os::raw::c_int,
    pub tagname: *mut char_u,
    pub use_ef: *mut char_u,
    pub want_full_screen: ::std::os::raw::c_int,
    pub not_a_term: ::std::os::raw::c_int,
    pub tty_fail: ::std::os::raw::c_int,
    pub term: *mut char_u,
    pub no_swap_file: ::std::os::raw::c_int,
    pub use_debug_break_level: ::std::os::raw::c_int,
    pub window_count: ::std::os::raw::c_int,
    pub window_layout: ::std::os::raw::c_int,
    pub literal: ::std::os::raw::c_int,
    pub diff_mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mparm_T() {
    assert_eq!(
        ::std::mem::size_of::<mparm_T>(),
        296usize,
        concat!("Size of: ", stringify!(mparm_T))
    );
    assert_eq!(
        ::std::mem::align_of::<mparm_T>(),
        8usize,
        concat!("Alignment of ", stringify!(mparm_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).fname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).evim_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(evim_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).use_vimrc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_vimrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).clean as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(clean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).n_commands as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(n_commands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).commands as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(commands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).cmds_tofree as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(cmds_tofree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).n_pre_commands as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(n_pre_commands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).pre_commands as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(pre_commands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).edit_type as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(edit_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).tagname as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(tagname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).use_ef as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_ef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).want_full_screen as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(want_full_screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).not_a_term as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(not_a_term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).tty_fail as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(tty_fail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).term as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).no_swap_file as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(no_swap_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).use_debug_break_level as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(use_debug_break_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).window_count as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(window_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).window_layout as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(window_layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).literal as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(literal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mparm_T>())).diff_mode as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(mparm_T),
            "::",
            stringify!(diff_mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lval_S {
    pub ll_name: *mut char_u,
    pub ll_exp_name: *mut char_u,
    pub ll_tv: *mut typval_T,
    pub ll_li: *mut listitem_T,
    pub ll_list: *mut list_T,
    pub ll_range: ::std::os::raw::c_int,
    pub ll_n1: ::std::os::raw::c_long,
    pub ll_n2: ::std::os::raw::c_long,
    pub ll_empty2: ::std::os::raw::c_int,
    pub ll_dict: *mut dict_T,
    pub ll_di: *mut dictitem_T,
    pub ll_newkey: *mut char_u,
    pub ll_blob: *mut blob_T,
}
#[test]
fn bindgen_test_layout_lval_S() {
    assert_eq!(
        ::std::mem::size_of::<lval_S>(),
        104usize,
        concat!("Size of: ", stringify!(lval_S))
    );
    assert_eq!(
        ::std::mem::align_of::<lval_S>(),
        8usize,
        concat!("Alignment of ", stringify!(lval_S))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_exp_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_exp_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_tv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_tv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_li as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_li)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_list as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_range as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_n1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_n1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_n2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_n2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_empty2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_empty2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_dict as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_di as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_di)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_newkey as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_newkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lval_S>())).ll_blob as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lval_S),
            "::",
            stringify!(ll_blob)
        )
    );
}
pub type lval_T = lval_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct save_state_T {
    pub save_msg_scroll: ::std::os::raw::c_int,
    pub save_restart_edit: ::std::os::raw::c_int,
    pub save_msg_didout: ::std::os::raw::c_int,
    pub save_State: ::std::os::raw::c_int,
    pub save_insertmode: ::std::os::raw::c_int,
    pub save_finish_op: ::std::os::raw::c_int,
    pub save_opcount: ::std::os::raw::c_int,
    pub save_reg_executing: ::std::os::raw::c_int,
    pub tabuf: tasave_T,
}
#[test]
fn bindgen_test_layout_save_state_T() {
    assert_eq!(
        ::std::mem::size_of::<save_state_T>(),
        160usize,
        concat!("Size of: ", stringify!(save_state_T))
    );
    assert_eq!(
        ::std::mem::align_of::<save_state_T>(),
        8usize,
        concat!("Alignment of ", stringify!(save_state_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_msg_scroll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_msg_scroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_restart_edit as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_restart_edit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_msg_didout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_msg_didout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_State as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_State)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_insertmode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_insertmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_finish_op as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_finish_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_opcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_opcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).save_reg_executing as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(save_reg_executing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<save_state_T>())).tabuf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(save_state_T),
            "::",
            stringify!(tabuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vimvars_save_T {
    pub vv_prevcount: varnumber_T,
    pub vv_count: varnumber_T,
    pub vv_count1: varnumber_T,
}
#[test]
fn bindgen_test_layout_vimvars_save_T() {
    assert_eq!(
        ::std::mem::size_of::<vimvars_save_T>(),
        12usize,
        concat!("Size of: ", stringify!(vimvars_save_T))
    );
    assert_eq!(
        ::std::mem::align_of::<vimvars_save_T>(),
        4usize,
        concat!("Alignment of ", stringify!(vimvars_save_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vimvars_save_T>())).vv_prevcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_prevcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vimvars_save_T>())).vv_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vimvars_save_T>())).vv_count1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vimvars_save_T),
            "::",
            stringify!(vv_count1)
        )
    );
}
pub const cdscope_T_CDSCOPE_GLOBAL: cdscope_T = 0;
pub const cdscope_T_CDSCOPE_TABPAGE: cdscope_T = 1;
pub const cdscope_T_CDSCOPE_WINDOW: cdscope_T = 2;
pub type cdscope_T = ::std::os::raw::c_uint;
pub const alloc_id_T_aid_none: alloc_id_T = 0;
pub const alloc_id_T_aid_qf_dirname_start: alloc_id_T = 1;
pub const alloc_id_T_aid_qf_dirname_now: alloc_id_T = 2;
pub const alloc_id_T_aid_qf_namebuf: alloc_id_T = 3;
pub const alloc_id_T_aid_qf_module: alloc_id_T = 4;
pub const alloc_id_T_aid_qf_errmsg: alloc_id_T = 5;
pub const alloc_id_T_aid_qf_pattern: alloc_id_T = 6;
pub const alloc_id_T_aid_tagstack_items: alloc_id_T = 7;
pub const alloc_id_T_aid_tagstack_from: alloc_id_T = 8;
pub const alloc_id_T_aid_tagstack_details: alloc_id_T = 9;
pub const alloc_id_T_aid_sign_getdefined: alloc_id_T = 10;
pub const alloc_id_T_aid_sign_getplaced: alloc_id_T = 11;
pub const alloc_id_T_aid_sign_define_by_name: alloc_id_T = 12;
pub const alloc_id_T_aid_sign_getlist: alloc_id_T = 13;
pub const alloc_id_T_aid_sign_getplaced_dict: alloc_id_T = 14;
pub const alloc_id_T_aid_sign_getplaced_list: alloc_id_T = 15;
pub const alloc_id_T_aid_insert_sign: alloc_id_T = 16;
pub const alloc_id_T_aid_sign_getinfo: alloc_id_T = 17;
pub const alloc_id_T_aid_last: alloc_id_T = 18;
pub type alloc_id_T = ::std::os::raw::c_uint;
pub type VimClipboard = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    _unused: [u8; 0],
}
pub type stat_T = stat;
pub const assert_type_T_ASSERT_EQUAL: assert_type_T = 0;
pub const assert_type_T_ASSERT_NOTEQUAL: assert_type_T = 1;
pub const assert_type_T_ASSERT_MATCH: assert_type_T = 2;
pub const assert_type_T_ASSERT_NOTMATCH: assert_type_T = 3;
pub const assert_type_T_ASSERT_OTHER: assert_type_T = 4;
pub type assert_type_T = ::std::os::raw::c_uint;
pub const paste_mode_T_PASTE_INSERT: paste_mode_T = 0;
pub const paste_mode_T_PASTE_CMDLINE: paste_mode_T = 1;
pub const paste_mode_T_PASTE_EX: paste_mode_T = 2;
pub const paste_mode_T_PASTE_ONE_CHAR: paste_mode_T = 3;
pub type paste_mode_T = ::std::os::raw::c_uint;
pub const flush_buffers_T_FLUSH_MINIMAL: flush_buffers_T = 0;
pub const flush_buffers_T_FLUSH_TYPEAHEAD: flush_buffers_T = 1;
pub const flush_buffers_T_FLUSH_INPUT: flush_buffers_T = 2;
pub type flush_buffers_T = ::std::os::raw::c_uint;
pub const cmd_addr_T_ADDR_LINES: cmd_addr_T = 0;
pub const cmd_addr_T_ADDR_WINDOWS: cmd_addr_T = 1;
pub const cmd_addr_T_ADDR_ARGUMENTS: cmd_addr_T = 2;
pub const cmd_addr_T_ADDR_LOADED_BUFFERS: cmd_addr_T = 3;
pub const cmd_addr_T_ADDR_BUFFERS: cmd_addr_T = 4;
pub const cmd_addr_T_ADDR_TABS: cmd_addr_T = 5;
pub const cmd_addr_T_ADDR_TABS_RELATIVE: cmd_addr_T = 6;
pub const cmd_addr_T_ADDR_QUICKFIX_VALID: cmd_addr_T = 7;
pub const cmd_addr_T_ADDR_QUICKFIX: cmd_addr_T = 8;
pub const cmd_addr_T_ADDR_UNSIGNED: cmd_addr_T = 9;
pub const cmd_addr_T_ADDR_OTHER: cmd_addr_T = 10;
pub const cmd_addr_T_ADDR_NONE: cmd_addr_T = 11;
pub type cmd_addr_T = ::std::os::raw::c_uint;
pub type exarg_T = exarg;
pub const CMD_index_CMD_append: CMD_index = 0;
pub const CMD_index_CMD_abbreviate: CMD_index = 1;
pub const CMD_index_CMD_abclear: CMD_index = 2;
pub const CMD_index_CMD_aboveleft: CMD_index = 3;
pub const CMD_index_CMD_all: CMD_index = 4;
pub const CMD_index_CMD_amenu: CMD_index = 5;
pub const CMD_index_CMD_anoremenu: CMD_index = 6;
pub const CMD_index_CMD_args: CMD_index = 7;
pub const CMD_index_CMD_argadd: CMD_index = 8;
pub const CMD_index_CMD_argdelete: CMD_index = 9;
pub const CMD_index_CMD_argdo: CMD_index = 10;
pub const CMD_index_CMD_argedit: CMD_index = 11;
pub const CMD_index_CMD_argglobal: CMD_index = 12;
pub const CMD_index_CMD_arglocal: CMD_index = 13;
pub const CMD_index_CMD_argument: CMD_index = 14;
pub const CMD_index_CMD_ascii: CMD_index = 15;
pub const CMD_index_CMD_autocmd: CMD_index = 16;
pub const CMD_index_CMD_augroup: CMD_index = 17;
pub const CMD_index_CMD_aunmenu: CMD_index = 18;
pub const CMD_index_CMD_buffer: CMD_index = 19;
pub const CMD_index_CMD_bNext: CMD_index = 20;
pub const CMD_index_CMD_ball: CMD_index = 21;
pub const CMD_index_CMD_badd: CMD_index = 22;
pub const CMD_index_CMD_bdelete: CMD_index = 23;
pub const CMD_index_CMD_behave: CMD_index = 24;
pub const CMD_index_CMD_belowright: CMD_index = 25;
pub const CMD_index_CMD_bfirst: CMD_index = 26;
pub const CMD_index_CMD_blast: CMD_index = 27;
pub const CMD_index_CMD_bmodified: CMD_index = 28;
pub const CMD_index_CMD_bnext: CMD_index = 29;
pub const CMD_index_CMD_botright: CMD_index = 30;
pub const CMD_index_CMD_bprevious: CMD_index = 31;
pub const CMD_index_CMD_brewind: CMD_index = 32;
pub const CMD_index_CMD_break: CMD_index = 33;
pub const CMD_index_CMD_breakadd: CMD_index = 34;
pub const CMD_index_CMD_breakdel: CMD_index = 35;
pub const CMD_index_CMD_breaklist: CMD_index = 36;
pub const CMD_index_CMD_browse: CMD_index = 37;
pub const CMD_index_CMD_buffers: CMD_index = 38;
pub const CMD_index_CMD_bufdo: CMD_index = 39;
pub const CMD_index_CMD_bunload: CMD_index = 40;
pub const CMD_index_CMD_bwipeout: CMD_index = 41;
pub const CMD_index_CMD_change: CMD_index = 42;
pub const CMD_index_CMD_cNext: CMD_index = 43;
pub const CMD_index_CMD_cNfile: CMD_index = 44;
pub const CMD_index_CMD_cabbrev: CMD_index = 45;
pub const CMD_index_CMD_cabclear: CMD_index = 46;
pub const CMD_index_CMD_cabove: CMD_index = 47;
pub const CMD_index_CMD_caddbuffer: CMD_index = 48;
pub const CMD_index_CMD_caddexpr: CMD_index = 49;
pub const CMD_index_CMD_caddfile: CMD_index = 50;
pub const CMD_index_CMD_cafter: CMD_index = 51;
pub const CMD_index_CMD_call: CMD_index = 52;
pub const CMD_index_CMD_catch: CMD_index = 53;
pub const CMD_index_CMD_cbuffer: CMD_index = 54;
pub const CMD_index_CMD_cbefore: CMD_index = 55;
pub const CMD_index_CMD_cbelow: CMD_index = 56;
pub const CMD_index_CMD_cbottom: CMD_index = 57;
pub const CMD_index_CMD_cc: CMD_index = 58;
pub const CMD_index_CMD_cclose: CMD_index = 59;
pub const CMD_index_CMD_cd: CMD_index = 60;
pub const CMD_index_CMD_cdo: CMD_index = 61;
pub const CMD_index_CMD_center: CMD_index = 62;
pub const CMD_index_CMD_cexpr: CMD_index = 63;
pub const CMD_index_CMD_cfile: CMD_index = 64;
pub const CMD_index_CMD_cfdo: CMD_index = 65;
pub const CMD_index_CMD_cfirst: CMD_index = 66;
pub const CMD_index_CMD_cgetfile: CMD_index = 67;
pub const CMD_index_CMD_cgetbuffer: CMD_index = 68;
pub const CMD_index_CMD_cgetexpr: CMD_index = 69;
pub const CMD_index_CMD_chdir: CMD_index = 70;
pub const CMD_index_CMD_changes: CMD_index = 71;
pub const CMD_index_CMD_checkpath: CMD_index = 72;
pub const CMD_index_CMD_checktime: CMD_index = 73;
pub const CMD_index_CMD_chistory: CMD_index = 74;
pub const CMD_index_CMD_clist: CMD_index = 75;
pub const CMD_index_CMD_clast: CMD_index = 76;
pub const CMD_index_CMD_close: CMD_index = 77;
pub const CMD_index_CMD_clearjumps: CMD_index = 78;
pub const CMD_index_CMD_cmap: CMD_index = 79;
pub const CMD_index_CMD_cmapclear: CMD_index = 80;
pub const CMD_index_CMD_cmenu: CMD_index = 81;
pub const CMD_index_CMD_cnext: CMD_index = 82;
pub const CMD_index_CMD_cnewer: CMD_index = 83;
pub const CMD_index_CMD_cnfile: CMD_index = 84;
pub const CMD_index_CMD_cnoremap: CMD_index = 85;
pub const CMD_index_CMD_cnoreabbrev: CMD_index = 86;
pub const CMD_index_CMD_cnoremenu: CMD_index = 87;
pub const CMD_index_CMD_copy: CMD_index = 88;
pub const CMD_index_CMD_colder: CMD_index = 89;
pub const CMD_index_CMD_colorscheme: CMD_index = 90;
pub const CMD_index_CMD_command: CMD_index = 91;
pub const CMD_index_CMD_comclear: CMD_index = 92;
pub const CMD_index_CMD_compiler: CMD_index = 93;
pub const CMD_index_CMD_continue: CMD_index = 94;
pub const CMD_index_CMD_confirm: CMD_index = 95;
pub const CMD_index_CMD_copen: CMD_index = 96;
pub const CMD_index_CMD_cprevious: CMD_index = 97;
pub const CMD_index_CMD_cpfile: CMD_index = 98;
pub const CMD_index_CMD_cquit: CMD_index = 99;
pub const CMD_index_CMD_crewind: CMD_index = 100;
pub const CMD_index_CMD_cscope: CMD_index = 101;
pub const CMD_index_CMD_cstag: CMD_index = 102;
pub const CMD_index_CMD_cunmap: CMD_index = 103;
pub const CMD_index_CMD_cunabbrev: CMD_index = 104;
pub const CMD_index_CMD_cunmenu: CMD_index = 105;
pub const CMD_index_CMD_cwindow: CMD_index = 106;
pub const CMD_index_CMD_delete: CMD_index = 107;
pub const CMD_index_CMD_delmarks: CMD_index = 108;
pub const CMD_index_CMD_debug: CMD_index = 109;
pub const CMD_index_CMD_debuggreedy: CMD_index = 110;
pub const CMD_index_CMD_delcommand: CMD_index = 111;
pub const CMD_index_CMD_delfunction: CMD_index = 112;
pub const CMD_index_CMD_display: CMD_index = 113;
pub const CMD_index_CMD_diffupdate: CMD_index = 114;
pub const CMD_index_CMD_diffget: CMD_index = 115;
pub const CMD_index_CMD_diffoff: CMD_index = 116;
pub const CMD_index_CMD_diffpatch: CMD_index = 117;
pub const CMD_index_CMD_diffput: CMD_index = 118;
pub const CMD_index_CMD_diffsplit: CMD_index = 119;
pub const CMD_index_CMD_diffthis: CMD_index = 120;
pub const CMD_index_CMD_digraphs: CMD_index = 121;
pub const CMD_index_CMD_djump: CMD_index = 122;
pub const CMD_index_CMD_dlist: CMD_index = 123;
pub const CMD_index_CMD_doautocmd: CMD_index = 124;
pub const CMD_index_CMD_doautoall: CMD_index = 125;
pub const CMD_index_CMD_drop: CMD_index = 126;
pub const CMD_index_CMD_dsearch: CMD_index = 127;
pub const CMD_index_CMD_dsplit: CMD_index = 128;
pub const CMD_index_CMD_edit: CMD_index = 129;
pub const CMD_index_CMD_earlier: CMD_index = 130;
pub const CMD_index_CMD_echo: CMD_index = 131;
pub const CMD_index_CMD_echoerr: CMD_index = 132;
pub const CMD_index_CMD_echohl: CMD_index = 133;
pub const CMD_index_CMD_echomsg: CMD_index = 134;
pub const CMD_index_CMD_echon: CMD_index = 135;
pub const CMD_index_CMD_else: CMD_index = 136;
pub const CMD_index_CMD_elseif: CMD_index = 137;
pub const CMD_index_CMD_emenu: CMD_index = 138;
pub const CMD_index_CMD_endif: CMD_index = 139;
pub const CMD_index_CMD_endfunction: CMD_index = 140;
pub const CMD_index_CMD_endfor: CMD_index = 141;
pub const CMD_index_CMD_endtry: CMD_index = 142;
pub const CMD_index_CMD_endwhile: CMD_index = 143;
pub const CMD_index_CMD_enew: CMD_index = 144;
pub const CMD_index_CMD_ex: CMD_index = 145;
pub const CMD_index_CMD_execute: CMD_index = 146;
pub const CMD_index_CMD_exit: CMD_index = 147;
pub const CMD_index_CMD_exusage: CMD_index = 148;
pub const CMD_index_CMD_file: CMD_index = 149;
pub const CMD_index_CMD_files: CMD_index = 150;
pub const CMD_index_CMD_filetype: CMD_index = 151;
pub const CMD_index_CMD_filter: CMD_index = 152;
pub const CMD_index_CMD_find: CMD_index = 153;
pub const CMD_index_CMD_finally: CMD_index = 154;
pub const CMD_index_CMD_finish: CMD_index = 155;
pub const CMD_index_CMD_first: CMD_index = 156;
pub const CMD_index_CMD_fixdel: CMD_index = 157;
pub const CMD_index_CMD_fold: CMD_index = 158;
pub const CMD_index_CMD_foldclose: CMD_index = 159;
pub const CMD_index_CMD_folddoopen: CMD_index = 160;
pub const CMD_index_CMD_folddoclosed: CMD_index = 161;
pub const CMD_index_CMD_foldopen: CMD_index = 162;
pub const CMD_index_CMD_for: CMD_index = 163;
pub const CMD_index_CMD_function: CMD_index = 164;
pub const CMD_index_CMD_global: CMD_index = 165;
pub const CMD_index_CMD_goto: CMD_index = 166;
pub const CMD_index_CMD_grep: CMD_index = 167;
pub const CMD_index_CMD_grepadd: CMD_index = 168;
pub const CMD_index_CMD_gui: CMD_index = 169;
pub const CMD_index_CMD_gvim: CMD_index = 170;
pub const CMD_index_CMD_help: CMD_index = 171;
pub const CMD_index_CMD_helpclose: CMD_index = 172;
pub const CMD_index_CMD_helpfind: CMD_index = 173;
pub const CMD_index_CMD_helpgrep: CMD_index = 174;
pub const CMD_index_CMD_helptags: CMD_index = 175;
pub const CMD_index_CMD_highlight: CMD_index = 176;
pub const CMD_index_CMD_hide: CMD_index = 177;
pub const CMD_index_CMD_history: CMD_index = 178;
pub const CMD_index_CMD_insert: CMD_index = 179;
pub const CMD_index_CMD_iabbrev: CMD_index = 180;
pub const CMD_index_CMD_iabclear: CMD_index = 181;
pub const CMD_index_CMD_if: CMD_index = 182;
pub const CMD_index_CMD_ijump: CMD_index = 183;
pub const CMD_index_CMD_ilist: CMD_index = 184;
pub const CMD_index_CMD_imap: CMD_index = 185;
pub const CMD_index_CMD_imapclear: CMD_index = 186;
pub const CMD_index_CMD_imenu: CMD_index = 187;
pub const CMD_index_CMD_inoremap: CMD_index = 188;
pub const CMD_index_CMD_inoreabbrev: CMD_index = 189;
pub const CMD_index_CMD_inoremenu: CMD_index = 190;
pub const CMD_index_CMD_intro: CMD_index = 191;
pub const CMD_index_CMD_isearch: CMD_index = 192;
pub const CMD_index_CMD_isplit: CMD_index = 193;
pub const CMD_index_CMD_iunmap: CMD_index = 194;
pub const CMD_index_CMD_iunabbrev: CMD_index = 195;
pub const CMD_index_CMD_iunmenu: CMD_index = 196;
pub const CMD_index_CMD_join: CMD_index = 197;
pub const CMD_index_CMD_jumps: CMD_index = 198;
pub const CMD_index_CMD_k: CMD_index = 199;
pub const CMD_index_CMD_keepmarks: CMD_index = 200;
pub const CMD_index_CMD_keepjumps: CMD_index = 201;
pub const CMD_index_CMD_keeppatterns: CMD_index = 202;
pub const CMD_index_CMD_keepalt: CMD_index = 203;
pub const CMD_index_CMD_list: CMD_index = 204;
pub const CMD_index_CMD_lNext: CMD_index = 205;
pub const CMD_index_CMD_lNfile: CMD_index = 206;
pub const CMD_index_CMD_last: CMD_index = 207;
pub const CMD_index_CMD_labove: CMD_index = 208;
pub const CMD_index_CMD_language: CMD_index = 209;
pub const CMD_index_CMD_laddexpr: CMD_index = 210;
pub const CMD_index_CMD_laddbuffer: CMD_index = 211;
pub const CMD_index_CMD_laddfile: CMD_index = 212;
pub const CMD_index_CMD_lafter: CMD_index = 213;
pub const CMD_index_CMD_later: CMD_index = 214;
pub const CMD_index_CMD_lbuffer: CMD_index = 215;
pub const CMD_index_CMD_lbefore: CMD_index = 216;
pub const CMD_index_CMD_lbelow: CMD_index = 217;
pub const CMD_index_CMD_lbottom: CMD_index = 218;
pub const CMD_index_CMD_lcd: CMD_index = 219;
pub const CMD_index_CMD_lchdir: CMD_index = 220;
pub const CMD_index_CMD_lclose: CMD_index = 221;
pub const CMD_index_CMD_lcscope: CMD_index = 222;
pub const CMD_index_CMD_ldo: CMD_index = 223;
pub const CMD_index_CMD_left: CMD_index = 224;
pub const CMD_index_CMD_leftabove: CMD_index = 225;
pub const CMD_index_CMD_let: CMD_index = 226;
pub const CMD_index_CMD_lexpr: CMD_index = 227;
pub const CMD_index_CMD_lfile: CMD_index = 228;
pub const CMD_index_CMD_lfdo: CMD_index = 229;
pub const CMD_index_CMD_lfirst: CMD_index = 230;
pub const CMD_index_CMD_lgetfile: CMD_index = 231;
pub const CMD_index_CMD_lgetbuffer: CMD_index = 232;
pub const CMD_index_CMD_lgetexpr: CMD_index = 233;
pub const CMD_index_CMD_lgrep: CMD_index = 234;
pub const CMD_index_CMD_lgrepadd: CMD_index = 235;
pub const CMD_index_CMD_lhelpgrep: CMD_index = 236;
pub const CMD_index_CMD_lhistory: CMD_index = 237;
pub const CMD_index_CMD_ll: CMD_index = 238;
pub const CMD_index_CMD_llast: CMD_index = 239;
pub const CMD_index_CMD_llist: CMD_index = 240;
pub const CMD_index_CMD_lmap: CMD_index = 241;
pub const CMD_index_CMD_lmapclear: CMD_index = 242;
pub const CMD_index_CMD_lmake: CMD_index = 243;
pub const CMD_index_CMD_lnoremap: CMD_index = 244;
pub const CMD_index_CMD_lnext: CMD_index = 245;
pub const CMD_index_CMD_lnewer: CMD_index = 246;
pub const CMD_index_CMD_lnfile: CMD_index = 247;
pub const CMD_index_CMD_loadview: CMD_index = 248;
pub const CMD_index_CMD_loadkeymap: CMD_index = 249;
pub const CMD_index_CMD_lockmarks: CMD_index = 250;
pub const CMD_index_CMD_lockvar: CMD_index = 251;
pub const CMD_index_CMD_lolder: CMD_index = 252;
pub const CMD_index_CMD_lopen: CMD_index = 253;
pub const CMD_index_CMD_lprevious: CMD_index = 254;
pub const CMD_index_CMD_lpfile: CMD_index = 255;
pub const CMD_index_CMD_lrewind: CMD_index = 256;
pub const CMD_index_CMD_ltag: CMD_index = 257;
pub const CMD_index_CMD_lunmap: CMD_index = 258;
pub const CMD_index_CMD_lua: CMD_index = 259;
pub const CMD_index_CMD_luado: CMD_index = 260;
pub const CMD_index_CMD_luafile: CMD_index = 261;
pub const CMD_index_CMD_lvimgrep: CMD_index = 262;
pub const CMD_index_CMD_lvimgrepadd: CMD_index = 263;
pub const CMD_index_CMD_lwindow: CMD_index = 264;
pub const CMD_index_CMD_ls: CMD_index = 265;
pub const CMD_index_CMD_move: CMD_index = 266;
pub const CMD_index_CMD_mark: CMD_index = 267;
pub const CMD_index_CMD_make: CMD_index = 268;
pub const CMD_index_CMD_map: CMD_index = 269;
pub const CMD_index_CMD_mapclear: CMD_index = 270;
pub const CMD_index_CMD_marks: CMD_index = 271;
pub const CMD_index_CMD_match: CMD_index = 272;
pub const CMD_index_CMD_menu: CMD_index = 273;
pub const CMD_index_CMD_menutranslate: CMD_index = 274;
pub const CMD_index_CMD_messages: CMD_index = 275;
pub const CMD_index_CMD_mkexrc: CMD_index = 276;
pub const CMD_index_CMD_mksession: CMD_index = 277;
pub const CMD_index_CMD_mkspell: CMD_index = 278;
pub const CMD_index_CMD_mkvimrc: CMD_index = 279;
pub const CMD_index_CMD_mkview: CMD_index = 280;
pub const CMD_index_CMD_mode: CMD_index = 281;
pub const CMD_index_CMD_mzscheme: CMD_index = 282;
pub const CMD_index_CMD_mzfile: CMD_index = 283;
pub const CMD_index_CMD_next: CMD_index = 284;
pub const CMD_index_CMD_nbkey: CMD_index = 285;
pub const CMD_index_CMD_nbclose: CMD_index = 286;
pub const CMD_index_CMD_nbstart: CMD_index = 287;
pub const CMD_index_CMD_new: CMD_index = 288;
pub const CMD_index_CMD_nmap: CMD_index = 289;
pub const CMD_index_CMD_nmapclear: CMD_index = 290;
pub const CMD_index_CMD_nmenu: CMD_index = 291;
pub const CMD_index_CMD_nnoremap: CMD_index = 292;
pub const CMD_index_CMD_nnoremenu: CMD_index = 293;
pub const CMD_index_CMD_noremap: CMD_index = 294;
pub const CMD_index_CMD_noautocmd: CMD_index = 295;
pub const CMD_index_CMD_nohlsearch: CMD_index = 296;
pub const CMD_index_CMD_noreabbrev: CMD_index = 297;
pub const CMD_index_CMD_noremenu: CMD_index = 298;
pub const CMD_index_CMD_noswapfile: CMD_index = 299;
pub const CMD_index_CMD_normal: CMD_index = 300;
pub const CMD_index_CMD_number: CMD_index = 301;
pub const CMD_index_CMD_nunmap: CMD_index = 302;
pub const CMD_index_CMD_nunmenu: CMD_index = 303;
pub const CMD_index_CMD_open: CMD_index = 304;
pub const CMD_index_CMD_oldfiles: CMD_index = 305;
pub const CMD_index_CMD_omap: CMD_index = 306;
pub const CMD_index_CMD_omapclear: CMD_index = 307;
pub const CMD_index_CMD_omenu: CMD_index = 308;
pub const CMD_index_CMD_only: CMD_index = 309;
pub const CMD_index_CMD_onoremap: CMD_index = 310;
pub const CMD_index_CMD_onoremenu: CMD_index = 311;
pub const CMD_index_CMD_options: CMD_index = 312;
pub const CMD_index_CMD_ounmap: CMD_index = 313;
pub const CMD_index_CMD_ounmenu: CMD_index = 314;
pub const CMD_index_CMD_ownsyntax: CMD_index = 315;
pub const CMD_index_CMD_print: CMD_index = 316;
pub const CMD_index_CMD_packadd: CMD_index = 317;
pub const CMD_index_CMD_packloadall: CMD_index = 318;
pub const CMD_index_CMD_pclose: CMD_index = 319;
pub const CMD_index_CMD_perl: CMD_index = 320;
pub const CMD_index_CMD_perldo: CMD_index = 321;
pub const CMD_index_CMD_pedit: CMD_index = 322;
pub const CMD_index_CMD_pop: CMD_index = 323;
pub const CMD_index_CMD_popup: CMD_index = 324;
pub const CMD_index_CMD_popupclear: CMD_index = 325;
pub const CMD_index_CMD_ppop: CMD_index = 326;
pub const CMD_index_CMD_preserve: CMD_index = 327;
pub const CMD_index_CMD_previous: CMD_index = 328;
pub const CMD_index_CMD_promptfind: CMD_index = 329;
pub const CMD_index_CMD_promptrepl: CMD_index = 330;
pub const CMD_index_CMD_profile: CMD_index = 331;
pub const CMD_index_CMD_profdel: CMD_index = 332;
pub const CMD_index_CMD_psearch: CMD_index = 333;
pub const CMD_index_CMD_ptag: CMD_index = 334;
pub const CMD_index_CMD_ptNext: CMD_index = 335;
pub const CMD_index_CMD_ptfirst: CMD_index = 336;
pub const CMD_index_CMD_ptjump: CMD_index = 337;
pub const CMD_index_CMD_ptlast: CMD_index = 338;
pub const CMD_index_CMD_ptnext: CMD_index = 339;
pub const CMD_index_CMD_ptprevious: CMD_index = 340;
pub const CMD_index_CMD_ptrewind: CMD_index = 341;
pub const CMD_index_CMD_ptselect: CMD_index = 342;
pub const CMD_index_CMD_put: CMD_index = 343;
pub const CMD_index_CMD_pwd: CMD_index = 344;
pub const CMD_index_CMD_python: CMD_index = 345;
pub const CMD_index_CMD_pydo: CMD_index = 346;
pub const CMD_index_CMD_pyfile: CMD_index = 347;
pub const CMD_index_CMD_py3: CMD_index = 348;
pub const CMD_index_CMD_py3do: CMD_index = 349;
pub const CMD_index_CMD_python3: CMD_index = 350;
pub const CMD_index_CMD_py3file: CMD_index = 351;
pub const CMD_index_CMD_pyx: CMD_index = 352;
pub const CMD_index_CMD_pyxdo: CMD_index = 353;
pub const CMD_index_CMD_pythonx: CMD_index = 354;
pub const CMD_index_CMD_pyxfile: CMD_index = 355;
pub const CMD_index_CMD_quit: CMD_index = 356;
pub const CMD_index_CMD_quitall: CMD_index = 357;
pub const CMD_index_CMD_qall: CMD_index = 358;
pub const CMD_index_CMD_read: CMD_index = 359;
pub const CMD_index_CMD_recover: CMD_index = 360;
pub const CMD_index_CMD_redo: CMD_index = 361;
pub const CMD_index_CMD_redir: CMD_index = 362;
pub const CMD_index_CMD_redraw: CMD_index = 363;
pub const CMD_index_CMD_redrawstatus: CMD_index = 364;
pub const CMD_index_CMD_redrawtabline: CMD_index = 365;
pub const CMD_index_CMD_registers: CMD_index = 366;
pub const CMD_index_CMD_resize: CMD_index = 367;
pub const CMD_index_CMD_retab: CMD_index = 368;
pub const CMD_index_CMD_return: CMD_index = 369;
pub const CMD_index_CMD_rewind: CMD_index = 370;
pub const CMD_index_CMD_right: CMD_index = 371;
pub const CMD_index_CMD_rightbelow: CMD_index = 372;
pub const CMD_index_CMD_runtime: CMD_index = 373;
pub const CMD_index_CMD_ruby: CMD_index = 374;
pub const CMD_index_CMD_rubydo: CMD_index = 375;
pub const CMD_index_CMD_rubyfile: CMD_index = 376;
pub const CMD_index_CMD_rundo: CMD_index = 377;
pub const CMD_index_CMD_rviminfo: CMD_index = 378;
pub const CMD_index_CMD_substitute: CMD_index = 379;
pub const CMD_index_CMD_sNext: CMD_index = 380;
pub const CMD_index_CMD_sargument: CMD_index = 381;
pub const CMD_index_CMD_sall: CMD_index = 382;
pub const CMD_index_CMD_sandbox: CMD_index = 383;
pub const CMD_index_CMD_saveas: CMD_index = 384;
pub const CMD_index_CMD_sbuffer: CMD_index = 385;
pub const CMD_index_CMD_sbNext: CMD_index = 386;
pub const CMD_index_CMD_sball: CMD_index = 387;
pub const CMD_index_CMD_sbfirst: CMD_index = 388;
pub const CMD_index_CMD_sblast: CMD_index = 389;
pub const CMD_index_CMD_sbmodified: CMD_index = 390;
pub const CMD_index_CMD_sbnext: CMD_index = 391;
pub const CMD_index_CMD_sbprevious: CMD_index = 392;
pub const CMD_index_CMD_sbrewind: CMD_index = 393;
pub const CMD_index_CMD_scriptnames: CMD_index = 394;
pub const CMD_index_CMD_scriptencoding: CMD_index = 395;
pub const CMD_index_CMD_scriptversion: CMD_index = 396;
pub const CMD_index_CMD_scscope: CMD_index = 397;
pub const CMD_index_CMD_set: CMD_index = 398;
pub const CMD_index_CMD_setfiletype: CMD_index = 399;
pub const CMD_index_CMD_setglobal: CMD_index = 400;
pub const CMD_index_CMD_setlocal: CMD_index = 401;
pub const CMD_index_CMD_sfind: CMD_index = 402;
pub const CMD_index_CMD_sfirst: CMD_index = 403;
pub const CMD_index_CMD_shell: CMD_index = 404;
pub const CMD_index_CMD_simalt: CMD_index = 405;
pub const CMD_index_CMD_sign: CMD_index = 406;
pub const CMD_index_CMD_silent: CMD_index = 407;
pub const CMD_index_CMD_sleep: CMD_index = 408;
pub const CMD_index_CMD_slast: CMD_index = 409;
pub const CMD_index_CMD_smagic: CMD_index = 410;
pub const CMD_index_CMD_smap: CMD_index = 411;
pub const CMD_index_CMD_smapclear: CMD_index = 412;
pub const CMD_index_CMD_smenu: CMD_index = 413;
pub const CMD_index_CMD_snext: CMD_index = 414;
pub const CMD_index_CMD_snomagic: CMD_index = 415;
pub const CMD_index_CMD_snoremap: CMD_index = 416;
pub const CMD_index_CMD_snoremenu: CMD_index = 417;
pub const CMD_index_CMD_source: CMD_index = 418;
pub const CMD_index_CMD_sort: CMD_index = 419;
pub const CMD_index_CMD_split: CMD_index = 420;
pub const CMD_index_CMD_spellgood: CMD_index = 421;
pub const CMD_index_CMD_spelldump: CMD_index = 422;
pub const CMD_index_CMD_spellinfo: CMD_index = 423;
pub const CMD_index_CMD_spellrepall: CMD_index = 424;
pub const CMD_index_CMD_spellundo: CMD_index = 425;
pub const CMD_index_CMD_spellwrong: CMD_index = 426;
pub const CMD_index_CMD_sprevious: CMD_index = 427;
pub const CMD_index_CMD_srewind: CMD_index = 428;
pub const CMD_index_CMD_stop: CMD_index = 429;
pub const CMD_index_CMD_stag: CMD_index = 430;
pub const CMD_index_CMD_startinsert: CMD_index = 431;
pub const CMD_index_CMD_startgreplace: CMD_index = 432;
pub const CMD_index_CMD_startreplace: CMD_index = 433;
pub const CMD_index_CMD_stopinsert: CMD_index = 434;
pub const CMD_index_CMD_stjump: CMD_index = 435;
pub const CMD_index_CMD_stselect: CMD_index = 436;
pub const CMD_index_CMD_sunhide: CMD_index = 437;
pub const CMD_index_CMD_sunmap: CMD_index = 438;
pub const CMD_index_CMD_sunmenu: CMD_index = 439;
pub const CMD_index_CMD_suspend: CMD_index = 440;
pub const CMD_index_CMD_sview: CMD_index = 441;
pub const CMD_index_CMD_swapname: CMD_index = 442;
pub const CMD_index_CMD_syntax: CMD_index = 443;
pub const CMD_index_CMD_syntime: CMD_index = 444;
pub const CMD_index_CMD_syncbind: CMD_index = 445;
pub const CMD_index_CMD_t: CMD_index = 446;
pub const CMD_index_CMD_tNext: CMD_index = 447;
pub const CMD_index_CMD_tag: CMD_index = 448;
pub const CMD_index_CMD_tags: CMD_index = 449;
pub const CMD_index_CMD_tab: CMD_index = 450;
pub const CMD_index_CMD_tabclose: CMD_index = 451;
pub const CMD_index_CMD_tabdo: CMD_index = 452;
pub const CMD_index_CMD_tabedit: CMD_index = 453;
pub const CMD_index_CMD_tabfind: CMD_index = 454;
pub const CMD_index_CMD_tabfirst: CMD_index = 455;
pub const CMD_index_CMD_tabmove: CMD_index = 456;
pub const CMD_index_CMD_tablast: CMD_index = 457;
pub const CMD_index_CMD_tabnext: CMD_index = 458;
pub const CMD_index_CMD_tabnew: CMD_index = 459;
pub const CMD_index_CMD_tabonly: CMD_index = 460;
pub const CMD_index_CMD_tabprevious: CMD_index = 461;
pub const CMD_index_CMD_tabNext: CMD_index = 462;
pub const CMD_index_CMD_tabrewind: CMD_index = 463;
pub const CMD_index_CMD_tabs: CMD_index = 464;
pub const CMD_index_CMD_tcd: CMD_index = 465;
pub const CMD_index_CMD_tchdir: CMD_index = 466;
pub const CMD_index_CMD_tcl: CMD_index = 467;
pub const CMD_index_CMD_tcldo: CMD_index = 468;
pub const CMD_index_CMD_tclfile: CMD_index = 469;
pub const CMD_index_CMD_tearoff: CMD_index = 470;
pub const CMD_index_CMD_terminal: CMD_index = 471;
pub const CMD_index_CMD_tfirst: CMD_index = 472;
pub const CMD_index_CMD_throw: CMD_index = 473;
pub const CMD_index_CMD_tjump: CMD_index = 474;
pub const CMD_index_CMD_tlast: CMD_index = 475;
pub const CMD_index_CMD_tlmenu: CMD_index = 476;
pub const CMD_index_CMD_tlnoremenu: CMD_index = 477;
pub const CMD_index_CMD_tlunmenu: CMD_index = 478;
pub const CMD_index_CMD_tmenu: CMD_index = 479;
pub const CMD_index_CMD_tmap: CMD_index = 480;
pub const CMD_index_CMD_tmapclear: CMD_index = 481;
pub const CMD_index_CMD_tnext: CMD_index = 482;
pub const CMD_index_CMD_tnoremap: CMD_index = 483;
pub const CMD_index_CMD_topleft: CMD_index = 484;
pub const CMD_index_CMD_tprevious: CMD_index = 485;
pub const CMD_index_CMD_trewind: CMD_index = 486;
pub const CMD_index_CMD_try: CMD_index = 487;
pub const CMD_index_CMD_tselect: CMD_index = 488;
pub const CMD_index_CMD_tunmenu: CMD_index = 489;
pub const CMD_index_CMD_tunmap: CMD_index = 490;
pub const CMD_index_CMD_undo: CMD_index = 491;
pub const CMD_index_CMD_undojoin: CMD_index = 492;
pub const CMD_index_CMD_undolist: CMD_index = 493;
pub const CMD_index_CMD_unabbreviate: CMD_index = 494;
pub const CMD_index_CMD_unhide: CMD_index = 495;
pub const CMD_index_CMD_unlet: CMD_index = 496;
pub const CMD_index_CMD_unlockvar: CMD_index = 497;
pub const CMD_index_CMD_unmap: CMD_index = 498;
pub const CMD_index_CMD_unmenu: CMD_index = 499;
pub const CMD_index_CMD_unsilent: CMD_index = 500;
pub const CMD_index_CMD_update: CMD_index = 501;
pub const CMD_index_CMD_vglobal: CMD_index = 502;
pub const CMD_index_CMD_version: CMD_index = 503;
pub const CMD_index_CMD_verbose: CMD_index = 504;
pub const CMD_index_CMD_vertical: CMD_index = 505;
pub const CMD_index_CMD_visual: CMD_index = 506;
pub const CMD_index_CMD_view: CMD_index = 507;
pub const CMD_index_CMD_vimgrep: CMD_index = 508;
pub const CMD_index_CMD_vimgrepadd: CMD_index = 509;
pub const CMD_index_CMD_viusage: CMD_index = 510;
pub const CMD_index_CMD_vmap: CMD_index = 511;
pub const CMD_index_CMD_vmapclear: CMD_index = 512;
pub const CMD_index_CMD_vmenu: CMD_index = 513;
pub const CMD_index_CMD_vnoremap: CMD_index = 514;
pub const CMD_index_CMD_vnew: CMD_index = 515;
pub const CMD_index_CMD_vnoremenu: CMD_index = 516;
pub const CMD_index_CMD_vsplit: CMD_index = 517;
pub const CMD_index_CMD_vunmap: CMD_index = 518;
pub const CMD_index_CMD_vunmenu: CMD_index = 519;
pub const CMD_index_CMD_write: CMD_index = 520;
pub const CMD_index_CMD_wNext: CMD_index = 521;
pub const CMD_index_CMD_wall: CMD_index = 522;
pub const CMD_index_CMD_while: CMD_index = 523;
pub const CMD_index_CMD_winsize: CMD_index = 524;
pub const CMD_index_CMD_wincmd: CMD_index = 525;
pub const CMD_index_CMD_windo: CMD_index = 526;
pub const CMD_index_CMD_winpos: CMD_index = 527;
pub const CMD_index_CMD_wnext: CMD_index = 528;
pub const CMD_index_CMD_wprevious: CMD_index = 529;
pub const CMD_index_CMD_wq: CMD_index = 530;
pub const CMD_index_CMD_wqall: CMD_index = 531;
pub const CMD_index_CMD_wundo: CMD_index = 532;
pub const CMD_index_CMD_wviminfo: CMD_index = 533;
pub const CMD_index_CMD_xit: CMD_index = 534;
pub const CMD_index_CMD_xall: CMD_index = 535;
pub const CMD_index_CMD_xmap: CMD_index = 536;
pub const CMD_index_CMD_xmapclear: CMD_index = 537;
pub const CMD_index_CMD_xmenu: CMD_index = 538;
pub const CMD_index_CMD_xnoremap: CMD_index = 539;
pub const CMD_index_CMD_xnoremenu: CMD_index = 540;
pub const CMD_index_CMD_xrestore: CMD_index = 541;
pub const CMD_index_CMD_xunmap: CMD_index = 542;
pub const CMD_index_CMD_xunmenu: CMD_index = 543;
pub const CMD_index_CMD_yank: CMD_index = 544;
pub const CMD_index_CMD_z: CMD_index = 545;
pub const CMD_index_CMD_bang: CMD_index = 546;
pub const CMD_index_CMD_pound: CMD_index = 547;
pub const CMD_index_CMD_and: CMD_index = 548;
pub const CMD_index_CMD_star: CMD_index = 549;
pub const CMD_index_CMD_lshift: CMD_index = 550;
pub const CMD_index_CMD_equal: CMD_index = 551;
pub const CMD_index_CMD_rshift: CMD_index = 552;
pub const CMD_index_CMD_at: CMD_index = 553;
pub const CMD_index_CMD_Next: CMD_index = 554;
pub const CMD_index_CMD_Print: CMD_index = 555;
pub const CMD_index_CMD_X: CMD_index = 556;
pub const CMD_index_CMD_tilde: CMD_index = 557;
pub const CMD_index_CMD_SIZE: CMD_index = 558;
pub const CMD_index_CMD_USER: CMD_index = -1;
pub const CMD_index_CMD_USER_BUF: CMD_index = -2;
pub type CMD_index = ::std::os::raw::c_int;
pub use self::CMD_index as cmdidx_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exarg {
    pub arg: *mut char_u,
    pub nextcmd: *mut char_u,
    pub cmd: *mut char_u,
    pub cmdlinep: *mut *mut char_u,
    pub cmdidx: cmdidx_T,
    pub argt: ::std::os::raw::c_long,
    pub skip: ::std::os::raw::c_int,
    pub forceit: ::std::os::raw::c_int,
    pub addr_count: ::std::os::raw::c_int,
    pub line1: linenr_T,
    pub line2: linenr_T,
    pub addr_type: cmd_addr_T,
    pub flags: ::std::os::raw::c_int,
    pub do_ecmd_cmd: *mut char_u,
    pub do_ecmd_lnum: linenr_T,
    pub append: ::std::os::raw::c_int,
    pub usefilter: ::std::os::raw::c_int,
    pub amount: ::std::os::raw::c_int,
    pub regname: ::std::os::raw::c_int,
    pub force_bin: ::std::os::raw::c_int,
    pub read_edit: ::std::os::raw::c_int,
    pub force_ff: ::std::os::raw::c_int,
    pub force_enc: ::std::os::raw::c_int,
    pub bad_char: ::std::os::raw::c_int,
    pub useridx: ::std::os::raw::c_int,
    pub errmsg: *mut ::std::os::raw::c_char,
    pub getline: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
        ) -> *mut char_u,
    >,
    pub cookie: *mut ::std::os::raw::c_void,
    pub cstack: *mut condstack,
    pub verbose_save: ::std::os::raw::c_long,
    pub save_msg_silent: ::std::os::raw::c_int,
    pub did_esilent: ::std::os::raw::c_int,
    pub did_sandbox: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_exarg() {
    assert_eq!(
        ::std::mem::size_of::<exarg>(),
        200usize,
        concat!("Size of: ", stringify!(exarg))
    );
    assert_eq!(
        ::std::mem::align_of::<exarg>(),
        8usize,
        concat!("Alignment of ", stringify!(exarg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).arg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).nextcmd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(nextcmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).cmd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).cmdlinep as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmdlinep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).cmdidx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cmdidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).argt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(argt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).skip as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).forceit as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(forceit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).addr_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(addr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).line1 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(line1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).line2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(line2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).addr_type as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(addr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).flags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).do_ecmd_cmd as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(do_ecmd_cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).do_ecmd_lnum as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(do_ecmd_lnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).append as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).usefilter as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(usefilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).amount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).regname as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).force_bin as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).read_edit as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(read_edit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).force_ff as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_ff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).force_enc as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(force_enc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).bad_char as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(bad_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).useridx as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(useridx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).errmsg as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(errmsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).getline as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(getline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).cookie as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).cstack as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(cstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).verbose_save as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(verbose_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).save_msg_silent as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(save_msg_silent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).did_esilent as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(did_esilent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exarg>())).did_sandbox as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(exarg),
            "::",
            stringify!(did_sandbox)
        )
    );
}
extern "C" {
    pub static mut Rows: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut Columns: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut ScreenLines: *mut schar_T;
}
extern "C" {
    pub static mut ScreenAttrs: *mut sattr_T;
}
extern "C" {
    pub static mut LineOffset: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut LineWraps: *mut char_u;
}
extern "C" {
    pub static mut autoCommandCallback: AutoCommandCallback;
}
extern "C" {
    pub static mut bufferUpdateCallback: BufferUpdateCallback;
}
extern "C" {
    pub static mut clearCallback: ClearCallback;
}
extern "C" {
    pub static mut clipboardGetCallback: ClipboardGetCallback;
}
extern "C" {
    pub static mut cursorAddCallback: CursorAddCallback;
}
extern "C" {
    pub static mut customCommandCallback: CustomCommandCallback;
}
extern "C" {
    pub static mut fileWriteFailureCallback: FileWriteFailureCallback;
}
extern "C" {
    pub static mut directoryChangedCallback: DirectoryChangedCallback;
}
extern "C" {
    pub static mut formatCallback: FormatCallback;
}
extern "C" {
    pub static mut gotoCallback: GotoCallback;
}
extern "C" {
    pub static mut tabPageCallback: TabPageCallback;
}
extern "C" {
    pub static mut displayIntroCallback: VoidCallback;
}
extern "C" {
    pub static mut displayVersionCallback: VoidCallback;
}
extern "C" {
    pub static mut autoIndentCallback: AutoIndentCallback;
}
extern "C" {
    pub static mut colorSchemeChangedCallback: ColorSchemeChangedCallback;
}
extern "C" {
    pub static mut colorSchemeCompletionCallback: ColorSchemeCompletionCallback;
}
extern "C" {
    pub static mut cursorMoveScreenLineCallback: CursorMoveScreenLineCallback;
}
extern "C" {
    pub static mut cursorMoveScreenPositionCallback: CursorMoveScreenPositionCallback;
}
extern "C" {
    pub static mut functionGetCharCallback: FunctionGetCharCallback;
}
extern "C" {
    pub static mut inputMapCallback: InputMapCallback;
}
extern "C" {
    pub static mut inputUnmapCallback: InputUnmapCallback;
}
extern "C" {
    pub static mut messageCallback: MessageCallback;
}
extern "C" {
    pub static mut outputCallback: OutputCallback;
}
extern "C" {
    pub static mut macroStartRecordCallback: MacroStartRecordCallback;
}
extern "C" {
    pub static mut macroStopRecordCallback: MacroStopRecordCallback;
}
extern "C" {
    pub static mut optionSetCallback: OptionSetCallback;
}
extern "C" {
    pub static mut quitCallback: QuitCallback;
}
extern "C" {
    pub static mut scrollCallback: ScrollCallback;
}
extern "C" {
    pub static mut terminalCallback: TerminalCallback;
}
extern "C" {
    pub static mut toggleCommentsCallback: ToggleCommentsCallback;
}
extern "C" {
    pub static mut stopSearchHighlightCallback: VoidCallback;
}
extern "C" {
    pub static mut unhandledEscapeCallback: VoidCallback;
}
extern "C" {
    pub static mut windowSplitCallback: WindowSplitCallback;
}
extern "C" {
    pub static mut windowMovementCallback: WindowMovementCallback;
}
extern "C" {
    pub static mut yankCallback: YankCallback;
}
extern "C" {
    pub static mut state_current: *mut sm_T;
}
extern "C" {
    pub static mut ScreenLinesUC: *mut u8char_T;
}
extern "C" {
    pub static mut ScreenLinesC: [*mut u8char_T; 6usize];
}
extern "C" {
    pub static mut Screen_mco: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ScreenLines2: *mut schar_T;
}
extern "C" {
    pub static mut TabPageIdxs: *mut ::std::os::raw::c_short;
}
extern "C" {
    pub static mut screen_Rows: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut screen_Columns: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mod_mask: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdline_row: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redraw_cmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redraw_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clear_cmdline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mode_displayed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_win_do_lines_ins: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdline_star: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ccline: cmdline_info;
}
extern "C" {
    pub static mut exec_from_reg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut screen_cleared: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut dollar_vcol: colnr_T;
}
extern "C" {
    pub static mut msg_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_row: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scrolled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scrolled_ign: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_msg: *mut char_u;
}
extern "C" {
    pub static mut keep_msg_attr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_msg_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_fileinfo: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_scroll: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_didout: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_didany: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_nowait: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut info_message: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_hist_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_clr_eos: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_skip: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_severe: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_endif: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vimvardict: dict_T;
}
extern "C" {
    pub static mut globvardict: dict_T;
}
extern "C" {
    pub static mut did_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut called_vim_beep: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_uncaught_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_emsg_syntax: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut called_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_exitval: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_on_display: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut rc_did_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_wait_return: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut quit_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_keep_indent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vgetc_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut didset_vim: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut didset_vimruntime: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lines_left: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_no_more: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sourcing_name: *mut char_u;
}
extern "C" {
    pub static mut sourcing_lnum: linenr_T;
}
extern "C" {
    pub static mut ex_nesting_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_break_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_did_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_tick: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_backtrace_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut current_exception: *mut except_T;
}
extern "C" {
    pub static mut did_throw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_rethrow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut check_cstack: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut trylevel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut force_abort: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut msg_list: *mut *mut msglist;
}
extern "C" {
    pub static mut suppress_errthrow: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut caught_stack: *mut except_T;
}
extern "C" {
    pub static mut may_garbage_collect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut want_garbage_collect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut garbage_collect_at_exit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut current_sctx: sctx_T;
}
extern "C" {
    pub static mut did_source_packages: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut hash_removed: char_u;
}
extern "C" {
    pub static mut scroll_region: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut t_colors: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut highlight_match: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut search_match_lines: linenr_T;
}
extern "C" {
    pub static mut search_match_endcol: colnr_T;
}
extern "C" {
    pub static mut search_first_line: linenr_T;
}
extern "C" {
    pub static mut search_last_line: linenr_T;
}
extern "C" {
    pub static mut no_smartcase: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_check_timestamps: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut highlight_attr: [::std::os::raw::c_int; 46usize];
}
extern "C" {
    pub static mut cterm_normal_fg_color: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cterm_normal_fg_bold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cterm_normal_bg_color: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_no_enter: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_no_leave: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut modified_was_set: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut au_did_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut keep_filetype: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut au_new_curbuf: bufref_T;
}
extern "C" {
    pub static mut au_pending_free_buf: *mut buf_T;
}
extern "C" {
    pub static mut au_pending_free_win: *mut win_T;
}
extern "C" {
    pub static mut diff_context: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut diff_foldcolumn: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut diff_need_scrollbind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut updating_screen: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clip_unnamed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut clip_unnamed_saved: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut firstwin: *mut win_T;
}
extern "C" {
    pub static mut lastwin: *mut win_T;
}
extern "C" {
    pub static mut prevwin: *mut win_T;
}
extern "C" {
    pub static mut curwin: *mut win_T;
}
extern "C" {
    pub static mut aucmd_win: *mut win_T;
}
extern "C" {
    pub static mut aucmd_win_used: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut topframe: *mut frame_T;
}
extern "C" {
    pub static mut first_tabpage: *mut tabpage_T;
}
extern "C" {
    pub static mut curtab: *mut tabpage_T;
}
extern "C" {
    pub static mut redraw_tabline: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut firstbuf: *mut buf_T;
}
extern "C" {
    pub static mut lastbuf: *mut buf_T;
}
extern "C" {
    pub static mut curbuf: *mut buf_T;
}
extern "C" {
    pub static mut mf_dont_release: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut global_alist: alist_T;
}
extern "C" {
    pub static mut max_alist_id: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut arg_had_last: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ru_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sc_col: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut starting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut really_exiting: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut v_dying: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut stdout_isatty: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut restricted: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut secure: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut textlock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curbuf_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut allbuf_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sandbox: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut silent_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual: pos_T;
}
extern "C" {
    pub static mut VIsual_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_select: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_reselect: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut VIsual_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redo_VIsual_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_ai: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ai_col: colnr_T;
}
extern "C" {
    pub static mut end_comment_pending: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_syncbind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut saved_cursor: pos_T;
}
extern "C" {
    pub static mut Insstart: pos_T;
}
extern "C" {
    pub static mut Insstart_orig: pos_T;
}
extern "C" {
    pub static mut orig_line_count: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vr_lines_changed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_dbcs: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_unicode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_utf8: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enc_latin1like: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut has_mbyte: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mb_bytelen_tab: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static mut input_conv: vimconv_T;
}
extern "C" {
    pub static mut output_conv: vimconv_T;
}
extern "C" {
    pub static mut mb_ptr2len:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_ptr2len_len: ::std::option::Option<
        unsafe extern "C" fn(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2len: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2bytes: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int, buf: *mut char_u) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_ptr2cells:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_ptr2cells_len: ::std::option::Option<
        unsafe extern "C" fn(p: *mut char_u, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_char2cells: ::std::option::Option<
        unsafe extern "C" fn(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_off2cells: ::std::option::Option<
        unsafe extern "C" fn(
            off: ::std::os::raw::c_uint,
            max_off: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut mb_ptr2char:
        ::std::option::Option<unsafe extern "C" fn(p: *mut char_u) -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut mb_head_off: ::std::option::Option<
        unsafe extern "C" fn(base: *mut char_u, p: *mut char_u) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut State: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut debug_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut finish_op: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opcount: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut motion_force: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut exmode_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_no_reprint: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut reg_recording: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut reg_executing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_mapping: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_zero_mapping: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut allow_keys: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_u_sync: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut u_sync_once: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut restart_edit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut arrow_used: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ins_at_eol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_abbr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut mapped_ctrl_c: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ctrl_c_interrupts: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmdmod: cmdmod_T;
}
extern "C" {
    pub static mut msg_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut emsg_noredir: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cmd_silent: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut swap_exists_action: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut swap_exists_did_quit: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut IObuff: *mut char_u;
}
extern "C" {
    pub static mut NameBuff: *mut char_u;
}
extern "C" {
    pub static mut msg_buf: [::std::os::raw::c_char; 480usize];
}
extern "C" {
    pub static mut RedrawingDisabled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut readonlymode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut recoverymode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut typebuf: typebuf_T;
}
extern "C" {
    pub static mut ex_normal_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ex_normal_lock: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_script: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut stop_insert_mode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut KeyTyped: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut KeyStuffed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut maptick: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut must_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut skip_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut do_redraw: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_highlight_changed: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut scriptin: [*mut FILE; 15usize];
}
extern "C" {
    pub static mut curscript: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut scriptout: *mut FILE;
}
extern "C" {
    pub static mut read_cmd_fd: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut termcap_active: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut cur_tmode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut bangredo: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut searchcmdlen: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_outofmem_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut did_swapwrite_msg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut undo_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut global_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut listcmd_busy: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut need_start_insertmode: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut last_cmdline: *mut char_u;
}
extern "C" {
    pub static mut repeat_cmdline: *mut char_u;
}
extern "C" {
    pub static mut new_last_cmdline: *mut char_u;
}
extern "C" {
    pub static mut autocmd_fname: *mut char_u;
}
extern "C" {
    pub static mut autocmd_fname_full: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_bufnr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut autocmd_match: *mut char_u;
}
extern "C" {
    pub static mut did_cursorhold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut last_cursormoved: pos_T;
}
extern "C" {
    pub static mut postponed_split: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut postponed_split_flags: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut postponed_split_tab: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut g_do_tagpreview: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut g_tag_at_cursor: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut replace_offset: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut escape_chars: *mut char_u;
}
extern "C" {
    pub static mut keep_help_flag: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut empty_option: *mut char_u;
}
extern "C" {
    pub static mut redir_off: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_fd: *mut FILE;
}
extern "C" {
    pub static mut redir_reg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_vname: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut redir_execute: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut breakat_flags: [::std::os::raw::c_char; 256usize];
}
extern "C" {
    pub static mut Version: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut longVersion: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut globaldir: *mut char_u;
}
extern "C" {
    pub static mut lcs_eol: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_ext: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_prec: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_nbsp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_space: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab1: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab2: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_tab3: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut lcs_trail: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_stl: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_stlnc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_vert: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_fold: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut fill_diff: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_fold_update: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut km_stopsel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut km_startsel: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_lines_msg: [char_u; 0usize];
}
extern "C" {
    pub static mut sub_nsubs: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut sub_nlines: linenr_T;
}
extern "C" {
    pub static mut wim_flags: [char_u; 4usize];
}
extern "C" {
    pub static mut no_hlsearch: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut typebuf_was_filled: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut virtual_op: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut e_abort: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_argreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_backslash: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_curdir: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endif: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endtry: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endwhile: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_endfor: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_while: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_for: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_exists: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_failed: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_internal: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_intern2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_interr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invaddr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invarg2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_duparg2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invargval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invargNval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invexpr2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invrange: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invcmd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_markinval: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_marknotset: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_modifiable: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nesting: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noalt: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noabbr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nobang: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nogvim: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nohebrew: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nofarsi: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noarabic: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nogroup: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noinstext: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nolastcmd: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomap: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomatch: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nomatch2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noname: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nopresub: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noprev: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noprevre: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_norange: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_noroom: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notcreate: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notmp: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notopen: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_notread: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_null: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_openerrf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_outofmem: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_patnotf2: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_positive: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_prev_dir: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_quickfix: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_loclist: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_re_damg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_re_corr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonly: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonlyvar: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readonlysbx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_emptykey: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dictreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listidx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_blobidx: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalblob: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomanyarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dictkey: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listblobreq: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listdictarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_listdictblobarg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_readerrf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_sandbox: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_secure: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_scroll: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_shellempty: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_swapclose: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_tagstack: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toocompl: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_longname: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomsbra: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_toomany: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_trailing: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_umark: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_wildexpand: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_winheight: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_winwidth: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_write: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_zerocount: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_usingsid: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_maxmempat: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_emptybuf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_nobufnr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalpat: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_bufloaded: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_invalidreg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_dirnotf: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut e_au_recursive: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut top_bot_msg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut bot_top_msg: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut starttime: time_T;
}
extern "C" {
    pub static mut vim_ignored: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vim_ignoredp: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut alloc_fail_id: alloc_id_T;
}
extern "C" {
    pub static mut alloc_fail_countdown: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut alloc_fail_repeat: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_char_avail_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut disable_redraw_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ignore_redraw_flag_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut nfa_fail_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut no_query_mouse_for_testing: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut in_free_unref_items: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut time_for_testing: time_T;
}
extern "C" {
    pub static mut did_echo_string_emsg: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut eval_lavars_used: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimInit(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Buffer Methods"]
    pub fn vimBufferOpen(
        ffname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferLoad(
        ffname_arg: *mut char_u,
        lnum: linenr_T,
        flags: ::std::os::raw::c_int,
    ) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferNew(flags: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferCheckIfChanged(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetById(id: ::std::os::raw::c_int) -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferGetCurrent() -> *mut buf_T;
}
extern "C" {
    pub fn vimBufferSetCurrent(buf: *mut buf_T);
}
extern "C" {
    pub fn vimBufferGetFilename(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetFiletype(buf: *mut buf_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetId(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetLastChangedTick(buf: *mut buf_T) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn vimBufferGetLine(buf: *mut buf_T, lnum: linenr_T) -> *mut char_u;
}
extern "C" {
    pub fn vimBufferGetLineCount(buf: *mut buf_T) -> size_t;
}
extern "C" {
    pub fn vimBufferSetLines(
        buf: *mut buf_T,
        start: linenr_T,
        end: linenr_T,
        lines: *mut *mut char_u,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vimBufferGetModified(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferGetModifiable(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetModifiable(buf: *mut buf_T, modifiable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimBufferGetFileFormat(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetFileFormat(buf: *mut buf_T, fileformat: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimBufferGetReadOnly(buf: *mut buf_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimBufferSetReadOnly(buf: *mut buf_T, modifiable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimSetBufferUpdateCallback(bufferUpdate: BufferUpdateCallback);
}
extern "C" {
    #[doc = " Autocommands"]
    pub fn vimSetAutoCommandCallback(autoCommandDispatch: AutoCommandCallback);
}
extern "C" {
    #[doc = " Commandline"]
    pub fn vimCommandLineGetType() -> char_u;
}
extern "C" {
    pub fn vimCommandLineGetText() -> *mut char_u;
}
extern "C" {
    pub fn vimCommandLineGetPosition() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimCommandLineGetCompletions(
        completions: *mut *mut *mut char_u,
        count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vimSetCustomCommandHandler(customCommandHandler: CustomCommandCallback);
}
extern "C" {
    #[doc = " vimEval"]
    #[doc = ""]
    #[doc = " Evaluate a string as vim script, and return the result as string."]
    #[doc = " Callee is responsible for freeing the command as well as the result."]
    pub fn vimEval(str_: *mut char_u) -> *mut char_u;
}
extern "C" {
    pub fn vimSetFunctionGetCharCallback(callback: FunctionGetCharCallback);
}
extern "C" {
    #[doc = " Cursor Methods"]
    pub fn vimCursorGetColumn() -> colnr_T;
}
extern "C" {
    pub fn vimCursorGetColumnWant() -> colnr_T;
}
extern "C" {
    pub fn vimCursorSetColumnWant(curswant: colnr_T);
}
extern "C" {
    pub fn vimCursorGetLine() -> linenr_T;
}
extern "C" {
    pub fn vimCursorGetPosition() -> pos_T;
}
extern "C" {
    pub fn vimCursorSetPosition(pos: pos_T);
}
extern "C" {
    pub fn vimSetCursorAddCallback(cursorAddCallback: CursorAddCallback);
}
extern "C" {
    #[doc = " vimCursorGetDesiredColumn"]
    #[doc = ""]
    #[doc = " Get the column that we'd like to be at - used to stay in the same"]
    #[doc = " column for up/down cursor motions."]
    pub fn vimCursorGetDesiredColumn() -> colnr_T;
}
extern "C" {
    #[doc = " vimSetCursorMoveScreenLineCallback"]
    #[doc = ""]
    #[doc = " Callback when the cursor will be moved via screen lines (H, M, L)."]
    #[doc = " Because the libvim-consumer is responsible for managing the view,"]
    #[doc = " libvim needs information about the view to correctly handle these motions."]
    pub fn vimSetCursorMoveScreenLineCallback(
        cursorMoveScreenLineCallback: CursorMoveScreenLineCallback,
    );
}
extern "C" {
    #[doc = " vimSetCursorMoveScreenLineCallback"]
    #[doc = ""]
    #[doc = " Callback when the cursor will be moved via screen position (gj, gk)."]
    #[doc = " Because the libvim-consumer is responsible for managing the view,"]
    #[doc = " libvim needs information about the view to correctly handle these motions."]
    pub fn vimSetCursorMoveScreenPositionCallback(
        cursorMoveScreenPositionCallback: CursorMoveScreenPositionCallback,
    );
}
extern "C" {
    #[doc = " File I/O"]
    pub fn vimSetFileWriteFailureCallback(fileWriteFailureCallback: FileWriteFailureCallback);
}
extern "C" {
    #[doc = " vimInput"]
    #[doc = ""]
    #[doc = " vimInput(input) passes the string, verbatim, to vim to be processed,"]
    #[doc = " without replacing term-codes. This means strings like \"<LEFT>\" are"]
    #[doc = " handled literally. This function handles Unicode text correctly."]
    pub fn vimInput(input: *mut char_u);
}
extern "C" {
    #[doc = " vimKey"]
    #[doc = ""]
    #[doc = " vimKey(input) passes a string and escapes termcodes - so a"]
    #[doc = " a string like \"<LEFT>\" will first be replaced with the appropriate"]
    #[doc = " term-code, and handled."]
    pub fn vimKey(key: *mut char_u);
}
extern "C" {
    #[doc = " vimExecute"]
    #[doc = ""]
    #[doc = " vimExecute(cmd) executes a command as if it was typed at the command-line."]
    #[doc = ""]
    #[doc = " Example: vimExecute(\"echo 'hello!');"]
    pub fn vimExecute(cmd: *mut char_u);
}
extern "C" {
    pub fn vimExecuteLines(lines: *mut *mut char_u, lineCount: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Auto-indent"]
    pub fn vimSetAutoIndentCallback(callback: AutoIndentCallback) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Colorschemes"]
    pub fn vimColorSchemeSetChangedCallback(callback: ColorSchemeChangedCallback);
}
extern "C" {
    pub fn vimColorSchemeSetCompletionCallback(callback: ColorSchemeCompletionCallback);
}
extern "C" {
    #[doc = " Mapping"]
    pub fn vimSetInputMapCallback(mapCallback: InputMapCallback);
}
extern "C" {
    pub fn vimSetInputUnmapCallback(unmapCallback: InputUnmapCallback);
}
extern "C" {
    #[doc = " Messages"]
    pub fn vimSetMessageCallback(messageCallback: MessageCallback);
}
extern "C" {
    #[doc = " Misc"]
    pub fn vimSetClearCallback(clearCallback: ClearCallback);
}
extern "C" {
    pub fn vimSetOutputCallback(outputCallback: OutputCallback);
}
extern "C" {
    pub fn vimSetFormatCallback(formatCallback: FormatCallback);
}
extern "C" {
    pub fn vimSetGotoCallback(gotoCallback: GotoCallback);
}
extern "C" {
    pub fn vimSetTabPageCallback(tabPageCallback: TabPageCallback);
}
extern "C" {
    pub fn vimSetDirectoryChangedCallback(callback: DirectoryChangedCallback);
}
extern "C" {
    pub fn vimSetOptionSetCallback(callback: OptionSetCallback);
}
extern "C" {
    #[doc = " Operators"]
    pub fn vimSetToggleCommentsCallback(callback: ToggleCommentsCallback);
}
extern "C" {
    pub fn vimSetQuitCallback(callback: QuitCallback);
}
extern "C" {
    pub fn vimSetScrollCallback(callback: ScrollCallback);
}
extern "C" {
    pub fn vimSetUnhandledEscapeCallback(callback: VoidCallback);
}
extern "C" {
    #[doc = " Macros"]
    pub fn vimMacroSetStartRecordCallback(callback: MacroStartRecordCallback);
}
extern "C" {
    pub fn vimMacroSetStopRecordCallback(callback: MacroStopRecordCallback);
}
extern "C" {
    #[doc = " Options"]
    pub fn vimOptionSetTabSize(tabSize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimOptionSetInsertSpaces(insertSpaces: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimOptionGetInsertSpaces() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimOptionGetTabSize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Registers"]
    pub fn vimRegisterGet(
        reg_name: ::std::os::raw::c_int,
        num_lines: *mut ::std::os::raw::c_int,
        lines: *mut *mut *mut char_u,
    );
}
extern "C" {
    #[doc = " Undo"]
    pub fn vimUndoSaveCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimUndoSaveRegion(start_lnum: linenr_T, end_lnum: linenr_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimUndoSync(force: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Visual Mode"]
    pub fn vimVisualGetType() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimVisualSetType(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimVisualIsActive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimSelectIsActive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimVisualGetRange(startPos: *mut pos_T, endPos: *mut pos_T);
}
extern "C" {
    pub fn vimVisualSetStart(startPos: pos_T);
}
extern "C" {
    #[doc = " Search"]
    pub fn vimSearchGetMatchingPair(initc: ::std::os::raw::c_int) -> *mut pos_T;
}
extern "C" {
    pub fn vimSearchGetHighlights(
        buf: *mut buf_T,
        start_lnum: linenr_T,
        end_lnum: linenr_T,
        num_highlights: *mut ::std::os::raw::c_int,
        highlights: *mut *mut searchHighlight_T,
    );
}
extern "C" {
    pub fn vimSearchGetPattern() -> *mut char_u;
}
extern "C" {
    pub fn vimSetStopSearchHighlightCallback(callback: VoidCallback);
}
extern "C" {
    #[doc = " Terminal"]
    pub fn vimSetTerminalCallback(callback: TerminalCallback);
}
extern "C" {
    #[doc = " Window"]
    pub fn vimWindowGetWidth() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetHeight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetTopLine() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowGetLeftColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimWindowSetWidth(width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimWindowSetHeight(height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimWindowSetTopLeft(top: ::std::os::raw::c_int, left: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vimSetWindowSplitCallback(callback: WindowSplitCallback);
}
extern "C" {
    pub fn vimSetWindowMovementCallback(callback: WindowMovementCallback);
}
extern "C" {
    #[doc = " Misc"]
    pub fn vimSetClipboardGetCallback(callback: ClipboardGetCallback);
}
extern "C" {
    pub fn vimGetMode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimGetSubMode() -> subMode_T;
}
extern "C" {
    pub fn vimGetPendingOperator(pendingOp: *mut pendingOp_T) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vimSetYankCallback(callback: YankCallback);
}
extern "C" {
    pub fn vimSetDisplayIntroCallback(callback: VoidCallback);
}
extern "C" {
    pub fn vimSetDisplayVersionCallback(callback: VoidCallback);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
